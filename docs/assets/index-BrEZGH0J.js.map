{"version":3,"file":"index-BrEZGH0J.js","sources":["../../src/shared/models/account-data.ts","../../src/shared/models/account.ts","../../src/shared/models/loan.ts","../../src/shared/models/mortgage.ts","../../src/shared/models/net-wealth.ts","../../src/shared/models/projected-wealth.ts","../../src/shared/models/store.ts","../../src/shared/store.ts","../../src/shared/utility/format-cash.ts","../../src/shared/utility/mortgage-calc.ts","../../src/shared/utility/graph-helpers.ts","../../src/capabilities/net-wealth/components/wealth-chart/use-graph-data.ts","../../src/capabilities/net-wealth/components/wealth-chart/wealth-chart.tsx","../../src/capabilities/net-wealth/components/new-account/new-account.tsx","../../src/shared/components/ag-grid/ag-grid.tsx","../../src/shared/utility/format-date.ts","../../src/shared/utility/sort-by-date.ts","../../src/capabilities/net-wealth/components/tab-types/components/delete-account.tsx","../../src/capabilities/net-wealth/components/tab-types/components/update-account.tsx","../../src/capabilities/net-wealth/components/tab-types/account/column-config.tsx","../../src/capabilities/net-wealth/components/tab-types/account/hooks/useMissingYears.ts","../../src/capabilities/net-wealth/components/tab-types/account/account.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/column-config.tsx","../../src/shared/utility/group-by.ts","../../src/capabilities/net-wealth/components/tab-types/mortgage/add-loan.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/add-entry.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/mortgage.tsx","../../src/capabilities/net-wealth/components/account-tabs/account-tabs.tsx","../../src/capabilities/net-wealth/net-wealth.tsx","../../src/shared/utility/min-max-avg.ts","../../src/capabilities/projected-income/components/value.tsx","../../src/shared/components/formatters/cash.tsx","../../src/shared/components/formatters/duration.tsx","../../src/shared/utility/format-percent.ts","../../src/shared/components/formatters/percent.tsx","../../src/capabilities/projected-income/components/bonus-outcome.tsx","../../src/capabilities/projected-income/components/data-entry/column-config.tsx","../../src/capabilities/projected-income/components/data-entry/data-entry.tsx","../../src/shared/components/formatters/until.tsx","../../src/capabilities/projected-income/hooks/use-most-frequent-value.ts","../../src/capabilities/projected-income/hooks/use-projected-pay.ts","../../src/capabilities/projected-income/hooks/use-base-income.ts","../../src/capabilities/projected-income/components/merit-increase.tsx","../../src/capabilities/projected-income/components/outcome.tsx","../../src/capabilities/projected-income/hooks/use-april-bonus.ts","../../src/capabilities/projected-income/hooks/use-june-bonus.ts","../../src/capabilities/projected-income/hooks/use-july-bonus.ts","../../src/capabilities/projected-income/projected-income.tsx","../../src/capabilities/projected-wealth/hooks/use-yearly-wealth.ts","../../src/capabilities/projected-wealth/projected-wealth.tsx","../../src/shared/components/safety-button/safety-button.tsx","../../src/shared/hooks/use-export.tsx","../../src/shared/hooks/use-import.tsx","../../src/app/app.tsx","../../src/main.tsx"],"sourcesContent":["import { z } from \"zod\";\r\n\r\nexport const accountDataValidator = z.object({\r\n  date: z.string(),\r\n  value: z.number(),\r\n  id: z.string(),\r\n});\r\n\r\nexport type AccountData = z.infer<typeof accountDataValidator>;\r\n\r\n","import { z } from \"zod\";\r\nimport { accountDataValidator } from \"./account-data\";\r\n\r\nexport const accountValidator = z.object({\r\n  type: z.literal(\"account\"),\r\n  data: z.array(accountDataValidator),\r\n});\r\n\r\nexport type Account = z.infer<typeof accountValidator>;\r\n\r\n","import { z } from \"zod\";\r\n\r\nexport const loanValidator = z.object({\r\n  principal: z.number(),\r\n  ratePct: z.number(),\r\n  paymentsPerYear: z.number(),\r\n  payment: z.number(),\r\n  firstPaymentDate: z.string(),\r\n  ownershipPct: z.number(),\r\n});\r\n\r\nexport type Loan = z.infer<typeof loanValidator>;\r\n","import { z } from \"zod\";\r\nimport { accountDataValidator } from \"./account-data\";\r\nimport { loanValidator } from \"./loan\";\r\n\r\nexport const mortgageValidator = z.object({\r\n  type: z.literal(\"mortgage\"),\r\n  loan: loanValidator.optional(),\r\n  data: z.array(accountDataValidator),\r\n});\r\n\r\nexport type Mortgage = z.infer<typeof mortgageValidator>;\r\n","import { z } from \"zod\";\r\nimport { accountValidator } from \"./account\";\r\nimport { mortgageValidator } from \"./mortgage\";\r\n\r\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\r\n\r\nexport type Wealth = z.infer<typeof wealth>;\r\n","import { z } from \"zod\";\r\nimport { accountDataValidator } from \"./account-data\";\r\n\r\nexport const projectedWealth = z.object({\r\n  timeSeries: z.object({\r\n    paycheck: z.array(accountDataValidator),\r\n    retirementRate: z.array(accountDataValidator),\r\n    savingsRate: z.array(accountDataValidator),\r\n    meritBonusPct: z.array(accountDataValidator),\r\n    companyBonusPct: z.array(accountDataValidator),\r\n    meritBonus: z.array(accountDataValidator),\r\n    companyBonus: z.array(accountDataValidator),\r\n    retirementBonus: z.array(accountDataValidator),\r\n    equityPct: z.array(accountDataValidator),\r\n    meritIncreasePct: z.array(accountDataValidator),\r\n  }),\r\n});\r\n\r\nexport const getDefaults = () => ({\r\n  projectedIncome: {\r\n    timeSeries: {\r\n      paycheck: [],\r\n      retirementRate: [],\r\n      savingsRate: [],\r\n      meritBonusPct: [],\r\n      companyBonusPct: [],\r\n      meritBonus: [],\r\n      companyBonus: [],\r\n      retirementBonus: [],\r\n      equityPct: [],\r\n      meritIncreasePct: [],\r\n    },\r\n  },\r\n  wealth: {},\r\n});\r\n\r\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\r\nexport type TimeSeries = keyof ProjectedWealth[\"timeSeries\"];\r\n","import { z } from \"zod\";\r\nimport { wealth } from \"./net-wealth\";\r\nimport { projectedWealth } from \"./projected-wealth\";\r\n\r\nexport const storeValidator = z.object({\r\n  wealth: wealth,\r\n  projectedIncome: projectedWealth,\r\n});\r\n\r\nexport type Store = z.infer<typeof storeValidator>;\r\n","import { Store as CreateStore } from \"@tanstack/store\";\r\nimport merge from \"deepmerge\";\r\nimport { ZodSchema } from \"zod\";\r\nimport { Store, storeValidator } from \"./models/store\";\r\n\r\nconst createStore = <T extends object>(\r\n  key: string,\r\n  validator: ZodSchema,\r\n  defaultValue: T\r\n) => {\r\n  const localData = localStorage.getItem(key);\r\n  let data = localData ? JSON.parse(localData) : defaultValue;\r\n  const parse = validator.safeParse(data);\r\n\r\n  if (!parse.success) {\r\n    console.log(\"zod error\", parse.error);\r\n    console.log(\"original\", data);\r\n\r\n    const next = merge(data, defaultValue);\r\n    console.log(\"merged\", next);\r\n    localStorage.setItem(`${key}-previous`, JSON.stringify(data));\r\n    localStorage.setItem(key, JSON.stringify(next));\r\n    data = next;\r\n  }\r\n\r\n  const store = new CreateStore<T>(data);\r\n  store.subscribe(() => {\r\n    const current = localStorage.getItem(key);\r\n    current && localStorage.setItem(`${key}-previous`, current);\r\n    localStorage.setItem(key, JSON.stringify(store.state));\r\n  });\r\n\r\n  return store;\r\n};\r\n\r\nexport const store = createStore<Store>(\"store\", storeValidator, {\r\n  projectedIncome: {\r\n    timeSeries: {\r\n      paycheck: [],\r\n      retirementRate: [],\r\n      savingsRate: [],\r\n      meritBonusPct: [],\r\n      companyBonusPct: [],\r\n      meritBonus: [],\r\n      companyBonus: [],\r\n      retirementBonus: [],\r\n      equityPct: [],\r\n      meritIncreasePct: [],\r\n    },\r\n  },\r\n  wealth: {},\r\n});\r\n","export const formatCashShort = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"currency\",\r\n  currency: \"USD\",\r\n  notation: \"compact\",\r\n  maximumFractionDigits: 1,\r\n}).format;\r\n\r\nexport const formatCash = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"currency\",\r\n  currency: \"USD\",\r\n  maximumFractionDigits: 0,\r\n}).format;\r\n","import { DateTime } from \"luxon\";\r\nimport { Loan } from \"shared/models/loan\";\r\n\r\nexport const calcLoanBalance = (date: DateTime, loan: Loan) => {\r\n  const {\r\n    firstPaymentDate,\r\n    paymentsPerYear,\r\n    principal: pricipal,\r\n    ratePct: rate,\r\n    payment: monthlyPayment,\r\n  } = loan;\r\n  const anualizedRate = rate / paymentsPerYear;\r\n  const periods = date.diff(\r\n    DateTime.fromISO(firstPaymentDate),\r\n    \"months\"\r\n  ).months;\r\n  const totalRate = (1 + anualizedRate) ** periods;\r\n  const balance =\r\n    pricipal * totalRate - (monthlyPayment / anualizedRate) * (totalRate - 1);\r\n\r\n  return balance;\r\n};\r\n\r\nexport const calcEquity = (\r\n  ownershipPct: number,\r\n  houseValue: number | undefined,\r\n  loanBalance: number,\r\n  principal: number\r\n) => {\r\n  return houseValue\r\n    ? houseValue * ownershipPct - loanBalance\r\n    : principal - loanBalance;\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { Mortgage } from \"shared/models/mortgage\";\r\nimport { Account } from \"shared/models/account\";\r\nimport { calcEquity, calcLoanBalance } from \"./mortgage-calc\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\n\r\nexport const findNearstOnOrBefore = (date: DateTime, data: AccountData[]) => {\r\n  return data.find((x, idx, array) => {\r\n    if (idx == 0 && DateTime.fromISO(x.date).startOf(\"day\") > date) {\r\n      return true;\r\n    }\r\n    if (idx < array.length - 1) {\r\n      if (\r\n        DateTime.fromISO(x.date).startOf(\"day\") <= date &&\r\n        DateTime.fromISO(data[idx + 1].date).startOf(\"day\") > date\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n    if (idx === array.length - 1) {\r\n      return true;\r\n    }\r\n  });\r\n};\r\n\r\nexport const findSameYear = (date: DateTime, data: AccountData[]) => {\r\n  return data.find((x) => {\r\n    return DateTime.fromISO(x.date).year === date.year;\r\n  });\r\n};\r\n\r\nconst getMortgateValue = (date: DateTime, mortgage: Mortgage) => {\r\n  if (!mortgage.loan) {\r\n    return 0;\r\n  }\r\n  const entry = findNearstOnOrBefore(date, mortgage.data);\r\n  if (\r\n    entry?.date &&\r\n    mortgage.data[0] === entry &&\r\n    DateTime.fromISO(entry.date) > date\r\n  ) {\r\n    return 0;\r\n  }\r\n  const { ownershipPct, principal } = mortgage.loan;\r\n  const balance = calcLoanBalance(date, mortgage.loan);\r\n  return calcEquity(ownershipPct, entry?.value, balance, principal);\r\n};\r\n\r\nconst getAccountValue = (date: DateTime, account: Account) => {\r\n  const entry = findNearstOnOrBefore(date, account.data);\r\n  if (\r\n    entry?.date &&\r\n    account.data[0] === entry &&\r\n    DateTime.fromISO(entry.date) > date\r\n  ) {\r\n    return 0;\r\n  }\r\n  return entry?.value ?? 0;\r\n};\r\n\r\nexport const getGraphValue = (date: DateTime, account: Account | Mortgage) => {\r\n  switch (account.type) {\r\n    case \"account\":\r\n      return getAccountValue(date, account);\r\n    case \"mortgage\":\r\n      return getMortgateValue(date, account);\r\n  }\r\n};\r\n\r\nexport const getGraphDates = (accounts: (Account | Mortgage)[]) => {\r\n  return [\r\n    ...new Set(\r\n      accounts.flatMap((x) => {\r\n        return x.data.map((x) =>\r\n          DateTime.fromISO(x.date).startOf(\"day\").toISO()\r\n        );\r\n      })\r\n    ),\r\n  ]\r\n    .map((x) => DateTime.fromISO(x!))\r\n    .sort((a, b) => a.toMillis() - b.toMillis()) as DateTime<true>[];\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { getGraphDates, getGraphValue } from \"shared/utility/graph-helpers\";\r\n\r\nexport const useGraphData = () => {\r\n  const wealth = useStore(store, (x) => x.wealth);\r\n  return useMemo(() => {\r\n    const dates = getGraphDates(Object.values(wealth));\r\n    const accounts = Object.entries(wealth);\r\n    const graphData = dates.map((date) => {\r\n      return accounts.reduce(\r\n        (acc, [accountName, account]) => {\r\n          const value = getGraphValue(date, account);\r\n          acc[accountName] = value;\r\n          acc[\"total\"] = (acc[\"total\"] as number) + value;\r\n          acc[\"date\"] = date.toJSDate();\r\n          return acc;\r\n        },\r\n        { total: 0 } as Record<string, number | Date>\r\n      );\r\n    });\r\n    const firstNonZero = graphData.findIndex((x) => (x[\"total\"] as number) > 0);\r\n    return graphData.slice(firstNonZero);\r\n  }, [wealth]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport {\r\n  AgAreaSeriesOptions,\r\n  AgCartesianChartOptions,\r\n  AgLineSeriesOptions,\r\n} from \"ag-charts-community\";\r\nimport { AgChartsReact } from \"ag-charts-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { formatCashShort } from \"shared/utility/format-cash\";\r\nimport { useGraphData } from \"./use-graph-data\";\r\n\r\nexport const WealthChart = () => {\r\n  const wealth = useStore(store, (x) => x.wealth);\r\n  const data = useGraphData();\r\n\r\n  const series = useMemo(() => {\r\n    return [\r\n      ...Object.keys(wealth).map((x) => {\r\n        return {\r\n          stacked: true,\r\n          type: \"area\",\r\n          xKey: \"date\",\r\n          yKey: x,\r\n          yName: x,\r\n          tooltip: {\r\n            renderer: ({ datum, yKey, xKey }) => ({\r\n              content: `${DateTime.fromJSDate(\r\n                datum[xKey]\r\n              ).toISODate()} ${formatCashShort(datum[yKey])}`,\r\n            }),\r\n          },\r\n        } as AgAreaSeriesOptions;\r\n      }),\r\n      {\r\n        type: \"line\",\r\n        xKey: \"date\",\r\n        yKey: \"total\",\r\n        yName: \"Total\",\r\n        tooltip: {\r\n          renderer: ({ datum, yKey, xKey }) => ({\r\n            content: `${DateTime.fromJSDate(\r\n              datum[xKey]\r\n            ).toISODate()} ${formatCashShort(datum[yKey])}`,\r\n          }),\r\n        },\r\n      } as AgLineSeriesOptions,\r\n    ];\r\n  }, [wealth]);\r\n\r\n  const options: AgCartesianChartOptions = useMemo(\r\n    () => ({\r\n      theme: \"ag-default-dark\",\r\n      title: {\r\n        text: `Total Wealth ${formatCashShort(\r\n          (data[data.length - 1]?.total ?? 0) as number\r\n        )}`,\r\n      },\r\n      data,\r\n      axes: [\r\n        {\r\n          type: \"time\",\r\n          position: \"bottom\",\r\n          label: {\r\n            format: \"%Y\",\r\n          },\r\n        },\r\n        {\r\n          type: \"number\",\r\n          position: \"left\",\r\n        },\r\n      ],\r\n      series,\r\n    }),\r\n    [data, series]\r\n  );\r\n  return <AgChartsReact options={options} />;\r\n};\r\n","import {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  MenuItem,\r\n  Stack,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { create } from \"mutative\";\r\nimport { ReactNode, forwardRef, useRef, useState } from \"react\";\r\nimport { AssetType } from \"shared/models/asset-types\";\r\nimport { store } from \"shared/store\";\r\n\r\nexport const NewAccount = forwardRef<\r\n  HTMLButtonElement,\r\n  { children?: ReactNode }\r\n>((props, ref) => {\r\n  const [open, setOpen] = useState(false);\r\n  const nameRef = useRef<HTMLInputElement>(null);\r\n  const [error, setError] = useState(false);\r\n  const [accountType, setAccountType] = useState<AssetType>();\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        ref={ref}\r\n        variant=\"outlined\"\r\n        onClick={() => {\r\n          setOpen(true);\r\n          setError(false);\r\n          setAccountType(undefined);\r\n        }}\r\n        sx={{ marginLeft: 2 }}\r\n      >\r\n        add account\r\n      </Button>\r\n\r\n      <Dialog open={open} onClose={() => setOpen(false)}>\r\n        <DialogTitle>Add New Account</DialogTitle>\r\n        <DialogContent>\r\n          <Stack spacing={2} margin={2}>\r\n            <TextField\r\n              select\r\n              color={error ? \"error\" : \"primary\"}\r\n              onChange={(value) => {\r\n                setError(false);\r\n                setAccountType(value.target.value as AssetType);\r\n              }}\r\n              label=\"Type\"\r\n            >\r\n              <MenuItem value=\"mortgage\">Mortgage</MenuItem>\r\n              <MenuItem value=\"account\">Generic Account</MenuItem>\r\n            </TextField>\r\n\r\n            <TextField\r\n              placeholder=\"Name\"\r\n              onChange={() => {\r\n                setError(false);\r\n              }}\r\n              error={error}\r\n              inputRef={nameRef}\r\n            />\r\n          </Stack>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            disabled={error}\r\n            onClick={() => {\r\n              store.setState((prev) => {\r\n                return create(prev, (next) => {\r\n                  if (\r\n                    !nameRef.current?.value ||\r\n                    !accountType ||\r\n                    prev.wealth[nameRef.current.value]\r\n                  ) {\r\n                    setError(true);\r\n                    return;\r\n                  }\r\n\r\n                  next.wealth[nameRef.current.value] = {\r\n                    type: accountType,\r\n                    data: [],\r\n                  };\r\n\r\n                  setOpen(false);\r\n                });\r\n              });\r\n            }}\r\n          >\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      {props?.children}\r\n    </>\r\n  );\r\n});\r\n","import { AgGridReact, AgGridReactProps } from \"ag-grid-react\";\r\n\r\nexport const AgGrid = (props: AgGridReactProps & { id: string }) => {\r\n  const { id, ...rest } = props;\r\n  return (\r\n    <div id={id} className=\"ag-theme-quartz-dark\" style={{ height: \"100%\" }}>\r\n      <AgGridReact {...rest} />\r\n    </div>\r\n  );\r\n};\r\n","export const shortDate = \"yyyy-MM-dd\";\r\n","import { DateTime } from \"luxon\";\r\n\r\nexport const sortByDate =\r\n  <T>(select: (data: T) => DateTime, direction: \"asc\" | \"desc\") =>\r\n  (a: T, b: T) =>\r\n    direction === \"asc\"\r\n      ? select(a).toMillis() - select(b).toMillis()\r\n      : select(b).toMillis() - select(a).toMillis();\r\n","import { Button, Paper } from \"@mui/material\";\r\nimport { create } from \"mutative\";\r\nimport { store } from \"shared/store\";\r\n\r\nexport const DeleteAccount = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n\r\n  const onDeleteAccount = () => {\r\n    store.setState((prev) => {\r\n      return create(prev, (next) => {\r\n        delete next.wealth[accountName];\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ padding: 2, width: \"100%\" }}>\r\n      <Button onClick={onDeleteAccount} color=\"error\">\r\n        Delete Account\r\n      </Button>\r\n    </Paper>\r\n  );\r\n};\r\n","import { Button, Paper, TextField, Stack } from \"@mui/material\";\r\nimport { create } from \"mutative\";\r\nimport { useState } from \"react\";\r\nimport { store } from \"shared/store\";\r\n\r\nexport const RenameAccount = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n\r\n  const [nextAccountName, setNextAccountName] = useState<string>(accountName);\r\n\r\n  const onUpdateName = () => {\r\n    store.setState((prev) => {\r\n      return create(prev, (next) => {\r\n        next.wealth[nextAccountName] = next.wealth[accountName];\r\n        delete next.wealth[accountName];\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ padding: 2 }}>\r\n      <Stack spacing={1}>\r\n        <TextField\r\n          label=\"Account Name\"\r\n          value={nextAccountName}\r\n          onChange={(event) => setNextAccountName(event.target.value)}\r\n          placeholder=\"\"\r\n        />\r\n        <Button disabled={!nextAccountName} onClick={onUpdateName}>\r\n          Update Name\r\n        </Button>\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\nimport { Button } from \"@mui/material\";\r\nimport { ColDef } from \"ag-grid-community\";\r\nimport { CustomCellRendererProps } from \"ag-grid-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\nimport { store } from \"shared/store\";\r\nimport { formatCashShort } from \"shared/utility/format-cash\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\nexport const createAccountColumnConfig = (\r\n  accountName: string\r\n): ColDef<AccountData>[] => [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\r\n  },\r\n  {\r\n    headerName: \"Value\",\r\n    valueGetter: (x) => x.data?.value,\r\n    valueFormatter: (x) => formatCashShort(x.value),\r\n    type: \"numericColumn\",\r\n  },\r\n  {\r\n    headerName: \"Actions\",\r\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\r\n      return (\r\n        <Button\r\n          onClick={() => {\r\n            store.setState((prev) => {\r\n              return create(prev, (next) => {\r\n                const idxToRemove = next.wealth[accountName].data.findIndex(\r\n                  (x) => x.id === props.data?.id\r\n                );\r\n                next.wealth[accountName].data.splice(idxToRemove, 1);\r\n                return next;\r\n              });\r\n            });\r\n          }}\r\n          color=\"error\"\r\n        >\r\n          <DeleteForeverIcon />\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n];\r\n","import { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { Account } from \"shared/models/account\";\r\n\r\nexport const useMissingYears = (account: Account) => {\r\n  return useMemo(() => {\r\n    const years = Object.entries(\r\n      Object.groupBy(account.data, (x) => DateTime.fromISO(x.date).year)\r\n    )\r\n      .map(\r\n        ([year, entries]) =>\r\n          [\r\n            +year,\r\n            !!entries?.find((x) => {\r\n              const date = DateTime.fromISO(x.date);\r\n              const janFirst = DateTime.fromObject({\r\n                day: 1,\r\n                month: 1,\r\n                year: +year,\r\n              });\r\n              return date.diff(janFirst, [\"days\", \"hours\"]).days == 0;\r\n            }),\r\n          ] as [number, boolean]\r\n      )\r\n      .sort(([a], [b]) => {\r\n        return a - b;\r\n      });\r\n\r\n    const lookup = Object.fromEntries(years);\r\n    const missing = [];\r\n    for (let i = years[0][0]; i <= years[years.length - 1][0]; i++) {\r\n      if (!lookup[i]) {\r\n        missing.push(i);\r\n      }\r\n    }\r\n    return missing;\r\n  }, [account.data]);\r\n};\r\n","import {\r\n  Alert,\r\n  Button,\r\n  InputAdornment,\r\n  Paper,\r\n  Stack,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport Grid from \"@mui/system/Unstable_Grid\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { useMemo, useState } from \"react\";\r\nimport { AgGrid } from \"shared/components/ag-grid\";\r\nimport { Account } from \"shared/models/account\";\r\nimport { store } from \"shared/store\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport { sortByDate } from \"shared/utility/sort-by-date\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { DeleteAccount } from \"../components/delete-account\";\r\nimport { RenameAccount } from \"../components/update-account\";\r\nimport { createAccountColumnConfig } from \"./column-config\";\r\nimport { useMissingYears } from \"./hooks/useMissingYears\";\r\n\r\nexport const AccountTab = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n  const account = useStore(\r\n    store,\r\n    (state) => state.wealth[accountName]\r\n  ) as Account;\r\n  const [date, setDate] = useState(DateTime.local());\r\n  const [amount, setamount] = useState(0);\r\n\r\n  const missingYears = useMissingYears(account);\r\n  const hasSameDate = useMemo(() => {\r\n    return !!account?.data?.find((x) =>\r\n      date.hasSame(DateTime.fromISO(x.date), \"day\")\r\n    );\r\n  }, [account?.data, date]);\r\n\r\n  const onAddEntry = () => {\r\n    store.setState((prev) => {\r\n      return create(prev, (next) => {\r\n        (next.wealth[accountName] as Account).data.push({\r\n          date: date.toString(),\r\n          value: amount,\r\n          id: uuid(),\r\n        });\r\n        next.wealth[accountName].data.sort(\r\n          sortByDate((x) => DateTime.fromISO(x.date), \"asc\")\r\n        );\r\n      });\r\n    });\r\n  };\r\n\r\n  const accountColumnConfig = useMemo(() => {\r\n    return createAccountColumnConfig(accountName);\r\n  }, [accountName]);\r\n\r\n  return (\r\n    <>\r\n      {missingYears.length > 0 && (\r\n        <Alert severity=\"warning\">\r\n          Ensure an entry for Jan 1st for each year {missingYears.join(\", \")}\r\n        </Alert>\r\n      )}\r\n      <Grid container height=\"100%\" width={\"100%\"} padding={1} spacing={2}>\r\n        <Grid xs>\r\n          <AgGrid\r\n            reactiveCustomComponents\r\n            rowData={account?.data ?? []}\r\n            columnDefs={accountColumnConfig}\r\n            id={account + \"-history\"}\r\n          />\r\n        </Grid>\r\n        <Grid xs={9}>\r\n          <div>\r\n            <Grid container spacing={2}>\r\n              <Grid xs={2}>\r\n                <Paper elevation={3} sx={{ padding: 2 }}>\r\n                  <Stack spacing={1}>\r\n                    <DatePicker\r\n                      format={shortDate}\r\n                      sx={{ color: \"white\" }}\r\n                      label=\"Date\"\r\n                      defaultValue={date}\r\n                      onChange={(value) => value && setDate(value)}\r\n                    />\r\n                    <TextField\r\n                      label=\"amount\"\r\n                      value={amount}\r\n                      type=\"number\"\r\n                      onChange={(event) => setamount(+event.target.value)}\r\n                      InputProps={{\r\n                        startAdornment: (\r\n                          <InputAdornment position=\"start\">$</InputAdornment>\r\n                        ),\r\n                      }}\r\n                      placeholder=\"\"\r\n                    />\r\n                    <Button\r\n                      disabled={!amount || !date || hasSameDate}\r\n                      onClick={onAddEntry}\r\n                    >\r\n                      Add Entry\r\n                    </Button>\r\n                  </Stack>\r\n                </Paper>\r\n              </Grid>\r\n              <Grid xs={8}></Grid>\r\n              <Grid xs={2}>\r\n                <Stack spacing={2}>\r\n                  <DeleteAccount accountName={accountName} />\r\n                  <RenameAccount accountName={accountName} />\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\nimport { Button } from \"@mui/material\";\r\nimport { ColDef } from \"ag-grid-community\";\r\nimport { CustomCellRendererProps } from \"ag-grid-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\nimport { store } from \"shared/store\";\r\nimport { formatCashShort } from \"shared/utility/format-cash\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\nexport const createAccountColumnConfig = (\r\n  accountName: string\r\n): ColDef<AccountData>[] => [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\r\n  },\r\n  {\r\n    headerName: \"Home Value\",\r\n    valueGetter: (x) => x.data?.value,\r\n    valueFormatter: (x) => formatCashShort(x.value),\r\n    type: \"numericColumn\",\r\n  },\r\n  {\r\n    headerName: \"Actions\",\r\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\r\n      return (\r\n        <Button\r\n          onClick={() => {\r\n            store.setState((prev) => {\r\n              return create(prev, (next) => {\r\n                const account = next.wealth[accountName];\r\n                const idxToRemove = account.data.findIndex(\r\n                  (x) => x.id === props.data?.id\r\n                );\r\n                account.data.splice(idxToRemove, 1);\r\n                return next;\r\n              });\r\n            });\r\n          }}\r\n          color=\"error\"\r\n        >\r\n          <DeleteForeverIcon />\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n];\r\n\r\nexport const mortgageColumnConfig: ColDef<{\r\n  date: DateTime;\r\n  balance: number;\r\n  equity: number;\r\n}>[] = [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data?.date,\r\n  },\r\n  {\r\n    headerName: \"Loan Balance\",\r\n    valueGetter: (x) => x.data?.balance.toFixed(2),\r\n    valueFormatter: (x) => formatCashShort(x.value),\r\n    type: \"numericColumn\",\r\n  },\r\n  {\r\n    headerName: \"Equity\",\r\n    valueGetter: (x) => x.data?.equity.toFixed(2),\r\n    valueFormatter: (x) => formatCashShort(x.value),\r\n    type: \"numericColumn\",\r\n  },\r\n];\r\n","export function groupBy<T, T2 extends string | number | symbol>(\r\n  array: T[],\r\n  selector: (x: T) => T2\r\n): Record<T2, T[]> {\r\n  return array.reduce((acc: Record<T2, T[]>, curr: T) => {\r\n    const key = selector(curr);\r\n    acc[key] ??= [];\r\n    acc[key].push(curr);\r\n    return acc;\r\n  }, {} as Record<T2, T[]>);\r\n}\r\n","import { ZodIssue, z } from \"zod\";\r\nimport { Button, Paper, Stack, TextField } from \"@mui/material\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useRef, useState } from \"react\";\r\nimport { create } from \"mutative\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { Loan } from \"shared/models/loan\";\r\nimport { Mortgage } from \"shared/models/mortgage\";\r\nimport { store } from \"shared/store\";\r\nimport { groupBy } from \"shared/utility/group-by\";\r\n\r\nconst convertPct = (value: number) => {\r\n  return value > 1 ? value / 100 : value;\r\n};\r\n\r\nconst validator: z.ZodType<Loan> = z.object({\r\n  principal: z.number().min(0),\r\n  ratePct: z.number().min(0),\r\n  paymentsPerYear: z.number().min(0),\r\n  payment: z.number().min(0),\r\n  firstPaymentDate: z.string().datetime({ offset: true }),\r\n  ownershipPct: z.number().min(0),\r\n});\r\n\r\nexport const AddLoan = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n\r\n  const loan = useStore(store, (x) => {\r\n    const account = x.wealth[accountName];\r\n    if (\"loan\" in account) {\r\n      return account.loan;\r\n    }\r\n  });\r\n\r\n  const ref = useRef<Partial<Loan>>(loan ?? {});\r\n  const [error, setError] = useState<Partial<Record<keyof Loan, ZodIssue>>>({});\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ padding: 2 }}>\r\n      <Stack spacing={1}>\r\n        <DatePicker\r\n          defaultValue={\r\n            ref.current?.firstPaymentDate\r\n              ? DateTime.fromISO(ref.current.firstPaymentDate)\r\n              : null\r\n          }\r\n          label=\"First Payment\"\r\n          slotProps={{\r\n            textField: {\r\n              error: !!error.firstPaymentDate,\r\n            },\r\n          }}\r\n          onChange={(value: DateTime | null) => {\r\n            if (value) {\r\n              ref.current.firstPaymentDate = value.toISO()!;\r\n            }\r\n          }}\r\n        />\r\n        <TextField\r\n          error={!!error.principal}\r\n          defaultValue={loan?.principal}\r\n          onChange={(event) => {\r\n            ref.current.principal = +event.target.value;\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Principal\"\r\n          type=\"number\"\r\n        />\r\n        <TextField\r\n          error={!!error.ratePct}\r\n          defaultValue={loan?.ratePct}\r\n          onChange={(event) => {\r\n            ref.current.ratePct = convertPct(+event.target.value);\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Rate\"\r\n          type=\"number\"\r\n        />\r\n        <TextField\r\n          error={!!error.paymentsPerYear}\r\n          defaultValue={loan?.paymentsPerYear}\r\n          onChange={(event) => {\r\n            ref.current.paymentsPerYear = +event.target.value;\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Payments Per Year\"\r\n          type=\"number\"\r\n        />\r\n        <TextField\r\n          defaultValue={loan?.payment}\r\n          error={!!error.payment}\r\n          onChange={(event) => {\r\n            ref.current.payment = +event.target.value;\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Payment\"\r\n          type=\"number\"\r\n        />\r\n        <TextField\r\n          defaultValue={loan?.ownershipPct}\r\n          error={!!error.ownershipPct}\r\n          onChange={(event) => {\r\n            ref.current.ownershipPct = convertPct(+event.target.value);\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Ownership (%)\"\r\n          type=\"number\"\r\n        />\r\n        <Button\r\n          onClick={() => {\r\n            const parsed = validator.safeParse(ref.current);\r\n            if (parsed.success) {\r\n              setError({});\r\n              store.setState((prev) => {\r\n                return create(prev, (next) => {\r\n                  (next.wealth[accountName] as Mortgage).loan = parsed.data;\r\n                });\r\n              });\r\n            } else {\r\n              const issues = groupBy(parsed.error.issues, (x) =>\r\n                x.path.join(\"\")\r\n              );\r\n              setError(issues);\r\n            }\r\n          }}\r\n        >\r\n          Set Loan\r\n        </Button>\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n","import { Button, Paper, TextField } from \"@mui/material\";\r\nimport { Stack } from \"@mui/system\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useRef } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { create } from \"mutative\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nexport const AddEntry = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n  const ref = useRef<{ date?: DateTime; value?: number }>({\r\n    date: DateTime.local(),\r\n    value: 0,\r\n  });\r\n  const onAddEntry = () => {\r\n    const { date, value } = ref.current;\r\n    if (!date || !value) {\r\n      return;\r\n    }\r\n    store.setState((prev) => {\r\n      return create(prev, (next) => {\r\n        next.wealth[accountName].data.push({\r\n          date: date.toISO()!,\r\n          value,\r\n          id: uuid(),\r\n        });\r\n      });\r\n    });\r\n  };\r\n  return (\r\n    <Paper elevation={3} sx={{ padding: 2 }}>\r\n      <Stack spacing={1}>\r\n        <DatePicker\r\n          defaultValue={DateTime.local()}\r\n          onChange={(date: DateTime | null) => {\r\n            if (date) {\r\n              ref.current.date = date;\r\n            }\r\n          }}\r\n        />\r\n        <TextField\r\n          label=\"Home value\"\r\n          type=\"numeric\"\r\n          onChange={(event) => {\r\n            ref.current.value = +event.target.value;\r\n          }}\r\n        />\r\n        <Button onClick={onAddEntry}>Add Home Value</Button>\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n","import Grid from \"@mui/system/Unstable_Grid\";\r\nimport { store } from \"shared/store\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { useMemo } from \"react\";\r\nimport {\r\n  createAccountColumnConfig,\r\n  mortgageColumnConfig,\r\n} from \"./column-config\";\r\nimport { AddLoan } from \"./add-loan\";\r\nimport { AddEntry } from \"./add-entry\";\r\nimport { AgGrid } from \"shared/components/ag-grid\";\r\nimport { Mortgage } from \"shared/models/mortgage\";\r\nimport {\r\n  findNearstOnOrBefore,\r\n  getGraphDates,\r\n} from \"shared/utility/graph-helpers\";\r\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\r\nimport { DeleteAccount } from \"../components/delete-account\";\r\nimport { RenameAccount } from \"../components/update-account\";\r\nimport { Stack } from \"@mui/system\";\r\n\r\nexport const MortgageTab = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n\r\n  const account = useStore(\r\n    store,\r\n    (state) => state.wealth[accountName]\r\n  ) as Mortgage;\r\n\r\n  const allAccounts = useStore(store, (x) => x.wealth);\r\n\r\n  const accountColumnConfig = useMemo(() => {\r\n    return createAccountColumnConfig(accountName);\r\n  }, [accountName]);\r\n\r\n  const mortgageData = useMemo(() => {\r\n    if (!account?.loan) {\r\n      return [];\r\n    }\r\n\r\n    return getGraphDates(Object.values(allAccounts)).map((date) => {\r\n      const loanBalance = calcLoanBalance(date, account.loan!);\r\n      return {\r\n        date,\r\n        balance: loanBalance,\r\n        equity: calcEquity(\r\n          account.loan!.ownershipPct,\r\n          findNearstOnOrBefore(date, account.data)?.value,\r\n          loanBalance,\r\n          account.loan!.principal\r\n        ),\r\n      };\r\n    });\r\n  }, [account, allAccounts]);\r\n\r\n  return (\r\n    <Grid container height=\"100%\" width={\"100%\"} padding={1} spacing={2}>\r\n      <Grid xs={3}>\r\n        <AgGrid\r\n          reactiveCustomComponents\r\n          rowData={account?.data ?? []}\r\n          columnDefs={accountColumnConfig}\r\n          id={account + \"-history\"}\r\n        />\r\n      </Grid>\r\n      <Grid xs={3}>\r\n        <AgGrid\r\n          rowData={mortgageData}\r\n          columnDefs={mortgageColumnConfig}\r\n          id={account + \"-history\"}\r\n        />\r\n      </Grid>\r\n      <Grid xs={6}>\r\n        <div>\r\n          <Grid container spacing={2}>\r\n            <Grid xs={3}>\r\n              <AddLoan accountName={accountName} />\r\n            </Grid>\r\n            <Grid xs={3}>\r\n              <AddEntry accountName={accountName} />\r\n            </Grid>\r\n            <Grid xs={3}></Grid>\r\n            <Grid xs={3}>\r\n              <Stack spacing={2}>\r\n                <DeleteAccount accountName={accountName} />\r\n                <RenameAccount accountName={accountName} />\r\n              </Stack>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import { Box, Tab, Tabs } from \"@mui/material\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { NewAccount } from \"../new-account\";\r\nimport { AccountTab } from \"../tab-types/account/account\";\r\nimport { MortgageTab } from \"../tab-types/mortgage\";\r\n\r\nexport const AccountTabs = () => {\r\n  const accounts = useStore(store, (x) => x.wealth);\r\n  const firstAccount = Object.keys(accounts)?.[0] ?? \"\";\r\n  const [account, setAccount] = useState<string>(firstAccount);\r\n\r\n  useEffect(() => {\r\n    if (!accounts[account]) {\r\n      setAccount(Object.keys(accounts)?.[0] ?? \"\");\r\n    }\r\n  }, [account, accounts]);\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection={\"column\"} width=\"100%\" height=\"100%\">\r\n      <Box display={\"flex\"} flex={\"0 1 auto\"}>\r\n        <Tabs\r\n          value={account}\r\n          defaultValue={firstAccount}\r\n          onChange={(_, value) => {\r\n            setAccount(value as string);\r\n          }}\r\n        >\r\n          {Object.keys(accounts).map((account) => {\r\n            return <Tab key={account} value={account} label={account} />;\r\n          })}\r\n          <Tab component={NewAccount} />\r\n        </Tabs>\r\n      </Box>\r\n      <Box flex={\"1 1 auto\"}>\r\n        {accounts[account]?.type === \"account\" && (\r\n          <AccountTab accountName={account} />\r\n        )}\r\n        {accounts[account]?.type === \"mortgage\" && (\r\n          <MortgageTab accountName={account} />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import Grid from \"@mui/system/Unstable_Grid\";\r\nimport { WealthChart } from \"./components/wealth-chart\";\r\nimport { AccountTabs } from \"./components/account-tabs\";\r\n\r\nexport const NetWealth = () => {\r\n  return (\r\n    <Grid container height={\"100%\"} width=\"100%\">\r\n      <Grid xs={12} height=\"50%\">\r\n        <WealthChart />\r\n      </Grid>\r\n      <Grid xs={12} height=\"50%\">\r\n        <AccountTabs />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","export interface Outcome {\r\n  min: number;\r\n  max: number;\r\n  avg: number;\r\n  actual?: number;\r\n}\r\n\r\nexport interface BonusOutcomes {\r\n  percent: Outcome;\r\n  cash: Outcome;\r\n}\r\n\r\nexport const minMaxAvg = (values: number[]): Outcome => {\r\n  if (values.length === 0) {\r\n    return { min: 0, max: 0, avg: 0 };\r\n  }\r\n  return values.reduce(\r\n    (acc, curr, index, arr) => {\r\n      const { min, max, avg } = acc;\r\n      return {\r\n        min: Math.min(curr, min),\r\n        max: Math.max(curr, max),\r\n        avg: index === arr.length - 1 ? (avg + curr) / arr.length : avg + curr,\r\n      };\r\n    },\r\n    { min: Infinity, max: 0, avg: 0 }\r\n  );\r\n};\r\n\r\nexport const outcomeFromSingle = (value: number): Outcome => {\r\n  return { min: value, max: value, avg: value, actual: value };\r\n};\r\n\r\nexport const actualizedOutcome = (outcome: Outcome): Outcome =>\r\n  outcome.actual ? outcomeFromSingle(outcome.actual) : outcome;\r\n\r\nexport const scaleOutcome = (outcome: Outcome, value: number): Outcome => {\r\n  return {\r\n    min: outcome.min * value,\r\n    max: outcome.max * value,\r\n    avg: outcome.avg * value,\r\n    actual: outcome.actual ? outcome.actual * value : undefined,\r\n  };\r\n};\r\nexport const AddConstantOutcome = (\r\n  outcome: Outcome,\r\n  value: number\r\n): Outcome => {\r\n  return {\r\n    min: outcome.min + value,\r\n    max: outcome.max + value,\r\n    avg: outcome.avg + value,\r\n    actual: outcome.actual ? outcome.actual + value : undefined,\r\n  };\r\n};\r\n\r\nexport const MultiplyOutcome = (\r\n  outcomeA: Outcome,\r\n  outcomeB: Outcome\r\n): Outcome => {\r\n  return {\r\n    min: outcomeA.min * outcomeB.min,\r\n    max: outcomeA.max * outcomeB.max,\r\n    avg: outcomeA.avg * outcomeB.avg,\r\n    actual:\r\n      outcomeA.actual != undefined && outcomeB.actual != undefined\r\n        ? outcomeA.actual * outcomeB.avg\r\n        : undefined,\r\n  };\r\n};\r\n\r\nexport const AddOutcome = (...outcomes: Outcome[]): Outcome => {\r\n  const everyActualDefined = outcomes.every((x) => x.actual != undefined);\r\n  return outcomes.reduce(\r\n    (acc, curr) => {\r\n      return {\r\n        min: acc.min + curr.min,\r\n        avg: acc.avg + curr.avg,\r\n        max: acc.max + curr.max,\r\n        actual: everyActualDefined\r\n          ? (acc.actual ?? 0) + (curr.actual ?? 0)\r\n          : undefined,\r\n      };\r\n    },\r\n    { min: 0, max: 0, avg: 0, actual: undefined }\r\n  );\r\n};\r\n","import { Box } from \"@mui/material\";\r\nimport { ReactNode } from \"react\";\r\n\r\ninterface CellProps {\r\n  children?: ReactNode;\r\n  secondaryValue?: ReactNode;\r\n  tertiaryValue?: ReactNode;\r\n  title: string;\r\n}\r\n\r\nexport const Value = (props: CellProps) => {\r\n  const { children, secondaryValue, tertiaryValue, title } = props;\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        minWidth: 106,\r\n        height: 64,\r\n        padding: \"0px 8px\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"flex-start\",\r\n        gap: 0.5,\r\n        flexShrink: 0,\r\n      }}\r\n    >\r\n      <Box display={\"flex\"} alignItems={\"center\"} gap={0.5}>\r\n        <Box fontSize={18} fontWeight={700} lineHeight={\"20px\"}>\r\n          {children ? children : \"??\"}\r\n        </Box>\r\n        {!!(secondaryValue ?? tertiaryValue) && (\r\n          <Box\r\n            alignSelf={\"flex-end\"}\r\n            fontSize={12}\r\n            fontWeight={500}\r\n            lineHeight={\"16px\"}\r\n            textTransform={\"uppercase\"}\r\n            color={\"#888\"}\r\n          >\r\n            {secondaryValue ?? tertiaryValue}\r\n          </Box>\r\n        )}\r\n      </Box>\r\n      <Box\r\n        fontSize={12}\r\n        fontWeight={500}\r\n        lineHeight={\"16px\"}\r\n        textTransform={\"uppercase\"}\r\n      >\r\n        {title}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { formatCashShort } from \"shared/utility/format-cash\";\r\n\r\ninterface CashProps {\r\n  value?: number;\r\n  fallback?: number;\r\n}\r\nexport const Cash = ({ value, fallback }: CashProps) => {\r\n  return value ? formatCashShort(value) : fallback;\r\n};\r\n","import { Box } from \"@mui/material\";\r\nimport { DateTime } from \"luxon\";\r\nimport { ReactNode, useMemo } from \"react\";\r\n\r\ninterface DurationProps {\r\n  dateTime: DateTime;\r\n  children?: ReactNode;\r\n}\r\nexport const Duration = ({ dateTime, children }: DurationProps) => {\r\n  const countDownStr = useMemo(\r\n    () => dateTime.diffNow([\"months\", \"days\", \"hours\"]).toFormat(\"d'd'\"),\r\n    [dateTime]\r\n  );\r\n\r\n  const countDownColor = useMemo(() => {\r\n    const days = dateTime.diffNow(\"days\").days;\r\n    if (days < 30) {\r\n      return \"green\";\r\n    } else if (days < 60) {\r\n      return \"yellow\";\r\n    }\r\n    return \"red\";\r\n  }, [dateTime]);\r\n\r\n  return dateTime > DateTime.local() ? (\r\n    <Box color={countDownColor}>{countDownStr}</Box>\r\n  ) : (\r\n    children\r\n  );\r\n};\r\n","export const formatPercent = new Intl.NumberFormat(\"en-us\", {\r\n  style: \"percent\",\r\n  maximumFractionDigits: 1,\r\n}).format;\r\n","import { formatPercent } from \"shared/utility/format-percent\";\r\n\r\ninterface PercentProps {\r\n  value: number;\r\n}\r\nexport const Percent = ({ value }: PercentProps) => {\r\n  return formatPercent(value);\r\n};\r\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\r\nimport { BonusOutcomes } from \"shared/utility/min-max-avg\";\r\nimport { Value } from \"./value\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { Duration } from \"shared/components/formatters/duration\";\r\nimport { Percent } from \"shared/components/formatters/percent\";\r\n\r\nexport const BonusOutcome = (props: {\r\n  title: string;\r\n  outcome: BonusOutcomes;\r\n  payDate: DateTime;\r\n}) => {\r\n  const { outcome, title, payDate } = props;\r\n\r\n  return (\r\n    <Box sx={{ border: \"1px solid rgba(255,255,255,0.1)\", borderRadius: 2 }}>\r\n      <Typography\r\n        sx={{\r\n          paddingBottom: 1,\r\n          paddingLeft: 2,\r\n          paddingTop: 1,\r\n          paddingRight: 2,\r\n        }}\r\n        variant=\"h5\"\r\n      >\r\n        {title}\r\n      </Typography>\r\n      <Divider />\r\n      <Stack\r\n        padding={1}\r\n        direction={\"row\"}\r\n        spacing={0.5}\r\n        justifyContent={\"center\"}\r\n      >\r\n        {!outcome.cash.actual && (\r\n          <>\r\n            <Value\r\n              secondaryValue={<Percent value={outcome.percent.min} />}\r\n              title={\"min\"}\r\n            >\r\n              <Cash value={outcome.cash.min} fallback={0} />\r\n            </Value>\r\n            <Value\r\n              secondaryValue={<Percent value={outcome.percent.avg} />}\r\n              title={\"avg\"}\r\n            >\r\n              <Cash value={outcome.cash.avg} fallback={0} />\r\n            </Value>\r\n            <Value\r\n              secondaryValue={<Percent value={outcome.percent.max} />}\r\n              title={\"max\"}\r\n            >\r\n              <Cash value={outcome.cash.max} fallback={0} />\r\n            </Value>\r\n          </>\r\n        )}\r\n        <Value\r\n          title={\"Actual\"}\r\n          tertiaryValue={\r\n            outcome.percent.actual && <Percent value={outcome.percent.actual} />\r\n          }\r\n          secondaryValue={\r\n            outcome.cash.actual && <Cash value={outcome.cash.actual} />\r\n          }\r\n        >\r\n          <Duration dateTime={payDate}>\r\n            <Cash value={outcome.cash.actual} />\r\n          </Duration>\r\n        </Value>\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\nimport { Button, Tooltip } from \"@mui/material\";\r\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\r\nimport { CustomCellRendererProps } from \"ag-grid-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\nimport { TimeSeries } from \"shared/models/projected-wealth\";\r\nimport { store } from \"shared/store\";\r\nimport { formatCash } from \"shared/utility/format-cash\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport UpdateIcon from \"@mui/icons-material/Update\";\r\nimport { Stack } from \"@mui/system\";\r\n\r\nexport const createAccountColumnConfig = (\r\n  accountName: TimeSeries,\r\n  variant: \"number\" | \"cash\" | \"percent\"\r\n): ColDef<AccountData>[] => [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\r\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\r\n      return (\r\n        <Stack direction={\"row\"} alignItems={\"center\"}>\r\n          {x.valueFormatted}&nbsp;\r\n          {x.value && x.value > DateTime.local() && (\r\n            <Tooltip title=\"Future Event\">\r\n              <UpdateIcon htmlColor=\"yellow\" />\r\n            </Tooltip>\r\n          )}\r\n        </Stack>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    headerName: \"Value\",\r\n    valueGetter: (x) => x.data?.value,\r\n    valueFormatter: (x) =>\r\n      variant === \"number\"\r\n        ? x.value\r\n        : variant === \"cash\"\r\n        ? formatCash(x.value)\r\n        : (x.value * 100).toFixed(2) + \"%\",\r\n    type: \"numericColumn\",\r\n    editable: true,\r\n    cellEditor: \"agNumberCellEditor\",\r\n    valueSetter: (x) => {\r\n      store.setState((prev) => {\r\n        const next = create(prev, (next) => {\r\n          const account = next.projectedIncome.timeSeries[accountName];\r\n          const idx = account.findIndex(({ id }) => id === x.data.id);\r\n          account[idx].value = +x.newValue;\r\n        });\r\n        return next;\r\n      });\r\n      return true;\r\n    },\r\n  },\r\n  {\r\n    headerName: \"Actions\",\r\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\r\n      return (\r\n        <Button\r\n          onClick={() => {\r\n            store.setState((prev) => {\r\n              return create(prev, (next) => {\r\n                const idxToRemove = next.projectedIncome.timeSeries[\r\n                  accountName\r\n                ].findIndex((x) => x.id === props.data?.id);\r\n                next.projectedIncome.timeSeries[accountName].splice(\r\n                  idxToRemove,\r\n                  1\r\n                );\r\n              });\r\n            });\r\n          }}\r\n          color=\"error\"\r\n        >\r\n          <DeleteForeverIcon />\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n];\r\n","import {\r\n  Box,\r\n  Button,\r\n  InputAdornment,\r\n  Paper,\r\n  Stack,\r\n  TextField,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { useMemo, useState } from \"react\";\r\nimport { AgGrid } from \"shared/components/ag-grid\";\r\nimport { TimeSeries } from \"shared/models/projected-wealth\";\r\nimport { store } from \"shared/store\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport { sortByDate } from \"shared/utility/sort-by-date\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { createAccountColumnConfig } from \"./column-config\";\r\n\r\nexport const DataEntry = (props: {\r\n  accountName: TimeSeries;\r\n  defaultDate: DateTime;\r\n  variant?: \"number\" | \"cash\" | \"percent\";\r\n}) => {\r\n  const { accountName, defaultDate, variant = \"number\" } = props;\r\n  const account = useStore(\r\n    store,\r\n    (state) => state.projectedIncome.timeSeries[accountName]\r\n  );\r\n\r\n  const [date, setDate] = useState(defaultDate);\r\n  const [amount, setAmount] = useState<number | null>(null);\r\n\r\n  const hasSameDate = useMemo(() => {\r\n    return !!account?.find((x) =>\r\n      date.hasSame(DateTime.fromISO(x.date), \"day\")\r\n    );\r\n  }, [account, date]);\r\n\r\n  const onAddEntry = () => {\r\n    amount != null &&\r\n      store.setState((prev) => {\r\n        return create(prev, (next) => {\r\n          next.projectedIncome.timeSeries[accountName] =\r\n            next.projectedIncome.timeSeries[accountName]\r\n              .concat({\r\n                date: date.toString(),\r\n                value: variant === \"percent\" ? amount / 100 : amount,\r\n                id: uuid(),\r\n              })\r\n              .sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\r\n        });\r\n      });\r\n  };\r\n\r\n  const accountColumnConfig = useMemo(() => {\r\n    return createAccountColumnConfig(accountName, variant);\r\n  }, [accountName, variant]);\r\n\r\n  return (\r\n    <Box display={\"flex\"} flexDirection={\"column\"} height=\"100%\">\r\n      <Stack spacing={2} flex=\"0 1 auto\">\r\n        <DatePicker\r\n          format={shortDate}\r\n          sx={{ color: \"white\" }}\r\n          label=\"Date\"\r\n          value={date}\r\n          onChange={(value) => {\r\n            console.log(value);\r\n            value && setDate(value);\r\n          }}\r\n        />\r\n        <TextField\r\n          label=\"amount\"\r\n          value={amount ?? \"\"}\r\n          type=\"number\"\r\n          onChange={(event) =>\r\n            event.target.value === \"\"\r\n              ? setAmount(null)\r\n              : setAmount(+event.target.value)\r\n          }\r\n          InputProps={{\r\n            startAdornment: variant !== \"number\" && (\r\n              <InputAdornment position=\"start\">\r\n                {variant === \"cash\" ? \"$\" : \"%\"}\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n        <Button\r\n          disabled={amount === null || !date || hasSameDate}\r\n          onClick={onAddEntry}\r\n        >\r\n          Add Entry\r\n        </Button>\r\n      </Stack>\r\n      <Box sx={{ paddingTop: 2, flex: \"1 1 auto\" }}>\r\n        <AgGrid\r\n          reactiveCustomComponents\r\n          rowData={account ?? []}\r\n          columnDefs={accountColumnConfig}\r\n          id={account + \"-history\"}\r\n          autoSizeStrategy={{\r\n            type: \"fitGridWidth\",\r\n          }}\r\n          stopEditingWhenCellsLoseFocus\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport interface LayoutProps {\r\n  title: string;\r\n  accountName: TimeSeries;\r\n  defaultDate: DateTime;\r\n  variant: \"percent\" | \"number\" | \"cash\";\r\n}\r\n\r\nexport const Layout = (props: LayoutProps) => {\r\n  const { title, accountName, defaultDate, variant } = props;\r\n  return (\r\n    <Paper sx={{ padding: 2, height: \"100%\", width: 450, flexShrink: 0 }}>\r\n      <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\r\n        <Box flex=\"0 1 auto\" marginBottom={2}>\r\n          <Typography sx={{ marginBottom: 2 }} variant=\"h5\">\r\n            {title}{\" \"}\r\n            {variant === \"cash\" && (\r\n              <Tooltip\r\n                title={\r\n                  <>\r\n                    <span>Cash values are used in lieu of Percent values.</span>\r\n                    <br />\r\n                    <span>\r\n                      Cash values are considered actual payment values.\r\n                    </span>\r\n                  </>\r\n                }\r\n              >\r\n                <span>($)</span>\r\n              </Tooltip>\r\n            )}\r\n            {variant === \"percent\" && (\r\n              <Tooltip title=\"Percentage values are used for predictions.\">\r\n                <span>(%)</span>\r\n              </Tooltip>\r\n            )}\r\n          </Typography>\r\n        </Box>\r\n        <Box flex=\"1 1 auto\">\r\n          <DataEntry\r\n            variant={variant}\r\n            accountName={accountName}\r\n            defaultDate={defaultDate}\r\n          />\r\n        </Box>\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { ReactNode } from \"react\";\r\n\r\ninterface UntilProps {\r\n  dateTime: DateTime;\r\n  children: ReactNode;\r\n}\r\n\r\nexport const Until = (props: UntilProps) => {\r\n  const { dateTime, children } = props;\r\n  return DateTime.local() < dateTime && children;\r\n};\r\n","import { useMemo } from \"react\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\n\r\nexport const useMostFrequentValue = (data: AccountData[]) => {\r\n  return useMemo(() => {\r\n    return Object.entries(\r\n      Object.groupBy(\r\n        data.map((x) => x.value),\r\n        (x) => x\r\n      )\r\n    )\r\n      .map(([key, values]) => [+key, values?.length ?? 0])\r\n      .sort(([, a], [, b]) => {\r\n        return b - a;\r\n      })[0][0];\r\n  }, [data]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\nimport { store } from \"shared/store\";\r\nimport { findSameYear } from \"shared/utility/graph-helpers\";\r\nimport { sortByDate } from \"shared/utility/sort-by-date\";\r\nimport { useMostFrequentValue } from \"./use-most-frequent-value\";\r\n\r\nconst valueByDateRange = (account: AccountData[]) => {\r\n  return account\r\n    .toSorted(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"))\r\n    .map((x, index, array) => {\r\n      const next = array[index + 1];\r\n      return [\r\n        DateTime.fromISO(x.date),\r\n        (next?.date\r\n          ? DateTime.fromISO(next?.date).startOf(\"day\")\r\n          : DateTime.fromISO(x.date).startOf(\"day\").plus({ years: 1 })\r\n        ).minus({ days: 1 }),\r\n        x.value,\r\n      ] as const;\r\n    });\r\n};\r\n\r\nexport const useProjectedPay = () => {\r\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\r\n  const baseIncome = timeSeries.paycheck;\r\n\r\n  const lastMerit = useMostFrequentValue(timeSeries.meritIncreasePct);\r\n\r\n  return useMemo(() => {\r\n    const payPerPeriod = valueByDateRange(baseIncome);\r\n    const mostRecentPay =\r\n      payPerPeriod.length > 0\r\n        ? payPerPeriod[payPerPeriod.length - 1]\r\n        : ([DateTime.local(), DateTime.local().plus({ years: 1 }), 1] as const);\r\n\r\n    const projectedPayPerPeriod: [DateTime, DateTime, number][] =\r\n      Array(11).fill(mostRecentPay);\r\n    for (let i = 0; i < projectedPayPerPeriod.length; i++) {\r\n      const [start, end] = projectedPayPerPeriod[i];\r\n      const [, , value] = projectedPayPerPeriod[i - 1] ?? mostRecentPay;\r\n      const startDate = start.plus({ years: i + 1 });\r\n      const multiplier =\r\n        1 +\r\n        lastMerit +\r\n        (findSameYear(startDate, timeSeries.equityPct)?.value ?? 0);\r\n\r\n      projectedPayPerPeriod[i] = [\r\n        startDate,\r\n        end.plus({ years: i + 1 }),\r\n        value * multiplier,\r\n      ] as const;\r\n    }\r\n\r\n    return [...payPerPeriod, ...projectedPayPerPeriod];\r\n  }, [baseIncome, lastMerit, timeSeries.equityPct]);\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { useProjectedPay } from \"./use-projected-pay\";\r\n\r\nexport const useBaseIncome = (startDate: DateTime, endDate: DateTime) => {\r\n  const pay = useProjectedPay();\r\n\r\n  return useMemo(() => {\r\n    const combinedPayPerPeriod = pay.filter(([start, end]) => {\r\n      const rangeOutside = startDate <= start && endDate >= end;\r\n      const rangeInside = startDate >= start && end >= endDate;\r\n      const overlapEnd = startDate <= start && endDate < end && endDate > start;\r\n      const overlapStart =\r\n        startDate <= end && startDate >= start && endDate > end;\r\n      return rangeInside || rangeOutside || overlapEnd || overlapStart;\r\n    });\r\n\r\n    const x = combinedPayPerPeriod.map(([start, end, value]) => {\r\n      return [\r\n        DateTime.max(start, startDate),\r\n        DateTime.min(end, endDate),\r\n        value,\r\n      ] as const;\r\n    });\r\n\r\n    const incomePerPeriod = x.map(([start, end, value]) => {\r\n      const weeks = end.diff(start, \"weeks\").weeks / 2;\r\n      return [start, end, weeks * value, value, weeks] as const;\r\n    });\r\n\r\n    const totalIncome = Math.round(\r\n      incomePerPeriod.reduce((acc, [, , curr]) => acc + curr, 0)\r\n    );\r\n\r\n    return { totalIncome, incomePerPeriod };\r\n  }, [pay, startDate, endDate]);\r\n};\r\n","import {\r\n  Box,\r\n  Divider,\r\n  Stack,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableRow,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { Duration } from \"shared/components/formatters/duration\";\r\nimport { Percent } from \"shared/components/formatters/percent\";\r\nimport { Until } from \"shared/components/formatters/until\";\r\nimport { store } from \"shared/store\";\r\nimport { findSameYear } from \"shared/utility/graph-helpers\";\r\nimport { Value } from \"./value\";\r\nimport { useMostFrequentValue } from \"../hooks/use-most-frequent-value\";\r\nimport { useProjectedPay } from \"../hooks/use-projected-pay\";\r\nimport { useMemo } from \"react\";\r\nimport { useBaseIncome } from \"../hooks/use-base-income\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\r\n\r\nexport const MeritOutcome = (props: { title: string; payDate: DateTime }) => {\r\n  const { title, payDate } = props;\r\n\r\n  const income = useBaseIncome(\r\n    DateTime.fromObject({ day: 1, month: 1, year: payDate.year }),\r\n    DateTime.fromObject({ day: 1, month: 1, year: payDate.year + 1 })\r\n  );\r\n\r\n  const meritIncreases = useStore(\r\n    store,\r\n    (x) => x.projectedIncome.timeSeries.meritIncreasePct\r\n  );\r\n  const commonMerit = useMostFrequentValue(meritIncreases);\r\n  const meritPct = useStore(\r\n    store,\r\n    (x) =>\r\n      findSameYear(payDate, x.projectedIncome.timeSeries.meritIncreasePct)\r\n        ?.value ?? commonMerit\r\n  );\r\n  const payChecks = useProjectedPay();\r\n  const hasActualPaycheck = useStore(\r\n    store,\r\n    (x) => !!findSameYear(payDate, x.projectedIncome.timeSeries.paycheck)\r\n  );\r\n\r\n  const payCheck = useMemo(() => {\r\n    return payChecks.find(([start]) => start.year === payDate.year)?.[2] ?? 0;\r\n  }, [payChecks, payDate.year]);\r\n\r\n  const equityPct = useStore(\r\n    store,\r\n    (x) =>\r\n      payDate && findSameYear(payDate, x.projectedIncome.timeSeries.equityPct)\r\n  );\r\n\r\n  const totalAdjust = meritPct + (equityPct?.value ?? 0);\r\n  //const multiplier = 1 + (DateTime.local() > payDate ? 0 : totalAdjust);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        border: \"1px solid rgba(255,255,255,0.1)\",\r\n        borderRadius: 2,\r\n      }}\r\n    >\r\n      <Typography\r\n        sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1 }}\r\n        variant=\"h5\"\r\n      >\r\n        {title}\r\n      </Typography>\r\n      <Divider />\r\n\r\n      <Stack padding={1} direction={\"row\"} spacing={0.5}>\r\n        {!hasActualPaycheck && (\r\n          <Value title={\"Paycheck\"}>\r\n            <Cash value={payCheck * 1 + (equityPct?.value ?? 0)} />\r\n          </Value>\r\n        )}\r\n        <Tooltip\r\n          componentsProps={{\r\n            tooltip: {\r\n              sx: {\r\n                maxWidth: \"none\",\r\n              },\r\n            },\r\n          }}\r\n          title={\r\n            <Table sx={{ width: \"max-content\" }}>\r\n              <TableBody>\r\n                {income.incomePerPeriod.map(\r\n                  ([start, end, value, _paycheck, weeks], index) => {\r\n                    return (\r\n                      <TableRow key={index}>\r\n                        <TableCell>\r\n                          <Cash value={value} />\r\n                        </TableCell>\r\n                        <TableCell>{start.toFormat(shortDate)}</TableCell>\r\n                        <TableCell>\r\n                          <ArrowForwardIcon />\r\n                        </TableCell>\r\n                        <TableCell>{end.toFormat(shortDate)}</TableCell>\r\n                        <TableCell>\r\n                          <Cash value={_paycheck} /> x {weeks.toFixed(1)}\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  }\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          }\r\n        >\r\n          <div>\r\n            <Value title={\"Base Pay\"}>\r\n              <Cash value={income.totalIncome ?? 0} />\r\n            </Value>\r\n          </div>\r\n        </Tooltip>\r\n        <Value\r\n          title={\"Actual\"}\r\n          secondaryValue={\r\n            <Until dateTime={payDate}>\r\n              <Percent value={totalAdjust} />\r\n            </Until>\r\n          }\r\n        >\r\n          <Duration dateTime={payDate}>\r\n            <Percent value={totalAdjust} />\r\n          </Duration>\r\n        </Value>\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\r\nimport { Outcome as TOutcome } from \"shared/utility/min-max-avg\";\r\nimport { Value } from \"./value\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { Duration } from \"shared/components/formatters/duration\";\r\nimport { Until } from \"shared/components/formatters/until\";\r\nimport { ReactNode } from \"react\";\r\n\r\nexport const Outcome = (props: {\r\n  title: ReactNode;\r\n  outcome: TOutcome;\r\n  payDate?: DateTime;\r\n}) => {\r\n  const { outcome, title, payDate } = props;\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        border: \"1px solid rgba(255,255,255,0.1)\",\r\n        borderRadius: 2,\r\n      }}\r\n    >\r\n      <Typography\r\n        sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1 }}\r\n        variant=\"h5\"\r\n      >\r\n        {title}\r\n      </Typography>\r\n      <Divider />\r\n\r\n      <Stack padding={1} direction={\"row\"} spacing={0.5}>\r\n        {!outcome.actual && (\r\n          <>\r\n            <Value title={\"min\"}>\r\n              <Cash value={outcome.min} fallback={0} />\r\n            </Value>\r\n            <Value title={\"avg\"}>\r\n              <Cash value={outcome.avg} fallback={0} />\r\n            </Value>\r\n            <Value title={\"max\"}>\r\n              <Cash value={outcome.max} fallback={0} />\r\n            </Value>\r\n          </>\r\n        )}\r\n        {payDate && (\r\n          <Value\r\n            title={\"Actual\"}\r\n            secondaryValue={\r\n              <Until dateTime={payDate}>\r\n                <Cash value={outcome.actual} />\r\n              </Until>\r\n            }\r\n          >\r\n            <Duration dateTime={payDate}>\r\n              <Cash value={outcome.actual} />\r\n            </Duration>\r\n          </Value>\r\n        )}\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { useBaseIncome } from \"./use-base-income\";\r\nimport { store } from \"shared/store\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport {\r\n  BonusOutcomes,\r\n  scaleOutcome,\r\n  minMaxAvg,\r\n  actualizedOutcome,\r\n} from \"shared/utility/min-max-avg\";\r\nimport { findSameYear } from \"shared/utility/graph-helpers\";\r\nimport { useMostFrequentValue } from \"./use-most-frequent-value\";\r\n\r\nexport const useAprilBonus = (year: number): BonusOutcomes => {\r\n  const payedOn = useMemo(\r\n    () => DateTime.fromObject({ day: 15, month: 4, year }),\r\n    [year]\r\n  );\r\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\r\n  const { totalIncome } = useBaseIncome(\r\n    DateTime.fromObject({ day: 1, month: 1, year: year - 1 }),\r\n    DateTime.fromObject({ day: 1, month: 1, year })\r\n  );\r\n\r\n  const bonusAmmount = useMemo(() => {\r\n    return findSameYear(payedOn, timeSeries.meritBonus)?.value;\r\n  }, [payedOn, timeSeries.meritBonus]);\r\n\r\n  const bonusPercent = useMemo(() => {\r\n    return findSameYear(payedOn, timeSeries.meritBonusPct)?.value;\r\n  }, [payedOn, timeSeries.meritBonusPct]);\r\n\r\n  const frequentMeritBonusPercent = useMostFrequentValue(\r\n    timeSeries.meritBonusPct\r\n  );\r\n\r\n  return useMemo(() => {\r\n    const meritOutcome = minMaxAvg(\r\n      timeSeries.meritBonusPct\r\n        .filter((x) => DateTime.fromISO(x.date).year <= year)\r\n        .map((x) => x.value)\r\n    );\r\n    meritOutcome.avg = frequentMeritBonusPercent;\r\n\r\n    return {\r\n      percent: actualizedOutcome({ ...meritOutcome, actual: bonusPercent }),\r\n      cash: actualizedOutcome({\r\n        ...scaleOutcome(meritOutcome, totalIncome),\r\n        actual: bonusAmmount,\r\n      }),\r\n    };\r\n  }, [\r\n    bonusAmmount,\r\n    bonusPercent,\r\n    frequentMeritBonusPercent,\r\n    timeSeries.meritBonusPct,\r\n    totalIncome,\r\n    year,\r\n  ]);\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { useBaseIncome } from \"./use-base-income\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { store } from \"shared/store\";\r\nimport { findSameYear } from \"shared/utility/graph-helpers\";\r\nimport {\r\n  BonusOutcomes,\r\n  scaleOutcome,\r\n  minMaxAvg,\r\n  actualizedOutcome,\r\n} from \"shared/utility/min-max-avg\";\r\n\r\nexport const useJuneBonus = (year: number): BonusOutcomes => {\r\n  const payedOn = useMemo(\r\n    () => DateTime.fromObject({ day: 15, month: 6, year }),\r\n    [year]\r\n  );\r\n  const timeseries = useStore(store, (x) => x.projectedIncome.timeSeries);\r\n  const { totalIncome } = useBaseIncome(\r\n    DateTime.fromObject({ day: 1, month: 4, year: year - 1 }),\r\n    DateTime.fromObject({ day: 31, month: 3, year })\r\n  );\r\n\r\n  return useMemo(() => {\r\n    const mostRecentBonus = findSameYear(payedOn, timeseries.companyBonus);\r\n    const mostRecentPercent = findSameYear(payedOn, timeseries.companyBonusPct);\r\n\r\n    const meritFactor = timeseries.meritBonusPct\r\n      .filter((x) => DateTime.fromISO(x.date).year <= year)\r\n      .slice(-3)\r\n      .reduce((acc, curr) => acc + curr.value, 0);\r\n\r\n    const outcomes = minMaxAvg(timeseries.companyBonusPct.map((x) => x.value));\r\n    const cash = scaleOutcome(outcomes, meritFactor * totalIncome);\r\n    const projectedActual = mostRecentPercent?.value\r\n      ? mostRecentPercent?.value * meritFactor * totalIncome\r\n      : undefined;\r\n\r\n    return {\r\n      percent: actualizedOutcome({\r\n        ...outcomes,\r\n        actual: mostRecentPercent?.value,\r\n      }),\r\n      cash: actualizedOutcome({\r\n        ...cash,\r\n        actual: mostRecentBonus?.value ?? projectedActual,\r\n      }),\r\n    };\r\n  }, [\r\n    totalIncome,\r\n    payedOn,\r\n    timeseries.companyBonus,\r\n    timeseries.companyBonusPct,\r\n    timeseries.meritBonusPct,\r\n    year,\r\n  ]);\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { useBaseIncome } from \"./use-base-income\";\r\nimport { useAprilBonus } from \"./use-april-bonus\";\r\nimport { useJuneBonus } from \"./use-june-bonus\";\r\nimport {\r\n  AddOutcome,\r\n  BonusOutcomes,\r\n  actualizedOutcome,\r\n  outcomeFromSingle,\r\n  scaleOutcome,\r\n} from \"shared/utility/min-max-avg\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { store } from \"shared/store\";\r\nimport { findSameYear } from \"shared/utility/graph-helpers\";\r\n\r\nconst bonusPercent = 0.15;\r\nexport const useJulyBonus = (year: number): BonusOutcomes => {\r\n  const payDay = useMemo(\r\n    () => DateTime.fromObject({ day: 15, month: 7, year }),\r\n    [year]\r\n  );\r\n\r\n  const actual = useStore(\r\n    store,\r\n    (x) =>\r\n      findSameYear(payDay, x.projectedIncome.timeSeries.retirementBonus)?.value\r\n  );\r\n\r\n  const { totalIncome } = useBaseIncome(\r\n    DateTime.fromObject({ day: 1, month: 7, year: year - 1 }),\r\n    DateTime.fromObject({ day: 1, month: 7, year })\r\n  );\r\n\r\n  const meritBonus = useAprilBonus(year);\r\n  const juneBonus = useJuneBonus(year);\r\n\r\n  return useMemo(() => {\r\n    const eligbleIncome = outcomeFromSingle(totalIncome);\r\n    const outcome = scaleOutcome(\r\n      AddOutcome(\r\n        eligbleIncome,\r\n        actualizedOutcome(meritBonus.cash),\r\n        actualizedOutcome(juneBonus.cash)\r\n      ),\r\n      bonusPercent\r\n    );\r\n    return {\r\n      cash: actualizedOutcome({ ...outcome, actual: actual ?? outcome.actual }),\r\n      percent: {\r\n        min: 0.15,\r\n        max: 0.15,\r\n        avg: 0.15,\r\n        actual: 0.15,\r\n      },\r\n    };\r\n  }, [actual, juneBonus.cash, meritBonus.cash, totalIncome]);\r\n};\r\n","import { Box, Stack } from \"@mui/system\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo, useState } from \"react\";\r\nimport {\r\n  AddOutcome,\r\n  actualizedOutcome,\r\n  outcomeFromSingle,\r\n} from \"shared/utility/min-max-avg\";\r\nimport { BonusOutcome } from \"./components/bonus-outcome\";\r\nimport { Layout } from \"./components/data-entry/data-entry\";\r\nimport { MeritOutcome } from \"./components/merit-increase\";\r\nimport { Outcome } from \"./components/outcome\";\r\nimport { useAprilBonus } from \"./hooks/use-april-bonus\";\r\nimport { useBaseIncome } from \"./hooks/use-base-income\";\r\nimport { useJulyBonus } from \"./hooks/use-july-bonus\";\r\nimport { useJuneBonus } from \"./hooks/use-june-bonus\";\r\nimport { store } from \"shared/store\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\n\r\nexport const ProjectedIncome = () => {\r\n  const [year, setYear] = useState(DateTime.local().year);\r\n\r\n  const oldestYear = useStore(store, (x) => {\r\n    const first = x.projectedIncome.timeSeries.paycheck[1]?.date;\r\n    const date = first ? DateTime.fromISO(first) : DateTime.local();\r\n    return date.year;\r\n  });\r\n\r\n  const dates = useMemo(() => {\r\n    return {\r\n      janFirst: DateTime.fromObject({ day: 1, month: 1, year: year }),\r\n      nextJanFirst: DateTime.fromObject({\r\n        day: 1,\r\n        month: 1,\r\n        year: year + 1,\r\n      }),\r\n      junePayDay: DateTime.fromObject({ day: 15, month: 6, year: year }),\r\n      meritPayDay: DateTime.fromObject({ day: 15, month: 4, year: year }),\r\n      meritIncreaseDay: DateTime.fromObject({ day: 1, month: 4, year: year }),\r\n      julyPayDay: DateTime.fromObject({ day: 15, month: 7, year: year }),\r\n    };\r\n  }, [year]);\r\n\r\n  const income = useBaseIncome(dates.janFirst, dates.nextJanFirst);\r\n\r\n  const meritBonus = useAprilBonus(year);\r\n  const juneBonus = useJuneBonus(year);\r\n  const julyBonus = useJulyBonus(year);\r\n\r\n  const incomeOutcome = useMemo(() => {\r\n    return AddOutcome(\r\n      outcomeFromSingle(income.totalIncome),\r\n      actualizedOutcome(meritBonus.cash),\r\n      actualizedOutcome(juneBonus.cash),\r\n      actualizedOutcome(julyBonus.cash)\r\n    );\r\n  }, [income, julyBonus, juneBonus, meritBonus]);\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection=\"column\" height=\"100%\" gap={2}>\r\n      <Box flex=\"0 1 auto\">\r\n        <Stack gap={2} direction={\"row\"} overflow={\"auto\"}>\r\n          <Outcome\r\n            title={\r\n              <Box display=\"flex\" alignItems={\"center\"} gap={2} width={\"100%\"}>\r\n                <span>Income</span>\r\n                <DatePicker\r\n                  sx={{ width: 90, marginLeft: \"auto\", marginRight: 2 }}\r\n                  label={\"year\"}\r\n                  views={[\"year\"]}\r\n                  minDate={DateTime.local().set({ year: oldestYear })}\r\n                  maxDate={DateTime.local().plus({ years: 10 })}\r\n                  defaultValue={DateTime.local()}\r\n                  slotProps={{\r\n                    textField: {\r\n                      variant: \"standard\",\r\n                      label: \"\",\r\n                    },\r\n                  }}\r\n                  onYearChange={(year) => {\r\n                    setYear(year.year);\r\n                  }}\r\n                />\r\n              </Box>\r\n            }\r\n            outcome={incomeOutcome}\r\n            payDate={dates.junePayDay}\r\n          />\r\n          <MeritOutcome\r\n            title=\"Merit Increase\"\r\n            payDate={dates.meritIncreaseDay}\r\n          />\r\n          <BonusOutcome\r\n            title=\"Merit Bonus\"\r\n            outcome={meritBonus}\r\n            payDate={dates.meritPayDay}\r\n          />\r\n          <BonusOutcome\r\n            title=\"Company Bonus\"\r\n            outcome={juneBonus}\r\n            payDate={dates.junePayDay}\r\n          />\r\n          <BonusOutcome\r\n            title=\"Retirement Bonus\"\r\n            outcome={julyBonus}\r\n            payDate={dates.julyPayDay}\r\n          />\r\n        </Stack>\r\n      </Box>\r\n      <Box flex=\"1 1 auto\">\r\n        <Box overflow={\"auto\"} width={\"100%\"} height={\"100%\"}>\r\n          <Box\r\n            height={\"100%\"}\r\n            display={\"flex\"}\r\n            gap={2}\r\n            flexWrap={\"nowrap\"}\r\n            flexShrink={0}\r\n          >\r\n            <Layout\r\n              accountName=\"paycheck\"\r\n              variant=\"cash\"\r\n              defaultDate={DateTime.fromObject({ day: 1, month: 4 })}\r\n              title=\"Income Per Check\"\r\n            />\r\n            <Layout\r\n              title=\"Merit Increase\"\r\n              accountName=\"meritIncreasePct\"\r\n              variant=\"percent\"\r\n              defaultDate={dates.meritIncreaseDay}\r\n            />\r\n            <Layout\r\n              title=\"Equity Increase\"\r\n              accountName=\"equityPct\"\r\n              variant=\"percent\"\r\n              defaultDate={dates.meritIncreaseDay}\r\n            />\r\n            <Layout\r\n              title=\"Merit Bonus\"\r\n              accountName=\"meritBonusPct\"\r\n              variant=\"percent\"\r\n              defaultDate={dates.meritPayDay}\r\n            />\r\n            <Layout\r\n              title=\"Merit Bonus\"\r\n              accountName=\"meritBonus\"\r\n              variant=\"cash\"\r\n              defaultDate={dates.meritPayDay}\r\n            />\r\n            <Layout\r\n              title=\"Company Bonus Factor\"\r\n              accountName=\"companyBonusPct\"\r\n              defaultDate={dates.junePayDay}\r\n              variant=\"percent\"\r\n            />\r\n            <Layout\r\n              title=\"Company Bonus\"\r\n              accountName=\"companyBonus\"\r\n              defaultDate={dates.junePayDay}\r\n              variant=\"cash\"\r\n            />\r\n            <Layout\r\n              title=\"Retirement Bonus\"\r\n              accountName=\"retirementBonus\"\r\n              defaultDate={dates.julyPayDay}\r\n              variant=\"cash\"\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { Account } from \"shared/models/account\";\r\nimport { Mortgage } from \"shared/models/mortgage\";\r\nimport { store } from \"shared/store\";\r\nimport { findNearstOnOrBefore } from \"shared/utility/graph-helpers\";\r\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\r\n\r\nexport const getWealth = (date: DateTime, accounts: (Account | Mortgage)[]) => {\r\n  return Math.max(\r\n    1,\r\n    accounts\r\n      .map((x) => {\r\n        if (x.type === \"account\") {\r\n          const entry = findNearstOnOrBefore(date, x.data);\r\n          return entry?.value ?? 0;\r\n        } else if (x.type === \"mortgage\" && x.loan) {\r\n          const houseValue = findNearstOnOrBefore(date, x.data);\r\n          const balance = calcLoanBalance(date, x.loan);\r\n          return calcEquity(\r\n            x.loan.ownershipPct,\r\n            houseValue?.value,\r\n            balance,\r\n            x.loan.principal\r\n          );\r\n        }\r\n      })\r\n      .reduce((acc, curr) => acc! + (curr ?? 0), 0)!\r\n  );\r\n};\r\n\r\nexport const getEarliestEntry = (accounts: (Account | Mortgage)[]) => {\r\n  return DateTime.fromMillis(\r\n    accounts\r\n      .map((x) => {\r\n        if (x.type === \"account\") {\r\n          return DateTime.fromISO(x.data[0].date);\r\n        }\r\n        return DateTime.local();\r\n      })\r\n      .reduce(\r\n        (acc, curr) => Math.min(acc, curr?.toMillis() ?? Infinity),\r\n        DateTime.local().toMillis()\r\n      )\r\n  );\r\n};\r\n\r\nexport const useYearlyWealth = (date: DateTime, benchmarkDate: DateTime) => {\r\n  const accounts = useStore(store, (x) => Object.values(x.wealth));\r\n  return useMemo(() => {\r\n    const earliest = getEarliestEntry(accounts);\r\n    if (earliest.year >= date.year) {\r\n      return { date, benchmarkDate, wealth: 0, yoyCash: 0, yoyPercent: 1 };\r\n    }\r\n\r\n    const currentDate = getWealth(date, accounts);\r\n    const benchmark = getWealth(benchmarkDate, accounts);\r\n\r\n    return {\r\n      date,\r\n      benchmarkDate,\r\n      wealth: currentDate,\r\n      benchmarkWealth: benchmark,\r\n      yoyCash: currentDate - benchmark,\r\n      yoyPercent: currentDate / benchmark,\r\n    };\r\n  }, [accounts, benchmarkDate, date]);\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { useYearlyWealth } from \"./hooks/use-yearly-wealth\";\r\n\r\nexport const ProjectedWealth = () => {\r\n  return (\r\n    <>\r\n      {JSON.stringify(\r\n        useYearlyWealth(DateTime.local(), DateTime.fromObject({ year: 2024 })),\r\n        null,\r\n        2\r\n      )}\r\n      <br />\r\n      {JSON.stringify(\r\n        useYearlyWealth(\r\n          DateTime.fromObject({ year: 2024 }),\r\n          DateTime.fromObject({ year: 2022 })\r\n        ),\r\n        null,\r\n        2\r\n      )}\r\n      <br />\r\n      {JSON.stringify(\r\n        useYearlyWealth(\r\n          DateTime.fromObject({ year: 2023 }),\r\n          DateTime.fromObject({ year: 2022 })\r\n        ),\r\n        null,\r\n        2\r\n      )}\r\n      <br />\r\n      {JSON.stringify(\r\n        useYearlyWealth(\r\n          DateTime.fromObject({ year: 2022 }),\r\n          DateTime.fromObject({ year: 2021 })\r\n        ),\r\n        null,\r\n        2\r\n      )}\r\n      <br />\r\n      {JSON.stringify(\r\n        useYearlyWealth(\r\n          DateTime.fromObject({ year: 2021 }),\r\n          DateTime.fromObject({ year: 2020 })\r\n        ),\r\n        null,\r\n        2\r\n      )}\r\n      <br />\r\n      {JSON.stringify(\r\n        useYearlyWealth(\r\n          DateTime.fromObject({ year: 2020 }),\r\n          DateTime.fromObject({ year: 2019 })\r\n        ),\r\n        null,\r\n        2\r\n      )}\r\n      <br />\r\n    </>\r\n  );\r\n};\r\n\r\n/*\r\nShow Year+1 \r\n\r\nfuture savings:\r\n  +SSN \r\n  -Medicare surplus\r\n  +SDI limit\r\n  +Monthly Saving rate target\r\n  +Bonuses remaining\r\n    - April, June, July\r\n  +EOY home equity\r\n\r\n\r\nWhen do we hit SSN limit, 168600 2024\r\nwhen do we hit mediare surplus (.009 on all wages over 200k )\r\nwhen do we hit SDI limit\r\n\r\n\r\nShow all prior years on jan 1 20xx for which we have data\r\nYoY Growth in %\r\nYoY growth in $\r\n\r\n\r\n*/\r\n","import { Box, Button, ButtonProps } from \"@mui/material\";\r\nimport { ReactNode, useEffect, useState } from \"react\";\r\n\r\ntype SafetyState = \"inactive\" | \"activating\" | \"active\";\r\n\r\ninterface SafetyButtonProps {\r\n  inactiveLabel: string;\r\n  activatingLabel: string;\r\n  activeLabel: string;\r\n  icon?: ReactNode;\r\n  onConfirm: () => void;\r\n}\r\n\r\nexport const SafetyButton = (\r\n  props: Omit<ButtonProps, \"children\"> & SafetyButtonProps\r\n) => {\r\n  const {\r\n    inactiveLabel,\r\n    activatingLabel,\r\n    activeLabel,\r\n    onConfirm,\r\n    icon,\r\n    variant,\r\n    disabled,\r\n    ...rest\r\n  } = props;\r\n  const [safetyState, setSafetyState] = useState<SafetyState>(\"inactive\");\r\n\r\n  useEffect(() => {\r\n    if (safetyState === \"active\") {\r\n      setTimeout(() => {\r\n        setSafetyState((prev) => {\r\n          return prev === \"active\" ? \"inactive\" : prev;\r\n        });\r\n      }, 2000);\r\n    } else if (safetyState === \"activating\") {\r\n      setTimeout(() => {\r\n        setSafetyState(\"active\");\r\n      }, 2000);\r\n    }\r\n  }, [safetyState]);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        minWidth: 130,\r\n        padding: safetyState === \"active\" ? \"8px\" : \"unset\",\r\n      }}\r\n    >\r\n      <Button\r\n        {...rest}\r\n        sx={{ height: \"100%\", width: \"100%\" }}\r\n        disabled={disabled || safetyState === \"activating\"}\r\n        variant={safetyState === \"active\" ? \"contained\" : variant}\r\n        size=\"small\"\r\n        onClick={() => {\r\n          safetyState === \"inactive\" && setSafetyState(\"activating\");\r\n          safetyState === \"active\" && onConfirm?.();\r\n        }}\r\n      >\r\n        {icon}\r\n        {safetyState === \"inactive\" && inactiveLabel}\r\n        {safetyState === \"activating\" && activatingLabel}\r\n        {safetyState === \"active\" && activeLabel}\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useCallback } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\nexport const useExport = () => {\r\n  const storeData = useStore(store);\r\n  const onExport = useCallback(() => {\r\n    const data = JSON.stringify(storeData, null, 2);\r\n    const link = document.createElement(\"a\");\r\n    link.download = `wealth-tracker-${DateTime.local().toFormat(\r\n      shortDate\r\n    )}.json`;\r\n    const blob = new Blob([data], { type: \"application/json\" });\r\n    link.href = window.URL.createObjectURL(blob);\r\n    link.click();\r\n  }, [storeData]);\r\n\r\n  return onExport;\r\n};\r\n","import { useCallback } from \"react\";\r\nimport { storeValidator } from \"shared/models/store\";\r\nimport { store } from \"shared/store\";\r\n\r\nfunction selectFile(contentType: string) {\r\n  return new Promise<File>((resolve) => {\r\n    const input = document.createElement(\"input\");\r\n    input.type = \"file\";\r\n    input.multiple = false;\r\n    input.accept = contentType;\r\n\r\n    input.onchange = () => {\r\n      const files = Array.from(input.files ?? []);\r\n      resolve(files[0]);\r\n    };\r\n\r\n    input.click();\r\n  });\r\n}\r\n\r\nexport const useImport = () => {\r\n  return useCallback(async () => {\r\n    const file = await selectFile(\"application/json\");\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = (readerEvent) => {\r\n      const content = readerEvent.target?.result?.toString();\r\n      if (content) {\r\n        const data = JSON.parse(window.atob(content.split(\",\")[1]));\r\n        const validation = storeValidator.safeParse(data);\r\n        validation.success && store.setState(() => data);\r\n      }\r\n    };\r\n  }, []);\r\n};\r\n","import DeleteForever from \"@mui/icons-material/DeleteForever\";\nimport { Box, Button, Stack, Tab, Tabs } from \"@mui/material\";\nimport { NetWealth } from \"capabilities/net-wealth\";\nimport { ProjectedIncome } from \"capabilities/projected-income\";\nimport { ProjectedWealth } from \"capabilities/projected-wealth\";\nimport { useState } from \"react\";\nimport { SafetyButton } from \"shared/components/safety-button\";\nimport { useExport } from \"shared/hooks/use-export\";\nimport { useImport } from \"shared/hooks/use-import\";\nimport { getDefaults } from \"shared/models/projected-wealth\";\nimport { store } from \"shared/store\";\n\nexport const App = () => {\n  const [tab, setTab] = useState<string>(\"projected-income\");\n  const onExport = useExport();\n  const onImport = useImport();\n  return (\n    <>\n      <Stack direction=\"row\">\n        <Tabs value={tab} onChange={(_, value) => setTab(value)}>\n          <Tab value=\"wealth\" label=\"Total Wealth\" />\n          <Tab value=\"projected-income\" label=\"Projected Income\" />\n          <Tab value=\"projected-wealth\" label=\"Projected Wealth\" />\n        </Tabs>\n        <Box marginLeft={\"auto\"} gap={2} display={\"flex\"}>\n          <Button onClick={onImport}>Import</Button>\n          <Button onClick={onExport}>Export</Button>\n          <SafetyButton\n            onConfirm={() => {\n              store.setState(() => getDefaults());\n            }}\n            inactiveLabel=\"Reset\"\n            activatingLabel=\"Wait\"\n            activeLabel=\"Confirm\"\n            color=\"error\"\n            icon={<DeleteForever />}\n          />\n        </Box>\n      </Stack>\n      <Box padding={2} height={\"95%\"} width={\"100%\"}>\n        {tab === \"wealth\" && <NetWealth />}\n        {tab === \"projected-income\" && <ProjectedIncome />}\n        {tab === \"projected-wealth\" && <ProjectedWealth />}\n      </Box>\n    </>\n  );\n};\n","import { CssBaseline, ThemeProvider, createTheme } from \"@mui/material\";\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers\";\r\nimport { AdapterLuxon } from \"@mui/x-date-pickers/AdapterLuxon\";\r\nimport \"ag-grid-community/styles/ag-grid.css\";\r\nimport \"ag-grid-community/styles/ag-theme-quartz.css\";\r\nimport { App } from \"app/app.tsx\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport { ErrorBoundary } from \"react-error-boundary\";\r\nimport \"./index.css\";\r\n\r\nconst darkTheme = createTheme({\r\n  palette: {\r\n    mode: \"dark\",\r\n  },\r\n});\r\n\r\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\r\n  <React.StrictMode>\r\n    <ErrorBoundary\r\n      fallbackRender={(props) => {\r\n        return (\r\n          <>\r\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.message}</div>\r\n            <div style={{ backgroundColor: \"#FFF\" }}>\r\n              {props.error.stackTrace}\r\n            </div>\r\n          </>\r\n        );\r\n      }}\r\n    >\r\n      <LocalizationProvider dateAdapter={AdapterLuxon}>\r\n        <ThemeProvider theme={darkTheme}>\r\n          <CssBaseline />\r\n          <App />\r\n        </ThemeProvider>\r\n      </LocalizationProvider>\r\n    </ErrorBoundary>\r\n  </React.StrictMode>\r\n);\r\n\r\n"],"names":["accountDataValidator","z","object","date","string","value","number","id","accountValidator","type","literal","data","array","loanValidator","principal","ratePct","paymentsPerYear","payment","firstPaymentDate","ownershipPct","mortgageValidator","loan","optional","wealth","record","union","projectedWealth","timeSeries","paycheck","retirementRate","savingsRate","meritBonusPct","companyBonusPct","meritBonus","companyBonus","retirementBonus","equityPct","meritIncreasePct","getDefaults","projectedIncome","storeValidator","createStore","key","validator","defaultValue","localData","localStorage","getItem","JSON","parse","safeParse","success","log","error","next","merge","setItem","stringify","store","CreateStore","subscribe","current","state","formatCashShort","Intl","NumberFormat","style","currency","notation","maximumFractionDigits","format","formatCash","calcLoanBalance","pricipal","rate","monthlyPayment","anualizedRate","periods","diff","DateTime","fromISO","months","totalRate","balance","calcEquity","houseValue","loanBalance","findNearstOnOrBefore","find","x","idx","startOf","length","findSameYear","year","getMortgateValue","mortgage","entry","getAccountValue","account","getGraphValue","getGraphDates","accounts","Set","flatMap","map","toISO","sort","a","b","toMillis","useGraphData","useStore","useMemo","dates","Object","values","entries","graphData","reduce","acc","accountName","toJSDate","total","firstNonZero","findIndex","slice","WealthChart","series","keys","stacked","xKey","yKey","yName","tooltip","renderer","datum","content","fromJSDate","toISODate","options","theme","title","text","axes","position","label","NewAccount","forwardRef","props","ref","open","setOpen","useState","nameRef","useRef","setError","accountType","setAccountType","undefined","marginLeft","target","setState","create","prev","children","AgGrid","rest","height","AgGridReact","shortDate","sortByDate","select","direction","DeleteAccount","padding","width","onDeleteAccount","RenameAccount","nextAccountName","setNextAccountName","event","onUpdateName","createAccountColumnConfig","headerName","valueFormatter","toFormat","valueGetter","cellRenderer","idxToRemove","splice","DeleteForeverIcon","useMissingYears","years","groupBy","janFirst","fromObject","day","month","days","lookup","fromEntries","missing","i","push","AccountTab","setDate","local","amount","setamount","missingYears","hasSameDate","hasSame","onAddEntry","toString","uuid","accountColumnConfig","join","color","startAdornment","mortgageColumnConfig","toFixed","equity","selector","curr","convertPct","min","datetime","offset","AddLoan","textField","parsed","issues","path","AddEntry","Stack","MortgageTab","allAccounts","mortgageData","AccountTabs","firstAccount","setAccount","useEffect","_","NetWealth","minMaxAvg","max","avg","index","arr","Math","Infinity","outcomeFromSingle","actual","actualizedOutcome","outcome","scaleOutcome","AddOutcome","outcomes","everyActualDefined","every","Value","secondaryValue","tertiaryValue","display","minWidth","flexDirection","justifyContent","alignItems","gap","flexShrink","Cash","fallback","Duration","dateTime","countDownStr","diffNow","countDownColor","formatPercent","Percent","BonusOutcome","payDate","border","borderRadius","paddingBottom","paddingLeft","paddingTop","paddingRight","cash","percent","variant","valueFormatted","UpdateIcon","editable","cellEditor","valueSetter","newValue","DataEntry","defaultDate","setAmount","concat","console","flex","Layout","marginBottom","Until","useMostFrequentValue","valueByDateRange","toSorted","plus","minus","useProjectedPay","baseIncome","lastMerit","payPerPeriod","mostRecentPay","projectedPayPerPeriod","Array","fill","start","end","startDate","multiplier","useBaseIncome","endDate","pay","incomePerPeriod","filter","rangeOutside","rangeInside","overlapEnd","overlapStart","weeks","totalIncome","round","MeritOutcome","income","meritIncreases","commonMerit","meritPct","payChecks","hasActualPaycheck","payCheck","totalAdjust","sx","maxWidth","_paycheck","ArrowForwardIcon","Outcome","useAprilBonus","payedOn","bonusAmmount","bonusPercent","frequentMeritBonusPercent","meritOutcome","useJuneBonus","timeseries","mostRecentBonus","mostRecentPercent","meritFactor","projectedActual","useJulyBonus","payDay","juneBonus","eligbleIncome","ProjectedIncome","setYear","oldestYear","first","nextJanFirst","junePayDay","meritPayDay","meritIncreaseDay","julyPayDay","julyBonus","incomeOutcome","Box","marginRight","set","getWealth","getEarliestEntry","fromMillis","useYearlyWealth","benchmarkDate","earliest","yoyCash","yoyPercent","currentDate","benchmark","benchmarkWealth","ProjectedWealth","SafetyButton","inactiveLabel","activatingLabel","activeLabel","onConfirm","icon","disabled","safetyState","setSafetyState","setTimeout","useExport","storeData","onExport","useCallback","link","document","createElement","download","blob","Blob","href","window","URL","createObjectURL","click","selectFile","contentType","Promise","input","multiple","accept","onchange","files","from","useImport","file","reader","FileReader","readAsDataURL","onload","readerEvent","result","atob","split","App","tab","setTab","onImport","DeleteForever","darkTheme","createTheme","palette","mode","ReactDOM","createRoot","getElementById","render","backgroundColor","message","stackTrace","AdapterLuxon"],"mappings":"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"}