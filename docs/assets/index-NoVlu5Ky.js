var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,"name",{value,configurable:!0});import{j as jsx,b as jsxs,F as Fragment}from"./@emotion-C5te-C3E.js";import"./ag-grid-community-Dstgf3nq.js";import{D as Dialog,B as Button,a as DialogTitle,S as Stack,T as TextField,M as MenuItem,b as DialogContent,c as DialogActions,P as Paper,d as default_1,A as Alert,G as Grid,e as DatePicker,I as InputAdornment,f as Stack$1,g as Tabs,h as Tab,i as Box,j as Typography,k as Divider,l as default_1$1,m as Tooltip,n as Table,o as TableBody,p as TableRow,q as TableCell,r as default_1$2,s as Box$1,t as createTheme,L as LocalizationProvider,u as AdapterLuxon,C as CssBaseline,v as ThemeProvider}from"./@mui-8GKnNbkB.js";import{S as Store,u as useStore}from"./@tanstack-C7NK6ToA.js";import{A as AgChartsReact}from"./ag-charts-react-CWpTvsl8.js";import{D as DateTime}from"./luxon-BOQzYXYm.js";import{r as reactExports,a as React}from"./react-Dp-UgLSZ.js";import{m as merge}from"./deepmerge-LYrNqSsX.js";import{z}from"./zod-f9fbzKyR.js";import{c as create}from"./mutative-SUdGWNRE.js";import{m as main}from"./ag-grid-react-DlnuLdlC.js";import{v as v4}from"./uuid-DmDH2-Ii.js";import{c as client}from"./react-dom-tAkJLv4D.js";import{E as ErrorBoundary}from"./react-error-boundary-DbFwlpNr.js";import"./hoist-non-react-statics-BI0zVOZ1.js";import"./react-is-BurAzYM9.js";import"./@babel-Da9QAQIm.js";import"./stylis-BvCTCaD4.js";import"./clsx-DvC3wpxN.js";import"./prop-types-BAUTa6OW.js";import"./react-transition-group-C3q6_IyI.js";import"./dom-helpers-Hfa3ly4k.js";import"./@popperjs-4P2G51Yq.js";import"./use-sync-external-store-BvrDn2mX.js";import"./ag-charts-community-BzVcA-B_.js";import"./scheduler-Dnx1gCjA.js";__name(function(){const relList=document.createElement("link").relList;if(relList&&relList.supports&&relList.supports("modulepreload"))return;for(const link of document.querySelectorAll('link[rel="modulepreload"]'))processPreload(link);new MutationObserver(mutations=>{for(const mutation of mutations)if(mutation.type==="childList")for(const node of mutation.addedNodes)node.tagName==="LINK"&&node.rel==="modulepreload"&&processPreload(node)}).observe(document,{childList:!0,subtree:!0});function getFetchOpts(link){const fetchOpts={};return link.integrity&&(fetchOpts.integrity=link.integrity),link.referrerPolicy&&(fetchOpts.referrerPolicy=link.referrerPolicy),link.crossOrigin==="use-credentials"?fetchOpts.credentials="include":link.crossOrigin==="anonymous"?fetchOpts.credentials="omit":fetchOpts.credentials="same-origin",fetchOpts}__name(getFetchOpts,"getFetchOpts");function processPreload(link){if(link.ep)return;link.ep=!0;const fetchOpts=getFetchOpts(link);fetch(link.href,fetchOpts)}__name(processPreload,"processPreload")},"polyfill")();const accountDataValidator=z.object({date:z.string(),value:z.number(),id:z.string()}),accountValidator=z.object({type:z.literal("account"),data:z.array(accountDataValidator)}),loanValidator=z.object({principal:z.number(),ratePct:z.number(),paymentsPerYear:z.number(),payment:z.number(),firstPaymentDate:z.string(),ownershipPct:z.number()}),mortgageValidator=z.object({type:z.literal("mortgage"),loan:loanValidator.optional(),data:z.array(accountDataValidator)}),wealth=z.record(z.union([accountValidator,mortgageValidator])),projectedWealth=z.object({timeSeries:z.object({paycheck:z.array(accountDataValidator),retirementRate:z.array(accountDataValidator),savingsRate:z.array(accountDataValidator),meritBonusPct:z.array(accountDataValidator),companyBonusPct:z.array(accountDataValidator),meritBonus:z.array(accountDataValidator),companyBonus:z.array(accountDataValidator),retirementBonus:z.array(accountDataValidator),equityPct:z.array(accountDataValidator),meritIncreasePct:z.array(accountDataValidator)})}),getDefaults=__name(()=>({projectedIncome:{timeSeries:{paycheck:[],retirementRate:[],savingsRate:[],meritBonusPct:[],companyBonusPct:[],meritBonus:[],companyBonus:[],retirementBonus:[],equityPct:[],meritIncreasePct:[]}},wealth:{}}),"getDefaults"),storeValidator=z.object({wealth,projectedIncome:projectedWealth}),createStore=__name((key,validator2,defaultValue)=>{const localData=localStorage.getItem(key);let data=localData?JSON.parse(localData):defaultValue;const parse=validator2.safeParse(data);if(!parse.success){console.log("zod error",parse.error),console.log("original",data);const next=merge(data,defaultValue);console.log("merged",next),localStorage.setItem(`${key}-previous`,JSON.stringify(data)),localStorage.setItem(key,JSON.stringify(next)),data=next}const store2=new Store(data);return store2.subscribe(()=>{const current=localStorage.getItem(key);current&&localStorage.setItem(`${key}-previous`,current),localStorage.setItem(key,JSON.stringify(store2.state))}),store2},"createStore"),store=createStore("store",storeValidator,{projectedIncome:{timeSeries:{paycheck:[],retirementRate:[],savingsRate:[],meritBonusPct:[],companyBonusPct:[],meritBonus:[],companyBonus:[],retirementBonus:[],equityPct:[],meritIncreasePct:[]}},wealth:{}}),formatCashShort=new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",notation:"compact",maximumFractionDigits:1}).format,formatCash=new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",maximumFractionDigits:0}).format,calcLoanBalance=__name((date,loan)=>{const{firstPaymentDate,paymentsPerYear,principal:pricipal,ratePct:rate,payment:monthlyPayment}=loan,anualizedRate=rate/paymentsPerYear,periods=date.diff(DateTime.fromISO(firstPaymentDate),"months").months,totalRate=(1+anualizedRate)**periods;return pricipal*totalRate-monthlyPayment/anualizedRate*(totalRate-1)},"calcLoanBalance"),calcEquity=__name((ownershipPct,houseValue,loanBalance,principal)=>houseValue?houseValue*ownershipPct-loanBalance:principal-loanBalance,"calcEquity"),findNearstOnOrBefore=__name((date,data)=>data.find((x,idx,array)=>{if(idx==0&&DateTime.fromISO(x.date).startOf("day")>date||idx<array.length-1&&DateTime.fromISO(x.date).startOf("day")<=date&&DateTime.fromISO(data[idx+1].date).startOf("day")>date||idx===array.length-1)return!0}),"findNearstOnOrBefore"),findSameYear=__name((date,data)=>data.find(x=>DateTime.fromISO(x.date).year===date.year),"findSameYear"),getMortgateValue=__name((date,mortgage)=>{if(!mortgage.loan)return 0;const entry=findNearstOnOrBefore(date,mortgage.data);if(entry!=null&&entry.date&&mortgage.data[0]===entry&&DateTime.fromISO(entry.date)>date)return 0;const{ownershipPct,principal}=mortgage.loan,balance=calcLoanBalance(date,mortgage.loan);return calcEquity(ownershipPct,entry==null?void 0:entry.value,balance,principal)},"getMortgateValue"),getAccountValue=__name((date,account)=>{const entry=findNearstOnOrBefore(date,account.data);return entry!=null&&entry.date&&account.data[0]===entry&&DateTime.fromISO(entry.date)>date?0:(entry==null?void 0:entry.value)??0},"getAccountValue"),getGraphValue=__name((date,account)=>{switch(account.type){case"account":return getAccountValue(date,account);case"mortgage":return getMortgateValue(date,account)}},"getGraphValue"),getGraphDates=__name(accounts=>[...new Set(accounts.flatMap(x=>x.data.map(x2=>DateTime.fromISO(x2.date).startOf("day").toISO())))].map(x=>DateTime.fromISO(x)).sort((a,b)=>a.toMillis()-b.toMillis()),"getGraphDates"),useGraphData=__name(()=>{const wealth2=useStore(store,x=>x.wealth);return reactExports.useMemo(()=>{const dates=getGraphDates(Object.values(wealth2)),accounts=Object.entries(wealth2),graphData=dates.map(date=>accounts.reduce((acc,[accountName,account])=>{const value=getGraphValue(date,account);return acc[accountName]=value,acc.total=acc.total+value,acc.date=date.toJSDate(),acc},{total:0})),firstNonZero=graphData.findIndex(x=>x.total>0);return graphData.slice(firstNonZero)},[wealth2])},"useGraphData"),WealthChart=__name(()=>{const wealth2=useStore(store,x=>x.wealth),data=useGraphData(),series=reactExports.useMemo(()=>[...Object.keys(wealth2).map(x=>({stacked:!0,type:"area",xKey:"date",yKey:x,yName:x,tooltip:{renderer:({datum,yKey,xKey})=>({content:`${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`})}})),{type:"line",xKey:"date",yKey:"total",yName:"Total",tooltip:{renderer:({datum,yKey,xKey})=>({content:`${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`})}}],[wealth2]),options=reactExports.useMemo(()=>{var _a;return{theme:"ag-default-dark",title:{text:`Total Wealth ${formatCashShort(((_a=data[data.length-1])==null?void 0:_a.total)??0)}`},data,axes:[{type:"time",position:"bottom",label:{format:"%Y"}},{type:"number",position:"left"}],series}},[data,series]);return jsx(AgChartsReact,{options})},"WealthChart"),NewAccount=reactExports.forwardRef((props,ref)=>{const[open,setOpen]=reactExports.useState(!1),nameRef=reactExports.useRef(null),[error,setError]=reactExports.useState(!1),[accountType,setAccountType]=reactExports.useState();return jsxs(Fragment,{children:[jsx(Button,{ref,onClick:()=>{setOpen(!0),setError(!1),setAccountType(void 0)},children:"add account"}),jsxs(Dialog,{open,onClose:()=>setOpen(!1),children:[jsx(DialogTitle,{children:"Add New Account"}),jsx(DialogContent,{children:jsxs(Stack,{spacing:2,margin:2,children:[jsxs(TextField,{select:!0,color:error?"error":"primary",onChange:value=>{setError(!1),setAccountType(value.target.value)},label:"Type",children:[jsx(MenuItem,{value:"mortgage",children:"Mortgage"}),jsx(MenuItem,{value:"account",children:"Generic Account"})]}),jsx(TextField,{placeholder:"Name",onChange:()=>{setError(!1)},error,inputRef:nameRef})]})}),jsx(DialogActions,{children:jsx(Button,{disabled:error,onClick:()=>{store.setState(prev=>create(prev,next=>{var _a;if(!((_a=nameRef.current)!=null&&_a.value)||!accountType||prev.wealth[nameRef.current.value]){setError(!0);return}next.wealth[nameRef.current.value]={type:accountType,data:[]},setOpen(!1)}))},children:"Add"})})]}),props==null?void 0:props.children]})}),AgGrid=__name(props=>{const{id,...rest}=props;return jsx("div",{id,className:"ag-theme-quartz-dark",style:{height:"100%"},children:jsx(main.AgGridReact,{...rest})})},"AgGrid"),shortDate="yyyy-MM-dd",sortByDate=__name((select,direction)=>(a,b)=>direction==="asc"?select(a).toMillis()-select(b).toMillis():select(b).toMillis()-select(a).toMillis(),"sortByDate"),DeleteAccount=__name(props=>{const{accountName}=props;return jsx(Paper,{elevation:3,sx:{padding:2,width:"100%"},children:jsx(Button,{onClick:__name(()=>{store.setState(prev=>create(prev,next=>{delete next.wealth[accountName]}))},"onDeleteAccount"),color:"error",children:"Delete Account"})})},"DeleteAccount"),RenameAccount=__name(props=>{const{accountName}=props,[nextAccountName,setNextAccountName]=reactExports.useState(accountName);return jsx(Paper,{elevation:3,sx:{padding:2},children:jsxs(Stack,{spacing:1,children:[jsx(TextField,{label:"Account Name",value:nextAccountName,onChange:event=>setNextAccountName(event.target.value),placeholder:""}),jsx(Button,{disabled:!nextAccountName,onClick:__name(()=>{store.setState(prev=>create(prev,next=>{next.wealth[nextAccountName]=next.wealth[accountName],delete next.wealth[accountName]}))},"onUpdateName"),children:"Update Name"})]})})},"RenameAccount"),createAccountColumnConfig$2=__name(accountName=>[{headerName:"Date",sort:"desc",valueFormatter:x=>{var _a;return(_a=x.value)==null?void 0:_a.toFormat(shortDate)},valueGetter:x=>x.data&&DateTime.fromISO(x.data.date)},{headerName:"Value",valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.value},valueFormatter:x=>formatCashShort(x.value),type:"numericColumn"},{headerName:"Actions",cellRenderer:props=>jsx(Button,{onClick:()=>{store.setState(prev=>create(prev,next=>{const idxToRemove=next.wealth[accountName].data.findIndex(x=>{var _a;return x.id===((_a=props.data)==null?void 0:_a.id)});return next.wealth[accountName].data.splice(idxToRemove,1),next}))},color:"error",children:jsx(default_1,{})})}],"createAccountColumnConfig$2"),useMissingYears=__name(account=>reactExports.useMemo(()=>{const years=Object.entries(Object.groupBy(account.data,x=>DateTime.fromISO(x.date).year)).map(([year,entries])=>[+year,!!(entries!=null&&entries.find(x=>{const date=DateTime.fromISO(x.date),janFirst=DateTime.fromObject({day:1,month:1,year:+year});return date.diff(janFirst,["days","hours"]).days==0}))]).sort(([a],[b])=>a-b),lookup=Object.fromEntries(years),missing=[];for(let i=years[0][0];i<=years[years.length-1][0];i++)lookup[i]||missing.push(i);return missing},[account.data]),"useMissingYears"),AccountTab=__name(props=>{const{accountName}=props,account=useStore(store,state=>state.wealth[accountName]),[date,setDate]=reactExports.useState(DateTime.local()),[amount,setamount]=reactExports.useState(0),missingYears=useMissingYears(account),hasSameDate=reactExports.useMemo(()=>{var _a;return!!((_a=account==null?void 0:account.data)!=null&&_a.find(x=>date.hasSame(DateTime.fromISO(x.date),"day")))},[account==null?void 0:account.data,date]),onAddEntry=__name(()=>{store.setState(prev=>create(prev,next=>{next.wealth[accountName].data.push({date:date.toString(),value:amount,id:v4()}),next.wealth[accountName].data.sort(sortByDate(x=>DateTime.fromISO(x.date),"asc"))}))},"onAddEntry"),accountColumnConfig=reactExports.useMemo(()=>createAccountColumnConfig$2(accountName),[accountName]);return jsxs(Fragment,{children:[missingYears.length>0&&jsxs(Alert,{severity:"warning",children:["Ensure an entry for Jan 1st for each year ",missingYears.join(", ")]}),jsxs(Grid,{container:!0,height:"100%",width:"100%",padding:1,spacing:2,children:[jsx(Grid,{xs:!0,children:jsx(AgGrid,{reactiveCustomComponents:!0,rowData:(account==null?void 0:account.data)??[],columnDefs:accountColumnConfig,id:account+"-history"})}),jsx(Grid,{xs:9,children:jsx("div",{children:jsxs(Grid,{container:!0,spacing:2,children:[jsx(Grid,{xs:2,children:jsx(Paper,{elevation:3,sx:{padding:2},children:jsxs(Stack,{spacing:1,children:[jsx(DatePicker,{format:shortDate,sx:{color:"white"},label:"Date",defaultValue:date,onChange:value=>value&&setDate(value)}),jsx(TextField,{label:"amount",value:amount,type:"number",onChange:event=>setamount(+event.target.value),InputProps:{startAdornment:jsx(InputAdornment,{position:"start",children:"$"})},placeholder:""}),jsx(Button,{disabled:!amount||!date||hasSameDate,onClick:onAddEntry,children:"Add Entry"})]})})}),jsx(Grid,{xs:8}),jsx(Grid,{xs:2,children:jsxs(Stack,{spacing:2,children:[jsx(DeleteAccount,{accountName}),jsx(RenameAccount,{accountName})]})})]})})})]})]})},"AccountTab"),createAccountColumnConfig$1=__name(accountName=>[{headerName:"Date",sort:"desc",valueFormatter:x=>{var _a;return(_a=x.value)==null?void 0:_a.toFormat(shortDate)},valueGetter:x=>x.data&&DateTime.fromISO(x.data.date)},{headerName:"Home Value",valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.value},valueFormatter:x=>formatCashShort(x.value),type:"numericColumn"},{headerName:"Actions",cellRenderer:props=>jsx(Button,{onClick:()=>{store.setState(prev=>create(prev,next=>{const account=next.wealth[accountName],idxToRemove=account.data.findIndex(x=>{var _a;return x.id===((_a=props.data)==null?void 0:_a.id)});return account.data.splice(idxToRemove,1),next}))},color:"error",children:jsx(default_1,{})})}],"createAccountColumnConfig$1"),mortgageColumnConfig=[{headerName:"Date",sort:"desc",valueFormatter:x=>{var _a;return(_a=x.value)==null?void 0:_a.toFormat(shortDate)},valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.date}},{headerName:"Loan Balance",valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.balance.toFixed(2)},valueFormatter:x=>formatCashShort(x.value),type:"numericColumn"},{headerName:"Equity",valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.equity.toFixed(2)},valueFormatter:x=>formatCashShort(x.value),type:"numericColumn"}];function groupBy(array,selector){return array.reduce((acc,curr)=>{const key=selector(curr);return acc[key]??(acc[key]=[]),acc[key].push(curr),acc},{})}__name(groupBy,"groupBy");const convertPct=__name(value=>value>1?value/100:value,"convertPct"),validator=z.object({principal:z.number().min(0),ratePct:z.number().min(0),paymentsPerYear:z.number().min(0),payment:z.number().min(0),firstPaymentDate:z.string().datetime({offset:!0}),ownershipPct:z.number().min(0)}),AddLoan=__name(props=>{var _a;const{accountName}=props,loan=useStore(store,x=>{const account=x.wealth[accountName];if("loan"in account)return account.loan}),ref=reactExports.useRef(loan??{}),[error,setError]=reactExports.useState({});return jsx(Paper,{elevation:3,sx:{padding:2},children:jsxs(Stack,{spacing:1,children:[jsx(DatePicker,{defaultValue:(_a=ref.current)!=null&&_a.firstPaymentDate?DateTime.fromISO(ref.current.firstPaymentDate):null,label:"First Payment",slotProps:{textField:{error:!!error.firstPaymentDate}},onChange:value=>{value&&(ref.current.firstPaymentDate=value.toISO())}}),jsx(TextField,{error:!!error.principal,defaultValue:loan==null?void 0:loan.principal,onChange:event=>{ref.current.principal=+event.target.value},variant:"outlined",label:"Principal",type:"number"}),jsx(TextField,{error:!!error.ratePct,defaultValue:loan==null?void 0:loan.ratePct,onChange:event=>{ref.current.ratePct=convertPct(+event.target.value)},variant:"outlined",label:"Rate",type:"number"}),jsx(TextField,{error:!!error.paymentsPerYear,defaultValue:loan==null?void 0:loan.paymentsPerYear,onChange:event=>{ref.current.paymentsPerYear=+event.target.value},variant:"outlined",label:"Payments Per Year",type:"number"}),jsx(TextField,{defaultValue:loan==null?void 0:loan.payment,error:!!error.payment,onChange:event=>{ref.current.payment=+event.target.value},variant:"outlined",label:"Payment",type:"number"}),jsx(TextField,{defaultValue:loan==null?void 0:loan.ownershipPct,error:!!error.ownershipPct,onChange:event=>{ref.current.ownershipPct=convertPct(+event.target.value)},variant:"outlined",label:"Ownership (%)",type:"number"}),jsx(Button,{onClick:()=>{const parsed=validator.safeParse(ref.current);if(parsed.success)setError({}),store.setState(prev=>create(prev,next=>{next.wealth[accountName].loan=parsed.data}));else{const issues=groupBy(parsed.error.issues,x=>x.path.join(""));setError(issues)}},children:"Set Loan"})]})})},"AddLoan"),AddEntry=__name(props=>{const{accountName}=props,ref=reactExports.useRef({date:DateTime.local(),value:0}),onAddEntry=__name(()=>{const{date,value}=ref.current;!date||!value||store.setState(prev=>create(prev,next=>{next.wealth[accountName].data.push({date:date.toISO(),value,id:v4()})}))},"onAddEntry");return jsx(Paper,{elevation:3,sx:{padding:2},children:jsxs(Stack$1,{spacing:1,children:[jsx(DatePicker,{defaultValue:DateTime.local(),onChange:date=>{date&&(ref.current.date=date)}}),jsx(TextField,{label:"Home value",type:"numeric",onChange:event=>{ref.current.value=+event.target.value}}),jsx(Button,{onClick:onAddEntry,children:"Add Home Value"})]})})},"AddEntry"),MortgageTab=__name(props=>{const{accountName}=props,account=useStore(store,state=>state.wealth[accountName]),allAccounts=useStore(store,x=>x.wealth),accountColumnConfig=reactExports.useMemo(()=>createAccountColumnConfig$1(accountName),[accountName]),mortgageData=reactExports.useMemo(()=>account!=null&&account.loan?getGraphDates(Object.values(allAccounts)).map(date=>{var _a;const loanBalance=calcLoanBalance(date,account.loan);return{date,balance:loanBalance,equity:calcEquity(account.loan.ownershipPct,(_a=findNearstOnOrBefore(date,account.data))==null?void 0:_a.value,loanBalance,account.loan.principal)}}):[],[account,allAccounts]);return jsxs(Grid,{container:!0,height:"100%",width:"100%",padding:1,spacing:2,children:[jsx(Grid,{xs:3,children:jsx(AgGrid,{reactiveCustomComponents:!0,rowData:(account==null?void 0:account.data)??[],columnDefs:accountColumnConfig,id:account+"-history"})}),jsx(Grid,{xs:3,children:jsx(AgGrid,{rowData:mortgageData,columnDefs:mortgageColumnConfig,id:account+"-history"})}),jsx(Grid,{xs:6,children:jsx("div",{children:jsxs(Grid,{container:!0,spacing:2,children:[jsx(Grid,{xs:3,children:jsx(AddLoan,{accountName})}),jsx(Grid,{xs:3,children:jsx(AddEntry,{accountName})}),jsx(Grid,{xs:3}),jsx(Grid,{xs:3,children:jsxs(Stack$1,{spacing:2,children:[jsx(DeleteAccount,{accountName}),jsx(RenameAccount,{accountName})]})})]})})})]})},"MortgageTab"),AccountTabs=__name(()=>{var _a,_b,_c;const accounts=useStore(store,x=>x.wealth),firstAccount=((_a=Object.keys(accounts))==null?void 0:_a[0])??"",[account,setAccount]=reactExports.useState(firstAccount);return reactExports.useEffect(()=>{var _a2;accounts[account]||setAccount(((_a2=Object.keys(accounts))==null?void 0:_a2[0])??"")},[account,accounts]),jsxs(Box,{display:"flex",flexDirection:"column",width:"100%",height:"100%",children:[jsx(Box,{display:"flex",flex:"0 1 auto",children:jsxs(Tabs,{value:account,defaultValue:firstAccount,onChange:(_,value)=>{setAccount(value)},children:[Object.keys(accounts).map(account2=>jsx(Tab,{value:account2,label:account2},account2)),jsx(Tab,{component:NewAccount})]})}),jsxs(Box,{flex:"1 1 auto",children:[((_b=accounts[account])==null?void 0:_b.type)==="account"&&jsx(AccountTab,{accountName:account}),((_c=accounts[account])==null?void 0:_c.type)==="mortgage"&&jsx(MortgageTab,{accountName:account})]})]})},"AccountTabs"),NetWealth=__name(()=>jsxs(Grid,{container:!0,height:"100%",width:"100%",children:[jsx(Grid,{xs:12,height:"50%",children:jsx(WealthChart,{})}),jsx(Grid,{xs:12,height:"50%",children:jsx(AccountTabs,{})})]}),"NetWealth"),minMaxAvg=__name(values=>values.length===0?{min:0,max:0,avg:0}:values.reduce((acc,curr,index,arr)=>{const{min,max,avg}=acc;return{min:Math.min(curr,min),max:Math.max(curr,max),avg:index===arr.length-1?(avg+curr)/arr.length:avg+curr}},{min:1/0,max:0,avg:0}),"minMaxAvg"),outcomeFromSingle=__name(value=>({min:value,max:value,avg:value,actual:value}),"outcomeFromSingle"),actualizedOutcome=__name(outcome=>outcome.actual?outcomeFromSingle(outcome.actual):outcome,"actualizedOutcome"),scaleOutcome=__name((outcome,value)=>({min:outcome.min*value,max:outcome.max*value,avg:outcome.avg*value,actual:outcome.actual?outcome.actual*value:void 0}),"scaleOutcome"),AddOutcome=__name((...outcomes)=>{const everyActualDefined=outcomes.every(x=>x.actual!=null);return outcomes.reduce((acc,curr)=>({min:acc.min+curr.min,avg:acc.avg+curr.avg,max:acc.max+curr.max,actual:everyActualDefined?(acc.actual??0)+(curr.actual??0):void 0}),{min:0,max:0,avg:0,actual:void 0})},"AddOutcome"),Value=__name(props=>{const{children,secondaryValue,tertiaryValue,title}=props;return jsxs(Box,{sx:{display:"flex",minWidth:106,height:64,padding:"0px 8px",flexDirection:"column",justifyContent:"center",alignItems:"flex-start",gap:.5,flexShrink:0},children:[jsxs(Box,{display:"flex",alignItems:"center",gap:.5,children:[jsx(Box,{fontSize:18,fontWeight:700,lineHeight:"20px",children:children||"??"}),!!(secondaryValue??tertiaryValue)&&jsx(Box,{alignSelf:"flex-end",fontSize:12,fontWeight:500,lineHeight:"16px",textTransform:"uppercase",color:"#888",children:secondaryValue??tertiaryValue})]}),jsx(Box,{fontSize:12,fontWeight:500,lineHeight:"16px",textTransform:"uppercase",children:title})]})},"Value"),Cash=__name(({value,fallback})=>value?formatCashShort(value):fallback,"Cash"),Duration=__name(({dateTime,children})=>{const countDownStr=reactExports.useMemo(()=>dateTime.diffNow(["months","days","hours"]).toFormat("d'd'"),[dateTime]),countDownColor=reactExports.useMemo(()=>{const days=dateTime.diffNow("days").days;return days<30?"green":days<60?"yellow":"red"},[dateTime]);return dateTime>DateTime.local()?jsx(Box,{color:countDownColor,children:countDownStr}):children},"Duration"),formatPercent=new Intl.NumberFormat("en-us",{style:"percent",maximumFractionDigits:1}).format,Percent=__name(({value})=>formatPercent(value),"Percent"),BonusOutcome=__name(props=>{const{outcome,title,payDate}=props;return jsxs(Box,{sx:{border:"1px solid rgba(255,255,255,0.1)",borderRadius:2},children:[jsx(Typography,{sx:{paddingBottom:1,paddingLeft:2,paddingTop:1,paddingRight:2},variant:"h5",children:title}),jsx(Divider,{}),jsxs(Stack,{padding:1,direction:"row",spacing:.5,justifyContent:"center",children:[!outcome.cash.actual&&jsxs(Fragment,{children:[jsx(Value,{secondaryValue:jsx(Percent,{value:outcome.percent.min}),title:"min",children:jsx(Cash,{value:outcome.cash.min,fallback:0})}),jsx(Value,{secondaryValue:jsx(Percent,{value:outcome.percent.avg}),title:"avg",children:jsx(Cash,{value:outcome.cash.avg,fallback:0})}),jsx(Value,{secondaryValue:jsx(Percent,{value:outcome.percent.max}),title:"max",children:jsx(Cash,{value:outcome.cash.max,fallback:0})})]}),jsx(Value,{title:"Actual",tertiaryValue:outcome.percent.actual&&jsx(Percent,{value:outcome.percent.actual}),secondaryValue:outcome.cash.actual&&jsx(Cash,{value:outcome.cash.actual}),children:jsx(Duration,{dateTime:payDate,children:jsx(Cash,{value:outcome.cash.actual})})})]})]})},"BonusOutcome"),createAccountColumnConfig=__name((accountName,variant)=>[{headerName:"Date",sort:"desc",valueFormatter:x=>{var _a;return(_a=x.value)==null?void 0:_a.toFormat(shortDate)},valueGetter:x=>x.data&&DateTime.fromISO(x.data.date),cellRenderer:x=>jsxs(Stack$1,{direction:"row",alignItems:"center",children:[x.valueFormatted," ",x.value&&x.value>DateTime.local()&&jsx(Tooltip,{title:"Future Event",children:jsx(default_1$1,{htmlColor:"yellow"})})]})},{headerName:"Value",valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.value},valueFormatter:x=>variant==="number"?x.value:variant==="cash"?formatCash(x.value):(x.value*100).toFixed(2)+"%",type:"numericColumn",editable:!0,cellEditor:"agNumberCellEditor",valueSetter:x=>(store.setState(prev=>create(prev,next2=>{const account=next2.projectedIncome.timeSeries[accountName],idx=account.findIndex(({id})=>id===x.data.id);account[idx].value=+x.newValue})),!0)},{headerName:"Actions",cellRenderer:props=>jsx(Button,{onClick:()=>{store.setState(prev=>create(prev,next=>{const idxToRemove=next.projectedIncome.timeSeries[accountName].findIndex(x=>{var _a;return x.id===((_a=props.data)==null?void 0:_a.id)});next.projectedIncome.timeSeries[accountName].splice(idxToRemove,1)}))},color:"error",children:jsx(default_1,{})})}],"createAccountColumnConfig"),DataEntry=__name(props=>{const{accountName,defaultDate,variant="number"}=props,account=useStore(store,state=>state.projectedIncome.timeSeries[accountName]),[date,setDate]=reactExports.useState(defaultDate),[amount,setAmount]=reactExports.useState(null),hasSameDate=reactExports.useMemo(()=>!!(account!=null&&account.find(x=>date.hasSame(DateTime.fromISO(x.date),"day"))),[account,date]),onAddEntry=__name(()=>{amount!=null&&store.setState(prev=>create(prev,next=>{next.projectedIncome.timeSeries[accountName]=next.projectedIncome.timeSeries[accountName].concat({date:date.toString(),value:variant==="percent"?amount/100:amount,id:v4()}).sort(sortByDate(x=>DateTime.fromISO(x.date),"asc"))}))},"onAddEntry"),accountColumnConfig=reactExports.useMemo(()=>createAccountColumnConfig(accountName,variant),[accountName,variant]);return jsxs(Box,{display:"flex",flexDirection:"column",height:"100%",children:[jsxs(Stack,{spacing:2,flex:"0 1 auto",children:[jsx(DatePicker,{format:shortDate,sx:{color:"white"},label:"Date",value:date,onChange:value=>{console.log(value),value&&setDate(value)}}),jsx(TextField,{label:"amount",value:amount??"",type:"number",onChange:event=>event.target.value===""?setAmount(null):setAmount(+event.target.value),InputProps:{startAdornment:variant!=="number"&&jsx(InputAdornment,{position:"start",children:variant==="cash"?"$":"%"})}}),jsx(Button,{disabled:amount===null||!date||hasSameDate,onClick:onAddEntry,children:"Add Entry"})]}),jsx(Box,{sx:{paddingTop:2,flex:"1 1 auto"},children:jsx(AgGrid,{reactiveCustomComponents:!0,rowData:account??[],columnDefs:accountColumnConfig,id:account+"-history",autoSizeStrategy:{type:"fitGridWidth"},stopEditingWhenCellsLoseFocus:!0})})]})},"DataEntry"),Layout=__name(props=>{const{title,accountName,defaultDate,variant}=props;return jsx(Paper,{sx:{padding:2,height:"100%",width:450,flexShrink:0},children:jsxs(Box,{display:"flex",flexDirection:"column",height:"100%",children:[jsx(Box,{flex:"0 1 auto",marginBottom:2,children:jsx(Typography,{sx:{marginBottom:2},variant:"h5",children:title})}),jsx(Box,{flex:"1 1 auto",children:jsx(DataEntry,{variant,accountName,defaultDate})})]})})},"Layout"),Until=__name(props=>{const{dateTime,children}=props;return DateTime.local()<dateTime&&children},"Until"),useMostFrequentValue=__name(data=>reactExports.useMemo(()=>Object.entries(Object.groupBy(data.map(x=>x.value),x=>x)).map(([key,values])=>[+key,(values==null?void 0:values.length)??0]).sort(([,a],[,b])=>b-a)[0][0],[data]),"useMostFrequentValue"),valueByDateRange=__name(account=>account.toSorted(sortByDate(x=>DateTime.fromISO(x.date),"asc")).map((x,index,array)=>{const next=array[index+1];return[DateTime.fromISO(x.date),(next!=null&&next.date?DateTime.fromISO(next==null?void 0:next.date).startOf("day"):DateTime.fromISO(x.date).startOf("day").plus({years:1})).minus({days:1}),x.value]}),"valueByDateRange"),useProjectedPay=__name(()=>{const timeSeries=useStore(store,x=>x.projectedIncome.timeSeries),baseIncome=timeSeries.paycheck,lastMerit=useMostFrequentValue(timeSeries.meritIncreasePct);return reactExports.useMemo(()=>{var _a;const payPerPeriod=valueByDateRange(baseIncome),mostRecentPay=payPerPeriod.length>0?payPerPeriod[payPerPeriod.length-1]:[DateTime.local(),DateTime.local().plus({years:1}),1],projectedPayPerPeriod=Array(11).fill(mostRecentPay);for(let i=0;i<projectedPayPerPeriod.length;i++){const[start,end]=projectedPayPerPeriod[i],[,,value]=projectedPayPerPeriod[i-1]??mostRecentPay,startDate=start.plus({years:i+1}),multiplier=1+lastMerit+(((_a=findSameYear(startDate,timeSeries.equityPct))==null?void 0:_a.value)??0);projectedPayPerPeriod[i]=[startDate,end.plus({years:i+1}),value*multiplier]}return[...payPerPeriod,...projectedPayPerPeriod]},[baseIncome,lastMerit,timeSeries.equityPct])},"useProjectedPay"),useBaseIncome=__name((startDate,endDate)=>{const pay=useProjectedPay();return reactExports.useMemo(()=>{const incomePerPeriod=pay.filter(([start,end])=>{const rangeOutside=startDate<=start&&endDate>=end,rangeInside=startDate>=start&&end>=endDate,overlapEnd=startDate<=start&&endDate<end&&endDate>start,overlapStart=startDate<=end&&startDate>=start&&endDate>end;return rangeInside||rangeOutside||overlapEnd||overlapStart}).map(([start,end,value])=>[DateTime.max(start,startDate),DateTime.min(end,endDate),value]).map(([start,end,value])=>[start,end,end.diff(start,"weeks").weeks/2*value]);return{totalIncome:Math.round(incomePerPeriod.reduce((acc,[,,curr])=>acc+curr,0)),incomePerPeriod}},[pay,startDate,endDate])},"useBaseIncome"),MeritOutcome=__name(props=>{const{title,payDate}=props,income=useBaseIncome(DateTime.fromObject({day:1,month:1,year:payDate.year}),DateTime.fromObject({day:1,month:1,year:payDate.year+1})),meritIncreases=useStore(store,x=>x.projectedIncome.timeSeries.meritIncreasePct),commonMerit=useMostFrequentValue(meritIncreases),meritPct=useStore(store,x=>{var _a;return((_a=findSameYear(payDate,x.projectedIncome.timeSeries.meritIncreasePct))==null?void 0:_a.value)??commonMerit}),payChecks=useProjectedPay(),payCheck=reactExports.useMemo(()=>{var _a;return((_a=payChecks.find(([start])=>start.year===payDate.year))==null?void 0:_a[2])??0},[payChecks,payDate.year]),equityPct=useStore(store,x=>payDate&&findSameYear(payDate,x.projectedIncome.timeSeries.equityPct)),totalAdjust=meritPct+((equityPct==null?void 0:equityPct.value)??0);return jsxs(Box,{sx:{border:"1px solid rgba(255,255,255,0.1)",borderRadius:2},children:[jsx(Typography,{sx:{paddingBottom:1,paddingLeft:2,paddingTop:1},variant:"h5",children:title}),jsx(Divider,{}),jsxs(Stack,{padding:1,direction:"row",spacing:.5,children:[jsx(Value,{title:"Paycheck",secondaryValue:jsx(Percent,{value:totalAdjust}),children:jsx(Cash,{value:payCheck*1+((equityPct==null?void 0:equityPct.value)??0)})}),jsx(Tooltip,{componentsProps:{tooltip:{sx:{maxWidth:"none"}}},title:jsx(Table,{sx:{width:"max-content"},children:jsx(TableBody,{children:income.incomePerPeriod.map(([start,end,value],index)=>jsxs(TableRow,{children:[jsx(TableCell,{children:start.toFormat(shortDate)}),jsx(TableCell,{children:jsx(default_1$2,{})}),jsx(TableCell,{children:end.toFormat(shortDate)}),jsx(TableCell,{children:jsx(Cash,{value})})]},index))})}),children:jsx("div",{children:jsx(Value,{title:"Base Pay",secondaryValue:jsx(Percent,{value:totalAdjust}),children:jsx(Cash,{value:income.totalIncome??0})})})}),jsx(Value,{title:"Actual",secondaryValue:jsx(Until,{dateTime:payDate,children:jsx(Percent,{value:totalAdjust})}),children:jsx(Duration,{dateTime:payDate,children:jsx(Percent,{value:totalAdjust})})})]})]})},"MeritOutcome"),Outcome=__name(props=>{const{outcome,title,payDate}=props;return jsxs(Box,{sx:{border:"1px solid rgba(255,255,255,0.1)",borderRadius:2},children:[jsx(Typography,{sx:{paddingBottom:1,paddingLeft:2,paddingTop:1},variant:"h5",children:title}),jsx(Divider,{}),jsxs(Stack,{padding:1,direction:"row",spacing:.5,children:[jsx(Value,{title:"min",children:jsx(Cash,{value:outcome.min,fallback:0})}),jsx(Value,{title:"avg",children:jsx(Cash,{value:outcome.avg,fallback:0})}),jsx(Value,{title:"max",children:jsx(Cash,{value:outcome.max,fallback:0})}),payDate&&jsx(Value,{title:"Actual",secondaryValue:jsx(Until,{dateTime:payDate,children:jsx(Cash,{value:outcome.actual})}),children:jsx(Duration,{dateTime:payDate,children:jsx(Cash,{value:outcome.actual})})})]})]})},"Outcome"),useAprilBonus=__name(year=>{const payedOn=reactExports.useMemo(()=>DateTime.fromObject({day:15,month:4,year}),[year]),timeSeries=useStore(store,x=>x.projectedIncome.timeSeries),{totalIncome}=useBaseIncome(DateTime.fromObject({day:1,month:1,year:year-1}),DateTime.fromObject({day:1,month:1,year})),bonusAmmount=reactExports.useMemo(()=>{var _a;return(_a=findSameYear(payedOn,timeSeries.meritBonus))==null?void 0:_a.value},[payedOn,timeSeries.meritBonus]),bonusPercent2=reactExports.useMemo(()=>{var _a;return(_a=findSameYear(payedOn,timeSeries.meritBonusPct))==null?void 0:_a.value},[payedOn,timeSeries.meritBonusPct]),frequentMeritBonusPercent=useMostFrequentValue(timeSeries.meritBonusPct);return reactExports.useMemo(()=>{const meritOutcome=minMaxAvg(timeSeries.meritBonusPct.filter(x=>DateTime.fromISO(x.date).year<=year).map(x=>x.value));return meritOutcome.avg=frequentMeritBonusPercent,{percent:actualizedOutcome({...meritOutcome,actual:bonusPercent2}),cash:actualizedOutcome({...scaleOutcome(meritOutcome,totalIncome),actual:bonusAmmount})}},[bonusAmmount,bonusPercent2,frequentMeritBonusPercent,timeSeries.meritBonusPct,totalIncome,year])},"useAprilBonus"),useJuneBonus=__name(year=>{const payedOn=reactExports.useMemo(()=>DateTime.fromObject({day:15,month:6,year}),[year]),timeseries=useStore(store,x=>x.projectedIncome.timeSeries),{totalIncome}=useBaseIncome(DateTime.fromObject({day:1,month:4,year:year-1}),DateTime.fromObject({day:31,month:3,year}));return reactExports.useMemo(()=>{const mostRecentBonus=findSameYear(payedOn,timeseries.companyBonus),mostRecentPercent=findSameYear(payedOn,timeseries.companyBonusPct),meritFactor=timeseries.meritBonusPct.filter(x=>DateTime.fromISO(x.date).year<=year).slice(-3).reduce((acc,curr)=>acc+curr.value,0),outcomes=minMaxAvg(timeseries.companyBonusPct.map(x=>x.value)),cash=scaleOutcome(outcomes,meritFactor*totalIncome),projectedActual=mostRecentPercent!=null&&mostRecentPercent.value?(mostRecentPercent==null?void 0:mostRecentPercent.value)*meritFactor*totalIncome:void 0;return{percent:actualizedOutcome({...outcomes,actual:mostRecentPercent==null?void 0:mostRecentPercent.value}),cash:actualizedOutcome({...cash,actual:(mostRecentBonus==null?void 0:mostRecentBonus.value)??projectedActual})}},[totalIncome,payedOn,timeseries.companyBonus,timeseries.companyBonusPct,timeseries.meritBonusPct,year])},"useJuneBonus"),bonusPercent=.15,useJulyBonus=__name(year=>{const payDay=reactExports.useMemo(()=>DateTime.fromObject({day:15,month:7,year}),[year]),actual=useStore(store,x=>{var _a;return(_a=findSameYear(payDay,x.projectedIncome.timeSeries.retirementBonus))==null?void 0:_a.value}),{totalIncome}=useBaseIncome(DateTime.fromObject({day:1,month:7,year:year-1}),DateTime.fromObject({day:1,month:7,year})),meritBonus=useAprilBonus(year),juneBonus=useJuneBonus(year);return reactExports.useMemo(()=>{const eligbleIncome=outcomeFromSingle(totalIncome),outcome=scaleOutcome(AddOutcome(eligbleIncome,actualizedOutcome(meritBonus.cash),actualizedOutcome(juneBonus.cash)),bonusPercent);return{cash:actualizedOutcome({...outcome,actual:actual??outcome.actual}),percent:{min:.15,max:.15,avg:.15,actual:.15}}},[actual,juneBonus.cash,meritBonus.cash,totalIncome])},"useJulyBonus"),ProjectedIncome=__name(()=>{const[year,setYear]=reactExports.useState(DateTime.local().year),dates=reactExports.useMemo(()=>({janFirst:DateTime.fromObject({day:1,month:1,year}),nextJanFirst:DateTime.fromObject({day:1,month:1,year:year+1}),junePayDay:DateTime.fromObject({day:15,month:6,year}),meritPayDay:DateTime.fromObject({day:15,month:4,year}),meritIncreaseDay:DateTime.fromObject({day:1,month:4,year}),julyPayDay:DateTime.fromObject({day:15,month:7,year})}),[year]),income=useBaseIncome(dates.janFirst,dates.nextJanFirst),meritBonus=useAprilBonus(year),juneBonus=useJuneBonus(year),julyBonus=useJulyBonus(year),incomeOutcome=reactExports.useMemo(()=>AddOutcome(outcomeFromSingle(income.totalIncome),meritBonus.cash,juneBonus.cash,julyBonus.cash),[income,julyBonus,juneBonus,meritBonus]);return jsxs(Box$1,{display:"flex",flexDirection:"column",height:"100%",gap:2,children:[jsx(Box$1,{flex:"0 1 auto",children:jsxs(Stack$1,{gap:2,direction:"row",overflow:"auto",children:[jsx(Outcome,{title:jsxs(Box$1,{display:"flex",alignItems:"center",gap:2,width:"100%",children:[jsx("span",{children:"Projected Income"}),jsx(DatePicker,{sx:{width:90,marginLeft:"auto",marginRight:2},label:"year",views:["year"],minDate:DateTime.local().plus({years:-1}),maxDate:DateTime.local().plus({years:10}),defaultValue:DateTime.local(),slotProps:{textField:{variant:"standard",label:""}},onYearChange:year2=>{setYear(year2.year)}})]}),outcome:incomeOutcome,payDate:dates.junePayDay}),jsx(MeritOutcome,{title:"Merit Increase",payDate:dates.meritIncreaseDay}),jsx(BonusOutcome,{title:"Merit Bonus",outcome:meritBonus,payDate:dates.meritPayDay}),jsx(BonusOutcome,{title:"Company Bonus",outcome:juneBonus,payDate:dates.junePayDay}),jsx(BonusOutcome,{title:"Retirement Bonus",outcome:julyBonus,payDate:dates.julyPayDay})]})}),jsx(Box$1,{flex:"1 1 auto",children:jsx(Box$1,{overflow:"auto",width:"100%",height:"100%",children:jsxs(Box$1,{height:"100%",display:"flex",gap:2,flexWrap:"nowrap",flexShrink:0,children:[jsx(Layout,{accountName:"paycheck",variant:"cash",defaultDate:DateTime.fromObject({day:1,month:4}),title:"Income Per Check ($)"}),jsx(Layout,{title:"Merit Increase (%)",accountName:"meritIncreasePct",variant:"percent",defaultDate:dates.meritIncreaseDay}),jsx(Layout,{title:"Equity Increase (%)",accountName:"equityPct",variant:"percent",defaultDate:dates.meritIncreaseDay}),jsx(Layout,{title:"Merit Bonus (%)",accountName:"meritBonusPct",variant:"percent",defaultDate:dates.meritPayDay}),jsx(Layout,{title:"Merit Bonus ($)",accountName:"meritBonus",variant:"cash",defaultDate:dates.meritPayDay}),jsx(Layout,{title:"Company Bonus Factor (%)",accountName:"companyBonusPct",defaultDate:dates.junePayDay,variant:"percent"}),jsx(Layout,{title:"Company Bonus ($)",accountName:"companyBonus",defaultDate:dates.junePayDay,variant:"cash"}),jsx(Layout,{title:"Retirement Bonus ($)",accountName:"retirementBonus",defaultDate:dates.julyPayDay,variant:"cash"})]})})})]})},"ProjectedIncome"),getWealth=__name((date,accounts)=>Math.max(1,accounts.map(x=>{if(x.type==="account"){const entry=findNearstOnOrBefore(date,x.data);return(entry==null?void 0:entry.value)??0}else if(x.type==="mortgage"&&x.loan){const houseValue=findNearstOnOrBefore(date,x.data),balance=calcLoanBalance(date,x.loan);return calcEquity(x.loan.ownershipPct,houseValue==null?void 0:houseValue.value,balance,x.loan.principal)}}).reduce((acc,curr)=>acc+(curr??0),0)),"getWealth"),getEarliestEntry=__name(accounts=>DateTime.fromMillis(accounts.map(x=>x.type==="account"?DateTime.fromISO(x.data[0].date):DateTime.local()).reduce((acc,curr)=>Math.min(acc,(curr==null?void 0:curr.toMillis())??1/0),DateTime.local().toMillis())),"getEarliestEntry"),useYearlyWealth=__name((date,benchmarkDate)=>{const accounts=useStore(store,x=>Object.values(x.wealth));return reactExports.useMemo(()=>{if(getEarliestEntry(accounts).year>=date.year)return{date,benchmarkDate,wealth:0,yoyCash:0,yoyPercent:1};const currentDate=getWealth(date,accounts),benchmark=getWealth(benchmarkDate,accounts);return{date,benchmarkDate,wealth:currentDate,benchmarkWealth:benchmark,yoyCash:currentDate-benchmark,yoyPercent:currentDate/benchmark}},[accounts,benchmarkDate,date])},"useYearlyWealth"),ProjectedWealth=__name(()=>jsxs(Fragment,{children:[JSON.stringify(useYearlyWealth(DateTime.local(),DateTime.fromObject({year:2024})),null,2),jsx("br",{}),JSON.stringify(useYearlyWealth(DateTime.fromObject({year:2024}),DateTime.fromObject({year:2022})),null,2),jsx("br",{}),JSON.stringify(useYearlyWealth(DateTime.fromObject({year:2023}),DateTime.fromObject({year:2022})),null,2),jsx("br",{}),JSON.stringify(useYearlyWealth(DateTime.fromObject({year:2022}),DateTime.fromObject({year:2021})),null,2),jsx("br",{}),JSON.stringify(useYearlyWealth(DateTime.fromObject({year:2021}),DateTime.fromObject({year:2020})),null,2),jsx("br",{}),JSON.stringify(useYearlyWealth(DateTime.fromObject({year:2020}),DateTime.fromObject({year:2019})),null,2),jsx("br",{})]}),"ProjectedWealth"),SafetyButton=__name(props=>{const{inactiveLabel,activatingLabel,activeLabel,onConfirm,icon,variant,disabled,...rest}=props,[safetyState,setSafetyState]=reactExports.useState("inactive");return reactExports.useEffect(()=>{safetyState==="active"?setTimeout(()=>{setSafetyState(prev=>prev==="active"?"inactive":prev)},2e3):safetyState==="activating"&&setTimeout(()=>{setSafetyState("active")},2e3)},[safetyState]),jsx(Box,{sx:{minWidth:130,padding:safetyState==="active"?"8px":"unset"},children:jsxs(Button,{...rest,sx:{height:"100%",width:"100%"},disabled:disabled||safetyState==="activating",variant:safetyState==="active"?"contained":variant,size:"small",onClick:()=>{safetyState==="inactive"&&setSafetyState("activating"),safetyState==="active"&&(onConfirm==null||onConfirm())},children:[icon,safetyState==="inactive"&&inactiveLabel,safetyState==="activating"&&activatingLabel,safetyState==="active"&&activeLabel]})})},"SafetyButton"),useExport=__name(()=>{const storeData=useStore(store);return reactExports.useCallback(()=>{const data=JSON.stringify(storeData,null,2),link=document.createElement("a");link.download=`wealth-tracker-${DateTime.local().toFormat(shortDate)}.json`;const blob=new Blob([data],{type:"application/json"});link.href=window.URL.createObjectURL(blob),link.click()},[storeData])},"useExport");function selectFile(contentType){return new Promise(resolve=>{const input=document.createElement("input");input.type="file",input.multiple=!1,input.accept=contentType,input.onchange=()=>{const files=Array.from(input.files??[]);resolve(files[0])},input.click()})}__name(selectFile,"selectFile");const useImport=__name(()=>reactExports.useCallback(async()=>{const file=await selectFile("application/json"),reader=new FileReader;reader.readAsDataURL(file),reader.onload=readerEvent=>{var _a,_b;const content=(_b=(_a=readerEvent.target)==null?void 0:_a.result)==null?void 0:_b.toString();if(content){const data=JSON.parse(window.atob(content.split(",")[1]));storeValidator.safeParse(data).success&&store.setState(()=>data)}}},[]),"useImport"),App=__name(()=>{const[tab,setTab]=reactExports.useState("projected-income"),onExport=useExport(),onImport=useImport();return jsxs(Fragment,{children:[jsxs(Stack,{direction:"row",children:[jsxs(Tabs,{value:tab,onChange:(_,value)=>setTab(value),children:[jsx(Tab,{value:"wealth",label:"Total Wealth"}),jsx(Tab,{value:"projected-income",label:"Projected Income"}),jsx(Tab,{value:"projected-wealth",label:"Projected Wealth"})]}),jsxs(Box,{marginLeft:"auto",gap:2,display:"flex",children:[jsx(Button,{onClick:onImport,children:"Import"}),jsx(Button,{onClick:onExport,children:"Export"}),jsx(SafetyButton,{onConfirm:()=>{store.setState(()=>getDefaults())},inactiveLabel:"Reset",activatingLabel:"Wait",activeLabel:"Confirm",color:"error",icon:jsx(default_1,{})})]})]}),jsxs(Box,{padding:2,height:"95%",width:"100%",children:[tab==="wealth"&&jsx(NetWealth,{}),tab==="projected-income"&&jsx(ProjectedIncome,{}),tab==="projected-wealth"&&jsx(ProjectedWealth,{})]})]})},"App"),darkTheme=createTheme({palette:{mode:"dark"}});client.createRoot(document.getElementById("root")).render(jsx(React.StrictMode,{children:jsx(ErrorBoundary,{fallbackRender:props=>jsxs(Fragment,{children:[jsx("div",{style:{backgroundColor:"#FFF"},children:props.error.message}),jsx("div",{style:{backgroundColor:"#FFF"},children:props.error.stackTrace})]}),children:jsx(LocalizationProvider,{dateAdapter:AdapterLuxon,children:jsxs(ThemeProvider,{theme:darkTheme,children:[jsx(CssBaseline,{}),jsx(App,{})]})})})}));
//# sourceMappingURL=index-NoVlu5Ky.js.map
