{"version":3,"file":"react-transition-group-C3q6_IyI.js","sources":["../../node_modules/react-transition-group/esm/config.js","../../node_modules/react-transition-group/esm/TransitionGroupContext.js","../../node_modules/react-transition-group/esm/utils/reflow.js","../../node_modules/react-transition-group/esm/Transition.js","../../node_modules/react-transition-group/esm/CSSTransition.js","../../node_modules/react-transition-group/esm/utils/ChildMapping.js","../../node_modules/react-transition-group/esm/TransitionGroup.js"],"sourcesContent":["export default {\n  disabled: false\n};","import React from 'react';\nexport default React.createContext(null);","export var forceReflow = function forceReflow(node) {\n  return node.scrollTop;\n};","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport config from './config';\nimport { timeoutsShape } from './utils/PropTypes';\nimport TransitionGroupContext from './TransitionGroupContext';\nimport { forceReflow } from './utils/reflow';\nexport var UNMOUNTED = 'unmounted';\nexport var EXITED = 'exited';\nexport var ENTERING = 'entering';\nexport var ENTERED = 'entered';\nexport var EXITING = 'exiting';\n/**\n * The Transition component lets you describe a transition from one component\n * state to another _over time_ with a simple declarative API. Most commonly\n * it's used to animate the mounting and unmounting of a component, but can also\n * be used to describe in-place transition states as well.\n *\n * ---\n *\n * **Note**: `Transition` is a platform-agnostic base component. If you're using\n * transitions in CSS, you'll probably want to use\n * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)\n * instead. It inherits all the features of `Transition`, but contains\n * additional features necessary to play nice with CSS transitions (hence the\n * name of the component).\n *\n * ---\n *\n * By default the `Transition` component does not alter the behavior of the\n * component it renders, it only tracks \"enter\" and \"exit\" states for the\n * components. It's up to you to give meaning and effect to those states. For\n * example we can add styles to a component when it enters or exits:\n *\n * ```jsx\n * import { Transition } from 'react-transition-group';\n *\n * const duration = 300;\n *\n * const defaultStyle = {\n *   transition: `opacity ${duration}ms ease-in-out`,\n *   opacity: 0,\n * }\n *\n * const transitionStyles = {\n *   entering: { opacity: 1 },\n *   entered:  { opacity: 1 },\n *   exiting:  { opacity: 0 },\n *   exited:  { opacity: 0 },\n * };\n *\n * const Fade = ({ in: inProp }) => (\n *   <Transition in={inProp} timeout={duration}>\n *     {state => (\n *       <div style={{\n *         ...defaultStyle,\n *         ...transitionStyles[state]\n *       }}>\n *         I'm a fade Transition!\n *       </div>\n *     )}\n *   </Transition>\n * );\n * ```\n *\n * There are 4 main states a Transition can be in:\n *  - `'entering'`\n *  - `'entered'`\n *  - `'exiting'`\n *  - `'exited'`\n *\n * Transition state is toggled via the `in` prop. When `true` the component\n * begins the \"Enter\" stage. During this stage, the component will shift from\n * its current transition state, to `'entering'` for the duration of the\n * transition and then to the `'entered'` stage once it's complete. Let's take\n * the following example (we'll use the\n * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <Transition in={inProp} timeout={500}>\n *         {state => (\n *           // ...\n *         )}\n *       </Transition>\n *       <button onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the button is clicked the component will shift to the `'entering'` state\n * and stay there for 500ms (the value of `timeout`) before it finally switches\n * to `'entered'`.\n *\n * When `in` is `false` the same thing happens except the state moves from\n * `'exiting'` to `'exited'`.\n */\n\nvar Transition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Transition, _React$Component);\n\n  function Transition(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears\n\n    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;\n    var initialStatus;\n    _this.appearStatus = null;\n\n    if (props.in) {\n      if (appear) {\n        initialStatus = EXITED;\n        _this.appearStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else {\n      if (props.unmountOnExit || props.mountOnEnter) {\n        initialStatus = UNMOUNTED;\n      } else {\n        initialStatus = EXITED;\n      }\n    }\n\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n\n  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n    var nextIn = _ref.in;\n\n    if (nextIn && prevState.status === UNMOUNTED) {\n      return {\n        status: EXITED\n      };\n    }\n\n    return null;\n  } // getSnapshotBeforeUpdate(prevProps) {\n  //   let nextStatus = null\n  //   if (prevProps !== this.props) {\n  //     const { status } = this.state\n  //     if (this.props.in) {\n  //       if (status !== ENTERING && status !== ENTERED) {\n  //         nextStatus = ENTERING\n  //       }\n  //     } else {\n  //       if (status === ENTERING || status === ENTERED) {\n  //         nextStatus = EXITING\n  //       }\n  //     }\n  //   }\n  //   return { nextStatus }\n  // }\n  ;\n\n  var _proto = Transition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus(true, this.appearStatus);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var nextStatus = null;\n\n    if (prevProps !== this.props) {\n      var status = this.state.status;\n\n      if (this.props.in) {\n        if (status !== ENTERING && status !== ENTERED) {\n          nextStatus = ENTERING;\n        }\n      } else {\n        if (status === ENTERING || status === ENTERED) {\n          nextStatus = EXITING;\n        }\n      }\n    }\n\n    this.updateStatus(false, nextStatus);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.cancelNextCallback();\n  };\n\n  _proto.getTimeouts = function getTimeouts() {\n    var timeout = this.props.timeout;\n    var exit, enter, appear;\n    exit = enter = appear = timeout;\n\n    if (timeout != null && typeof timeout !== 'number') {\n      exit = timeout.exit;\n      enter = timeout.enter; // TODO: remove fallback for next major\n\n      appear = timeout.appear !== undefined ? timeout.appear : enter;\n    }\n\n    return {\n      exit: exit,\n      enter: enter,\n      appear: appear\n    };\n  };\n\n  _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n    if (mounting === void 0) {\n      mounting = false;\n    }\n\n    if (nextStatus !== null) {\n      // nextStatus will always be ENTERING or EXITING.\n      this.cancelNextCallback();\n\n      if (nextStatus === ENTERING) {\n        if (this.props.unmountOnExit || this.props.mountOnEnter) {\n          var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this); // https://github.com/reactjs/react-transition-group/pull/749\n          // With unmountOnExit or mountOnEnter, the enter animation should happen at the transition between `exited` and `entering`.\n          // To make the animation happen,  we have to separate each rendering and avoid being processed as batched.\n\n          if (node) forceReflow(node);\n        }\n\n        this.performEnter(mounting);\n      } else {\n        this.performExit();\n      }\n    } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n      this.setState({\n        status: UNMOUNTED\n      });\n    }\n  };\n\n  _proto.performEnter = function performEnter(mounting) {\n    var _this2 = this;\n\n    var enter = this.props.enter;\n    var appearing = this.context ? this.context.isMounting : mounting;\n\n    var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing],\n        maybeNode = _ref2[0],\n        maybeAppearing = _ref2[1];\n\n    var timeouts = this.getTimeouts();\n    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED\n    // if we are mounting and running this it means appear _must_ be set\n\n    if (!mounting && !enter || config.disabled) {\n      this.safeSetState({\n        status: ENTERED\n      }, function () {\n        _this2.props.onEntered(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onEnter(maybeNode, maybeAppearing);\n    this.safeSetState({\n      status: ENTERING\n    }, function () {\n      _this2.props.onEntering(maybeNode, maybeAppearing);\n\n      _this2.onTransitionEnd(enterTimeout, function () {\n        _this2.safeSetState({\n          status: ENTERED\n        }, function () {\n          _this2.props.onEntered(maybeNode, maybeAppearing);\n        });\n      });\n    });\n  };\n\n  _proto.performExit = function performExit() {\n    var _this3 = this;\n\n    var exit = this.props.exit;\n    var timeouts = this.getTimeouts();\n    var maybeNode = this.props.nodeRef ? undefined : ReactDOM.findDOMNode(this); // no exit animation skip right to EXITED\n\n    if (!exit || config.disabled) {\n      this.safeSetState({\n        status: EXITED\n      }, function () {\n        _this3.props.onExited(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onExit(maybeNode);\n    this.safeSetState({\n      status: EXITING\n    }, function () {\n      _this3.props.onExiting(maybeNode);\n\n      _this3.onTransitionEnd(timeouts.exit, function () {\n        _this3.safeSetState({\n          status: EXITED\n        }, function () {\n          _this3.props.onExited(maybeNode);\n        });\n      });\n    });\n  };\n\n  _proto.cancelNextCallback = function cancelNextCallback() {\n    if (this.nextCallback !== null) {\n      this.nextCallback.cancel();\n      this.nextCallback = null;\n    }\n  };\n\n  _proto.safeSetState = function safeSetState(nextState, callback) {\n    // This shouldn't be necessary, but there are weird race conditions with\n    // setState callbacks and unmounting in testing, so always make sure that\n    // we can cancel any pending setState callbacks after we unmount.\n    callback = this.setNextCallback(callback);\n    this.setState(nextState, callback);\n  };\n\n  _proto.setNextCallback = function setNextCallback(callback) {\n    var _this4 = this;\n\n    var active = true;\n\n    this.nextCallback = function (event) {\n      if (active) {\n        active = false;\n        _this4.nextCallback = null;\n        callback(event);\n      }\n    };\n\n    this.nextCallback.cancel = function () {\n      active = false;\n    };\n\n    return this.nextCallback;\n  };\n\n  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {\n    this.setNextCallback(handler);\n    var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);\n    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;\n\n    if (!node || doesNotHaveTimeoutOrListener) {\n      setTimeout(this.nextCallback, 0);\n      return;\n    }\n\n    if (this.props.addEndListener) {\n      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],\n          maybeNode = _ref3[0],\n          maybeNextCallback = _ref3[1];\n\n      this.props.addEndListener(maybeNode, maybeNextCallback);\n    }\n\n    if (timeout != null) {\n      setTimeout(this.nextCallback, timeout);\n    }\n  };\n\n  _proto.render = function render() {\n    var status = this.state.status;\n\n    if (status === UNMOUNTED) {\n      return null;\n    }\n\n    var _this$props = this.props,\n        children = _this$props.children,\n        _in = _this$props.in,\n        _mountOnEnter = _this$props.mountOnEnter,\n        _unmountOnExit = _this$props.unmountOnExit,\n        _appear = _this$props.appear,\n        _enter = _this$props.enter,\n        _exit = _this$props.exit,\n        _timeout = _this$props.timeout,\n        _addEndListener = _this$props.addEndListener,\n        _onEnter = _this$props.onEnter,\n        _onEntering = _this$props.onEntering,\n        _onEntered = _this$props.onEntered,\n        _onExit = _this$props.onExit,\n        _onExiting = _this$props.onExiting,\n        _onExited = _this$props.onExited,\n        _nodeRef = _this$props.nodeRef,\n        childProps = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"in\", \"mountOnEnter\", \"unmountOnExit\", \"appear\", \"enter\", \"exit\", \"timeout\", \"addEndListener\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"nodeRef\"]);\n\n    return (\n      /*#__PURE__*/\n      // allows for nested Transitions\n      React.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, typeof children === 'function' ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))\n    );\n  };\n\n  return Transition;\n}(React.Component);\n\nTransition.contextType = TransitionGroupContext;\nTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * A React reference to DOM element that need to transition:\n   * https://stackoverflow.com/a/51127130/4671932\n   *\n   *   - When `nodeRef` prop is used, `node` is not passed to callback functions\n   *      (e.g. `onEnter`) because user already has direct access to the node.\n   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new\n   *     `nodeRef` need to be provided to `Transition` with changed `key` prop\n   *     (see\n   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).\n   */\n  nodeRef: PropTypes.shape({\n    current: typeof Element === 'undefined' ? PropTypes.any : function (propValue, key, componentName, location, propFullName, secret) {\n      var value = propValue[key];\n      return PropTypes.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);\n    }\n  }),\n\n  /**\n   * A `function` child can be used instead of a React element. This function is\n   * called with the current transition status (`'entering'`, `'entered'`,\n   * `'exiting'`, `'exited'`), which can be used to apply context\n   * specific props to a component.\n   *\n   * ```jsx\n   * <Transition in={this.state.in} timeout={150}>\n   *   {state => (\n   *     <MyComponent className={`fade fade-${state}`} />\n   *   )}\n   * </Transition>\n   * ```\n   */\n  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,\n\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in: PropTypes.bool,\n\n  /**\n   * By default the child component is mounted immediately along with\n   * the parent `Transition` component. If you want to \"lazy mount\" the component on the\n   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay\n   * mounted, even on \"exited\", unless you also specify `unmountOnExit`.\n   */\n  mountOnEnter: PropTypes.bool,\n\n  /**\n   * By default the child component stays mounted after it reaches the `'exited'` state.\n   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.\n   */\n  unmountOnExit: PropTypes.bool,\n\n  /**\n   * By default the child component does not perform the enter transition when\n   * it first mounts, regardless of the value of `in`. If you want this\n   * behavior, set both `appear` and `in` to `true`.\n   *\n   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop\n   * > only adds an additional enter transition. However, in the\n   * > `<CSSTransition>` component that first enter transition does result in\n   * > additional `.appear-*` classes, that way you can choose to style it\n   * > differently.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * Enable or disable enter transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * Enable or disable exit transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * The duration of the transition, in milliseconds.\n   * Required unless `addEndListener` is provided.\n   *\n   * You may specify a single timeout for all transitions:\n   *\n   * ```jsx\n   * timeout={500}\n   * ```\n   *\n   * or individually:\n   *\n   * ```jsx\n   * timeout={{\n   *  appear: 500,\n   *  enter: 300,\n   *  exit: 500,\n   * }}\n   * ```\n   *\n   * - `appear` defaults to the value of `enter`\n   * - `enter` defaults to `0`\n   * - `exit` defaults to `0`\n   *\n   * @type {number | { enter?: number, exit?: number, appear?: number }}\n   */\n  timeout: function timeout(props) {\n    var pt = timeoutsShape;\n    if (!props.addEndListener) pt = pt.isRequired;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return pt.apply(void 0, [props].concat(args));\n  },\n\n  /**\n   * Add a custom transition end trigger. Called with the transitioning\n   * DOM node and a `done` callback. Allows for more fine grained transition end\n   * logic. Timeouts are still used as a fallback if provided.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * ```jsx\n   * addEndListener={(node, done) => {\n   *   // use the css transitionend event to mark the finish of a transition\n   *   node.addEventListener('transitionend', done, false);\n   * }}\n   * ```\n   */\n  addEndListener: PropTypes.func,\n\n  /**\n   * Callback fired before the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entered\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExited: PropTypes.func\n} : {}; // Name the function so it is clearer in the documentation\n\nfunction noop() {}\n\nTransition.defaultProps = {\n  in: false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\nTransition.UNMOUNTED = UNMOUNTED;\nTransition.EXITED = EXITED;\nTransition.ENTERING = ENTERING;\nTransition.ENTERED = ENTERED;\nTransition.EXITING = EXITING;\nexport default Transition;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport addOneClass from 'dom-helpers/addClass';\nimport removeOneClass from 'dom-helpers/removeClass';\nimport React from 'react';\nimport Transition from './Transition';\nimport { classNamesShape } from './utils/PropTypes';\nimport { forceReflow } from './utils/reflow';\n\nvar _addClass = function addClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return addOneClass(node, c);\n  });\n};\n\nvar removeClass = function removeClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return removeOneClass(node, c);\n  });\n};\n/**\n * A transition component inspired by the excellent\n * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should\n * use it if you're using CSS transitions or animations. It's built upon the\n * [`Transition`](https://reactcommunity.org/react-transition-group/transition)\n * component, so it inherits all of its props.\n *\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\n * and `exit` states of the transition. The first class is applied and then a\n * second `*-active` class in order to activate the CSS transition. After the\n * transition, matching `*-done` class names are applied to persist the\n * transition state.\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <CSSTransition in={inProp} timeout={200} classNames=\"my-node\">\n *         <div>\n *           {\"I'll receive my-node-* classes\"}\n *         </div>\n *       </CSSTransition>\n *       <button type=\"button\" onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the `in` prop is set to `true`, the child component will first receive\n * the class `example-enter`, then the `example-enter-active` will be added in\n * the next tick. `CSSTransition` [forces a\n * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\n * between before adding the `example-enter-active`. This is an important trick\n * because it allows us to transition between `example-enter` and\n * `example-enter-active` even though they were added immediately one after\n * another. Most notably, this is what makes it possible for us to animate\n * _appearance_.\n *\n * ```css\n * .my-node-enter {\n *   opacity: 0;\n * }\n * .my-node-enter-active {\n *   opacity: 1;\n *   transition: opacity 200ms;\n * }\n * .my-node-exit {\n *   opacity: 1;\n * }\n * .my-node-exit-active {\n *   opacity: 0;\n *   transition: opacity 200ms;\n * }\n * ```\n *\n * `*-active` classes represent which styles you want to animate **to**, so it's\n * important to add `transition` declaration only to them, otherwise transitions\n * might not behave as intended! This might not be obvious when the transitions\n * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in\n * the example above (minus `transition`), but it becomes apparent in more\n * complex transitions.\n *\n * **Note**: If you're using the\n * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)\n * prop, make sure to define styles for `.appear-*` classes as well.\n */\n\n\nvar CSSTransition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(CSSTransition, _React$Component);\n\n  function CSSTransition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.appliedClasses = {\n      appear: {},\n      enter: {},\n      exit: {}\n    };\n\n    _this.onEnter = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument[0],\n          appearing = _this$resolveArgument[1];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');\n\n      if (_this.props.onEnter) {\n        _this.props.onEnter(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntering = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument2[0],\n          appearing = _this$resolveArgument2[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.addClass(node, type, 'active');\n\n      if (_this.props.onEntering) {\n        _this.props.onEntering(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntered = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument3[0],\n          appearing = _this$resolveArgument3[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.removeClasses(node, type);\n\n      _this.addClass(node, type, 'done');\n\n      if (_this.props.onEntered) {\n        _this.props.onEntered(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onExit = function (maybeNode) {\n      var _this$resolveArgument4 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument4[0];\n\n      _this.removeClasses(node, 'appear');\n\n      _this.removeClasses(node, 'enter');\n\n      _this.addClass(node, 'exit', 'base');\n\n      if (_this.props.onExit) {\n        _this.props.onExit(maybeNode);\n      }\n    };\n\n    _this.onExiting = function (maybeNode) {\n      var _this$resolveArgument5 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument5[0];\n\n      _this.addClass(node, 'exit', 'active');\n\n      if (_this.props.onExiting) {\n        _this.props.onExiting(maybeNode);\n      }\n    };\n\n    _this.onExited = function (maybeNode) {\n      var _this$resolveArgument6 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument6[0];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, 'exit', 'done');\n\n      if (_this.props.onExited) {\n        _this.props.onExited(maybeNode);\n      }\n    };\n\n    _this.resolveArguments = function (maybeNode, maybeAppearing) {\n      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`\n      : [maybeNode, maybeAppearing];\n    };\n\n    _this.getClassNames = function (type) {\n      var classNames = _this.props.classNames;\n      var isStringClassNames = typeof classNames === 'string';\n      var prefix = isStringClassNames && classNames ? classNames + \"-\" : '';\n      var baseClassName = isStringClassNames ? \"\" + prefix + type : classNames[type];\n      var activeClassName = isStringClassNames ? baseClassName + \"-active\" : classNames[type + \"Active\"];\n      var doneClassName = isStringClassNames ? baseClassName + \"-done\" : classNames[type + \"Done\"];\n      return {\n        baseClassName: baseClassName,\n        activeClassName: activeClassName,\n        doneClassName: doneClassName\n      };\n    };\n\n    return _this;\n  }\n\n  var _proto = CSSTransition.prototype;\n\n  _proto.addClass = function addClass(node, type, phase) {\n    var className = this.getClassNames(type)[phase + \"ClassName\"];\n\n    var _this$getClassNames = this.getClassNames('enter'),\n        doneClassName = _this$getClassNames.doneClassName;\n\n    if (type === 'appear' && phase === 'done' && doneClassName) {\n      className += \" \" + doneClassName;\n    } // This is to force a repaint,\n    // which is necessary in order to transition styles when adding a class name.\n\n\n    if (phase === 'active') {\n      if (node) forceReflow(node);\n    }\n\n    if (className) {\n      this.appliedClasses[type][phase] = className;\n\n      _addClass(node, className);\n    }\n  };\n\n  _proto.removeClasses = function removeClasses(node, type) {\n    var _this$appliedClasses$ = this.appliedClasses[type],\n        baseClassName = _this$appliedClasses$.base,\n        activeClassName = _this$appliedClasses$.active,\n        doneClassName = _this$appliedClasses$.done;\n    this.appliedClasses[type] = {};\n\n    if (baseClassName) {\n      removeClass(node, baseClassName);\n    }\n\n    if (activeClassName) {\n      removeClass(node, activeClassName);\n    }\n\n    if (doneClassName) {\n      removeClass(node, doneClassName);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _ = _this$props.classNames,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"classNames\"]);\n\n    return /*#__PURE__*/React.createElement(Transition, _extends({}, props, {\n      onEnter: this.onEnter,\n      onEntered: this.onEntered,\n      onEntering: this.onEntering,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }));\n  };\n\n  return CSSTransition;\n}(React.Component);\n\nCSSTransition.defaultProps = {\n  classNames: ''\n};\nCSSTransition.propTypes = process.env.NODE_ENV !== \"production\" ? _extends({}, Transition.propTypes, {\n  /**\n   * The animation classNames applied to the component as it appears, enters,\n   * exits or has finished the transition. A single name can be provided, which\n   * will be suffixed for each stage, e.g. `classNames=\"fade\"` applies:\n   *\n   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`\n   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`\n   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`\n   *\n   * A few details to note about how these classes are applied:\n   *\n   * 1. They are _joined_ with the ones that are already defined on the child\n   *    component, so if you want to add some base styles, you can use\n   *    `className` without worrying that it will be overridden.\n   *\n   * 2. If the transition component mounts with `in={false}`, no classes are\n   *    applied yet. You might be expecting `*-exit-done`, but if you think\n   *    about it, a component cannot finish exiting if it hasn't entered yet.\n   *\n   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This\n   *    allows you to define different behavior for when appearing is done and\n   *    when regular entering is done, using selectors like\n   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply\n   *    an epic entrance animation when element first appears in the DOM using\n   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can\n   *    simply use `fade-enter-done` for defining both cases.\n   *\n   * Each individual classNames can also be specified independently like:\n   *\n   * ```js\n   * classNames={{\n   *  appear: 'my-appear',\n   *  appearActive: 'my-active-appear',\n   *  appearDone: 'my-done-appear',\n   *  enter: 'my-enter',\n   *  enterActive: 'my-active-enter',\n   *  enterDone: 'my-done-enter',\n   *  exit: 'my-exit',\n   *  exitActive: 'my-active-exit',\n   *  exitDone: 'my-done-exit',\n   * }}\n   * ```\n   *\n   * If you want to set these classes using CSS Modules:\n   *\n   * ```js\n   * import styles from './styles.css';\n   * ```\n   *\n   * you might want to use camelCase in your CSS file, that way could simply\n   * spread them instead of listing them one by one:\n   *\n   * ```js\n   * classNames={{ ...styles }}\n   * ```\n   *\n   * @type {string | {\n   *  appear?: string,\n   *  appearActive?: string,\n   *  appearDone?: string,\n   *  enter?: string,\n   *  enterActive?: string,\n   *  enterDone?: string,\n   *  exit?: string,\n   *  exitActive?: string,\n   *  exitDone?: string,\n   * }}\n   */\n  classNames: classNamesShape,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter-active' or\n   * 'appear-active' class is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or\n   * 'appear' classes are **removed** and the `done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' classes\n   * are **removed** and the `exit-done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExited: PropTypes.func\n}) : {};\nexport default CSSTransition;","import { Children, cloneElement, isValidElement } from 'react';\n/**\n * Given `this.props.children`, return an object mapping key to child.\n *\n * @param {*} children `this.props.children`\n * @return {object} Mapping of key to child\n */\n\nexport function getChildMapping(children, mapFn) {\n  var mapper = function mapper(child) {\n    return mapFn && isValidElement(child) ? mapFn(child) : child;\n  };\n\n  var result = Object.create(null);\n  if (children) Children.map(children, function (c) {\n    return c;\n  }).forEach(function (child) {\n    // run the map function here instead so that the key is the computed one\n    result[child.key] = mapper(child);\n  });\n  return result;\n}\n/**\n * When you're adding or removing children some may be added or removed in the\n * same render pass. We want to show *both* since we want to simultaneously\n * animate elements in and out. This function takes a previous set of keys\n * and a new set of keys and merges them with its best guess of the correct\n * ordering. In the future we may expose some of the utilities in\n * ReactMultiChild to make this easy, but for now React itself does not\n * directly have this concept of the union of prevChildren and nextChildren\n * so we implement it here.\n *\n * @param {object} prev prev children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @param {object} next next children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @return {object} a key set that contains all keys in `prev` and all keys\n * in `next` in a reasonable order.\n */\n\nexport function mergeChildMappings(prev, next) {\n  prev = prev || {};\n  next = next || {};\n\n  function getValueForKey(key) {\n    return key in next ? next[key] : prev[key];\n  } // For each key of `next`, the list of keys to insert before that key in\n  // the combined list\n\n\n  var nextKeysPending = Object.create(null);\n  var pendingKeys = [];\n\n  for (var prevKey in prev) {\n    if (prevKey in next) {\n      if (pendingKeys.length) {\n        nextKeysPending[prevKey] = pendingKeys;\n        pendingKeys = [];\n      }\n    } else {\n      pendingKeys.push(prevKey);\n    }\n  }\n\n  var i;\n  var childMapping = {};\n\n  for (var nextKey in next) {\n    if (nextKeysPending[nextKey]) {\n      for (i = 0; i < nextKeysPending[nextKey].length; i++) {\n        var pendingNextKey = nextKeysPending[nextKey][i];\n        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);\n      }\n    }\n\n    childMapping[nextKey] = getValueForKey(nextKey);\n  } // Finally, add the keys which didn't appear before any key in `next`\n\n\n  for (i = 0; i < pendingKeys.length; i++) {\n    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);\n  }\n\n  return childMapping;\n}\n\nfunction getProp(child, prop, props) {\n  return props[prop] != null ? props[prop] : child.props[prop];\n}\n\nexport function getInitialChildMapping(props, onExited) {\n  return getChildMapping(props.children, function (child) {\n    return cloneElement(child, {\n      onExited: onExited.bind(null, child),\n      in: true,\n      appear: getProp(child, 'appear', props),\n      enter: getProp(child, 'enter', props),\n      exit: getProp(child, 'exit', props)\n    });\n  });\n}\nexport function getNextChildMapping(nextProps, prevChildMapping, onExited) {\n  var nextChildMapping = getChildMapping(nextProps.children);\n  var children = mergeChildMappings(prevChildMapping, nextChildMapping);\n  Object.keys(children).forEach(function (key) {\n    var child = children[key];\n    if (!isValidElement(child)) return;\n    var hasPrev = (key in prevChildMapping);\n    var hasNext = (key in nextChildMapping);\n    var prevChild = prevChildMapping[key];\n    var isLeaving = isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)\n\n    if (hasNext && (!hasPrev || isLeaving)) {\n      // console.log('entering', key)\n      children[key] = cloneElement(child, {\n        onExited: onExited.bind(null, child),\n        in: true,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    } else if (!hasNext && hasPrev && !isLeaving) {\n      // item is old (exiting)\n      // console.log('leaving', key)\n      children[key] = cloneElement(child, {\n        in: false\n      });\n    } else if (hasNext && hasPrev && isValidElement(prevChild)) {\n      // item hasn't changed transition states\n      // copy over the last transition props;\n      // console.log('unchanged', key)\n      children[key] = cloneElement(child, {\n        onExited: onExited.bind(null, child),\n        in: prevChild.props.in,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    }\n  });\n  return children;\n}","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport TransitionGroupContext from './TransitionGroupContext';\nimport { getChildMapping, getInitialChildMapping, getNextChildMapping } from './utils/ChildMapping';\n\nvar values = Object.values || function (obj) {\n  return Object.keys(obj).map(function (k) {\n    return obj[k];\n  });\n};\n\nvar defaultProps = {\n  component: 'div',\n  childFactory: function childFactory(child) {\n    return child;\n  }\n};\n/**\n * The `<TransitionGroup>` component manages a set of transition components\n * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition\n * components, `<TransitionGroup>` is a state machine for managing the mounting\n * and unmounting of components over time.\n *\n * Consider the example below. As items are removed or added to the TodoList the\n * `in` prop is toggled automatically by the `<TransitionGroup>`.\n *\n * Note that `<TransitionGroup>`  does not define any animation behavior!\n * Exactly _how_ a list item animates is up to the individual transition\n * component. This means you can mix and match animations across different list\n * items.\n */\n\nvar TransitionGroup = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(TransitionGroup, _React$Component);\n\n  function TransitionGroup(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n\n    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear\n\n\n    _this.state = {\n      contextValue: {\n        isMounting: true\n      },\n      handleExited: handleExited,\n      firstRender: true\n    };\n    return _this;\n  }\n\n  var _proto = TransitionGroup.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.mounted = true;\n    this.setState({\n      contextValue: {\n        isMounting: false\n      }\n    });\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.mounted = false;\n  };\n\n  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {\n    var prevChildMapping = _ref.children,\n        handleExited = _ref.handleExited,\n        firstRender = _ref.firstRender;\n    return {\n      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),\n      firstRender: false\n    };\n  } // node is `undefined` when user provided `nodeRef` prop\n  ;\n\n  _proto.handleExited = function handleExited(child, node) {\n    var currentChildMapping = getChildMapping(this.props.children);\n    if (child.key in currentChildMapping) return;\n\n    if (child.props.onExited) {\n      child.props.onExited(node);\n    }\n\n    if (this.mounted) {\n      this.setState(function (state) {\n        var children = _extends({}, state.children);\n\n        delete children[child.key];\n        return {\n          children: children\n        };\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        Component = _this$props.component,\n        childFactory = _this$props.childFactory,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"component\", \"childFactory\"]);\n\n    var contextValue = this.state.contextValue;\n    var children = values(this.state.children).map(childFactory);\n    delete props.appear;\n    delete props.enter;\n    delete props.exit;\n\n    if (Component === null) {\n      return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {\n        value: contextValue\n      }, children);\n    }\n\n    return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {\n      value: contextValue\n    }, /*#__PURE__*/React.createElement(Component, props, children));\n  };\n\n  return TransitionGroup;\n}(React.Component);\n\nTransitionGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * `<TransitionGroup>` renders a `<div>` by default. You can change this\n   * behavior by providing a `component` prop.\n   * If you use React v16+ and would like to avoid a wrapping `<div>` element\n   * you can pass in `component={null}`. This is useful if the wrapping div\n   * borks your css styles.\n   */\n  component: PropTypes.any,\n\n  /**\n   * A set of `<Transition>` components, that are toggled `in` and out as they\n   * leave. the `<TransitionGroup>` will inject specific transition props, so\n   * remember to spread them through if you are wrapping the `<Transition>` as\n   * with our `<Fade>` example.\n   *\n   * While this component is meant for multiple `Transition` or `CSSTransition`\n   * children, sometimes you may want to have a single transition child with\n   * content that you want to be transitioned out and in when you change it\n   * (e.g. routes, images etc.) In that case you can change the `key` prop of\n   * the transition child as you change its content, this will cause\n   * `TransitionGroup` to transition the child out and back in.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A convenience prop that enables or disables appear animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * A convenience prop that enables or disables enter animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * A convenience prop that enables or disables exit animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * You may need to apply reactive updates to a child as it is exiting.\n   * This is generally done by using `cloneElement` however in the case of an exiting\n   * child the element has already been removed and not accessible to the consumer.\n   *\n   * If you do need to update a child as it leaves you can provide a `childFactory`\n   * to wrap every child, even the ones that are leaving.\n   *\n   * @type Function(child: ReactElement) -> ReactElement\n   */\n  childFactory: PropTypes.func\n} : {};\nTransitionGroup.defaultProps = defaultProps;\nexport default TransitionGroup;"],"names":["Transition","timeout","addOneClass","removeOneClass","CSSTransition","isValidElement","Children","cloneElement","TransitionGroup","childFactory"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6]}