{"version":3,"file":"index-BSU8BspK.js","sources":["../../src/shared/models/account-data.ts","../../src/shared/models/account.ts","../../src/shared/models/loan.ts","../../src/shared/models/mortgage.ts","../../src/shared/models/net-wealth.ts","../../src/shared/models/projected-wealth.ts","../../src/shared/models/store.ts","../../src/shared/store.ts","../../src/shared/utility/format-cash.ts","../../src/shared/utility/get-graph-dates.ts","../../src/shared/utility/find-nearest-on-or-before.ts","../../src/shared/utility/mortgage-calc.ts","../../src/shared/utility/get-graph-value.ts","../../src/capabilities/net-wealth/components/wealth-chart/use-graph-data.ts","../../src/capabilities/net-wealth/components/wealth-chart/wealth-chart.tsx","../../src/capabilities/net-wealth/components/new-account/new-account.tsx","../../src/shared/components/ag-grid/ag-grid.tsx","../../src/shared/utility/format-date.ts","../../src/shared/utility/sort-by-date.ts","../../src/capabilities/net-wealth/components/tab-types/components/delete-account.tsx","../../src/capabilities/net-wealth/components/tab-types/components/update-account.tsx","../../src/capabilities/net-wealth/components/tab-types/account/column-config.tsx","../../src/capabilities/net-wealth/components/tab-types/account/hooks/useMissingYears.ts","../../src/capabilities/net-wealth/components/tab-types/account/account.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/add-entry.tsx","../../src/shared/utility/group-by.ts","../../src/capabilities/net-wealth/components/tab-types/mortgage/add-loan.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/column-config.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/mortgage.tsx","../../src/capabilities/net-wealth/components/account-tabs/account-tabs.tsx","../../src/capabilities/net-wealth/net-wealth.tsx","../../src/shared/hooks/use-dates.ts","../../src/shared/utility/min-max-avg.ts","../../src/shared/components/formatters/cash.tsx","../../src/shared/components/formatters/duration.tsx","../../src/shared/utility/format-percent.ts","../../src/shared/components/formatters/percent.tsx","../../src/capabilities/projected-income/components/value.tsx","../../src/capabilities/projected-income/components/bonus-outcome.tsx","../../src/capabilities/projected-income/components/data-entry/column-config.tsx","../../src/capabilities/projected-income/components/data-entry/data-entry.tsx","../../src/shared/components/formatters/until.tsx","../../src/shared/utility/find-same-year.ts","../../src/shared/utility/date-ranges-overlap.ts","../../src/shared/utility/get-pay-periods.ts","../../src/capabilities/projected-income/hooks/use-most-frequent-value.ts","../../src/capabilities/projected-income/hooks/use-projected-pay.ts","../../src/capabilities/projected-income/hooks/use-base-income.ts","../../src/capabilities/projected-income/hooks/use-pay-check.ts","../../src/capabilities/projected-income/components/income-per-period.tsx","../../src/capabilities/projected-income/components/merit-increase.tsx","../../src/capabilities/projected-income/components/outcome.tsx","../../src/capabilities/projected-income/hooks/use-company-bonus.ts","../../src/capabilities/projected-income/hooks/use-merit-bonus.ts","../../src/capabilities/projected-income/hooks/use-retirement-bonus.ts","../../src/capabilities/projected-income/projected-income.tsx","../../src/capabilities/projected-wealth/hooks/use-yearly-wealth.ts","../../src/capabilities/projected-wealth/projected-wealth.tsx","../../src/shared/components/safety-button/safety-button.tsx","../../src/shared/hooks/use-export.tsx","../../src/shared/hooks/use-import.tsx","../../src/app/app.tsx","../../src/main.tsx"],"sourcesContent":["import { z } from \"zod\";\n\nexport const accountDataValidator = z.object({\n  date: z.string(),\n  value: z.number(),\n  id: z.string(),\n});\n\nexport type AccountData = z.infer<typeof accountDataValidator>;\n\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n\n","import { z } from \"zod\";\n\nexport const loanValidator = z.object({\n  principal: z.number(),\n  ratePct: z.number(),\n  paymentsPerYear: z.number(),\n  payment: z.number(),\n  firstPaymentDate: z.string(),\n  ownershipPct: z.number(),\n});\n\nexport type Loan = z.infer<typeof loanValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\nimport { loanValidator } from \"./loan\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const projectedWealth = z.object({\n  timeSeries: z.object({\n    paycheck: z.array(accountDataValidator),\n    retirementRate: z.array(accountDataValidator),\n    savingsRate: z.array(accountDataValidator),\n    meritBonusPct: z.array(accountDataValidator),\n    companyBonusPct: z.array(accountDataValidator),\n    meritBonus: z.array(accountDataValidator),\n    companyBonus: z.array(accountDataValidator),\n    retirementBonus: z.array(accountDataValidator),\n    equityPct: z.array(accountDataValidator),\n    meritIncreasePct: z.array(accountDataValidator),\n  }),\n});\n\nexport const getDefaults = () => ({\n  projectedIncome: {\n    timeSeries: {\n      paycheck: [],\n      retirementRate: [],\n      savingsRate: [],\n      meritBonusPct: [],\n      companyBonusPct: [],\n      meritBonus: [],\n      companyBonus: [],\n      retirementBonus: [],\n      equityPct: [],\n      meritIncreasePct: [],\n    },\n  },\n  wealth: {},\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type TimeSeries = keyof ProjectedWealth[\"timeSeries\"];\n","import { z } from \"zod\";\nimport { wealth } from \"./net-wealth\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  wealth: wealth,\n  projectedIncome: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { Store as CreateStore } from \"@tanstack/store\";\nimport merge from \"deepmerge\";\nimport { ZodSchema } from \"zod\";\nimport { Store, storeValidator } from \"./models/store\";\n\nconst createStore = <T extends object>(\n  key: string,\n  validator: ZodSchema,\n  defaultValue: T\n) => {\n  const localData = localStorage.getItem(key);\n  let data = localData ? JSON.parse(localData) : defaultValue;\n  const parse = validator.safeParse(data);\n\n  if (!parse.success) {\n    console.log(\"zod error\", parse.error);\n    console.log(\"original\", data);\n\n    const next = merge(data, defaultValue);\n    console.log(\"merged\", next);\n    localStorage.setItem(`${key}-previous`, JSON.stringify(data));\n    localStorage.setItem(key, JSON.stringify(next));\n    data = next;\n  }\n\n  const store = new CreateStore<T>(data);\n  store.subscribe(() => {\n    const current = localStorage.getItem(key);\n    current && localStorage.setItem(`${key}-previous`, current);\n    localStorage.setItem(key, JSON.stringify(store.state));\n  });\n\n  return store;\n};\n\nexport const store = createStore<Store>(\"store\", storeValidator, {\n  projectedIncome: {\n    timeSeries: {\n      paycheck: [],\n      retirementRate: [],\n      savingsRate: [],\n      meritBonusPct: [],\n      companyBonusPct: [],\n      meritBonus: [],\n      companyBonus: [],\n      retirementBonus: [],\n      equityPct: [],\n      meritIncreasePct: [],\n    },\n  },\n  wealth: {},\n});\n","export const formatCashShort = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  notation: \"compact\",\n  maximumFractionDigits: 0,\n}).format;\n\nexport const formatCash = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 0,\n}).format;\n","import { DateTime } from \"luxon\";\nimport { Account } from \"shared/models/account\";\nimport { Mortgage } from \"shared/models/mortgage\";\n\nexport const getGraphDates = (accounts: (Account | Mortgage)[]) => {\n  return [\n    ...new Set(\n      accounts.flatMap((x) => {\n        return x.data.map((x) =>\n          DateTime.fromISO(x.date).startOf(\"day\").toISO()\n        );\n      })\n    ),\n  ]\n    .map((x) => DateTime.fromISO(x!))\n    .sort((a, b) => a.toMillis() - b.toMillis()) as DateTime<true>[];\n};\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/account-data\";\n\nexport const findNearestOnOrBefore = (date: DateTime, data: AccountData[]) => {\n  return data.find((x, idx, array) => {\n    if (idx == 0 && DateTime.fromISO(x.date).startOf(\"day\") >= date) {\n      return true;\n    }\n\n    if (\n      idx < array.length - 1 &&\n      DateTime.fromISO(x.date).startOf(\"day\") <= date &&\n      DateTime.fromISO(data[idx + 1].date).startOf(\"day\") > date\n    ) {\n      return true;\n    }\n\n    if (idx === array.length - 1) {\n      return true;\n    }\n  });\n};\n","import { DateTime } from \"luxon\";\nimport { Loan } from \"shared/models/loan\";\n\nexport const calcLoanBalance = (date: DateTime, loan: Loan) => {\n  const {\n    firstPaymentDate,\n    paymentsPerYear,\n    principal: pricipal,\n    ratePct: rate,\n    payment: monthlyPayment,\n  } = loan;\n  const anualizedRate = rate / paymentsPerYear;\n  const periods = date.diff(\n    DateTime.fromISO(firstPaymentDate),\n    \"months\"\n  ).months;\n  const totalRate = (1 + anualizedRate) ** periods;\n  const balance =\n    pricipal * totalRate - (monthlyPayment / anualizedRate) * (totalRate - 1);\n\n  return balance;\n};\n\nexport const calcEquity = (\n  ownershipPct: number,\n  houseValue: number | undefined,\n  loanBalance: number,\n  principal: number\n) => {\n  return houseValue\n    ? houseValue * ownershipPct - loanBalance\n    : principal - loanBalance;\n};\n","import { DateTime } from \"luxon\";\nimport { Account } from \"shared/models/account\";\nimport { Mortgage } from \"shared/models/mortgage\";\nimport { findNearestOnOrBefore } from \"./find-nearest-on-or-before\";\nimport { calcEquity, calcLoanBalance } from \"./mortgage-calc\";\n\nconst getMortgageValue = (date: DateTime, mortgage: Mortgage) => {\n  if (!mortgage.loan) {\n    return 0;\n  }\n  const entry = findNearestOnOrBefore(date, mortgage.data);\n  if (\n    entry?.date &&\n    mortgage.data[0] === entry &&\n    DateTime.fromISO(entry.date).startOf(\"day\") > date\n  ) {\n    return 0;\n  }\n  const { ownershipPct, principal } = mortgage.loan;\n  const balance = calcLoanBalance(date, mortgage.loan);\n  return calcEquity(ownershipPct, entry?.value, balance, principal);\n};\n\nconst getAccountValue = (date: DateTime, account: Account) => {\n  const entry = findNearestOnOrBefore(date, account.data);\n  if (\n    entry?.date &&\n    account.data[0] === entry &&\n    DateTime.fromISO(entry.date).startOf(\"day\") > date\n  ) {\n    return 0;\n  }\n  return entry?.value;\n};\n\nexport const getGraphValue = (date: DateTime, account: Account | Mortgage) => {\n  switch (account.type) {\n    case \"account\":\n      return getAccountValue(date, account);\n    case \"mortgage\":\n      return getMortgageValue(date, account);\n  }\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { getGraphDates } from \"shared/utility/get-graph-dates\";\nimport { getGraphValue } from \"shared/utility/get-graph-value\";\n\nexport const useGraphData = () => {\n  const wealth = useStore(store, (x) => x.wealth);\n\n  return useMemo(() => {\n    const dates = getGraphDates(Object.values(wealth));\n    const accounts = Object.entries(wealth);\n    const graphData = dates.map((date) => {\n      return accounts.reduce(\n        (acc, [accountName, account]) => {\n          const value = getGraphValue(date, account);\n\n          if (value) {\n            acc[accountName] = value;\n            acc[\"total\"] = (acc[\"total\"] as number) + value;\n          } else {\n            acc[accountName] = null;\n          }\n\n          acc[\"date\"] = date.toJSDate();\n          return acc;\n        },\n        { total: 0 } as Record<string, number | Date | null>\n      );\n    });\n\n    graphData.forEach((x, idx, arr) => {\n      if (idx < arr.length - 1) {\n        Object.keys(x).forEach((key) => {\n          if (x[key] === null && arr[idx + 1][key] !== null) {\n            x[key] = 0;\n          }\n        });\n      }\n    });\n\n    const firstNonZero = graphData.findIndex((x) => (x[\"total\"] as number) > 0);\n    return graphData.slice(firstNonZero);\n  }, [wealth]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport {\n  AgAreaSeriesOptions,\n  AgCartesianChartOptions,\n  AgLineSeriesOptions,\n} from \"ag-charts-community\";\nimport { AgChartsReact } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { formatCashShort } from \"shared/utility/format-cash\";\nimport { useGraphData } from \"./use-graph-data\";\n\nexport const WealthChart = () => {\n  const wealth = useStore(store, (x) => x.wealth);\n  const data = useGraphData();\n\n  const series = useMemo(() => {\n    return [\n      ...Object.keys(wealth).map((x) => {\n        return {\n          stacked: true,\n          type: \"area\",\n          xKey: \"date\",\n          yKey: x,\n          yName: x,\n          tooltip: {\n            renderer: ({ datum, yKey, xKey }) => ({\n              content: `${DateTime.fromJSDate(\n                datum[xKey]\n              ).toISODate()} ${formatCashShort(datum[yKey])}`,\n            }),\n          },\n        } as AgAreaSeriesOptions;\n      }),\n      {\n        type: \"line\",\n        xKey: \"date\",\n        yKey: \"total\",\n        yName: \"Total\",\n        tooltip: {\n          renderer: ({ datum, yKey, xKey }) => ({\n            content: `${DateTime.fromJSDate(\n              datum[xKey]\n            ).toISODate()} ${formatCashShort(datum[yKey])}`,\n          }),\n        },\n      } as AgLineSeriesOptions,\n    ];\n  }, [wealth]);\n\n  const options: AgCartesianChartOptions = useMemo(\n    () => ({\n      theme: \"ag-default-dark\",\n      title: {\n        text: `Total Wealth ${formatCashShort(\n          (data[data.length - 1]?.total ?? 0) as number\n        )}`,\n      },\n      data,\n      axes: [\n        {\n          type: \"time\",\n          position: \"bottom\",\n          label: {\n            format: \"%Y\",\n          },\n        },\n        {\n          type: \"number\",\n          position: \"left\",\n        },\n      ],\n      series,\n    }),\n    [data, series]\n  );\n  return <AgChartsReact options={options} />;\n};\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  MenuItem,\n  Stack,\n  TextField,\n} from \"@mui/material\";\nimport { create } from \"mutative\";\nimport { ReactNode, forwardRef, useRef, useState } from \"react\";\nimport { AssetType } from \"shared/models/asset-types\";\nimport { store } from \"shared/store\";\n\nexport const NewAccount = forwardRef<\n  HTMLButtonElement,\n  { children?: ReactNode }\n>((props, ref) => {\n  const [open, setOpen] = useState(false);\n  const nameRef = useRef<HTMLInputElement>(null);\n  const [error, setError] = useState(false);\n  const [accountType, setAccountType] = useState<AssetType>();\n\n  return (\n    <>\n      <Button\n        ref={ref}\n        variant=\"outlined\"\n        onClick={() => {\n          setOpen(true);\n          setError(false);\n          setAccountType(undefined);\n        }}\n        sx={{ marginLeft: 2 }}\n      >\n        add account\n      </Button>\n\n      <Dialog open={open} onClose={() => setOpen(false)}>\n        <DialogTitle>Add New Account</DialogTitle>\n        <DialogContent>\n          <Stack spacing={2} margin={2}>\n            <TextField\n              select\n              color={error ? \"error\" : \"primary\"}\n              onChange={(value) => {\n                setError(false);\n                setAccountType(value.target.value as AssetType);\n              }}\n              label=\"Type\"\n            >\n              <MenuItem value=\"mortgage\">Mortgage</MenuItem>\n              <MenuItem value=\"account\">Generic Account</MenuItem>\n            </TextField>\n\n            <TextField\n              placeholder=\"Name\"\n              onChange={() => {\n                setError(false);\n              }}\n              error={error}\n              inputRef={nameRef}\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            disabled={error}\n            onClick={() => {\n              store.setState((prev) => {\n                return create(prev, (next) => {\n                  if (\n                    !nameRef.current?.value ||\n                    !accountType ||\n                    prev.wealth[nameRef.current.value]\n                  ) {\n                    setError(true);\n                    return;\n                  }\n\n                  next.wealth[nameRef.current.value] = {\n                    type: accountType,\n                    data: [],\n                  };\n\n                  setOpen(false);\n                });\n              });\n            }}\n          >\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {props?.children}\n    </>\n  );\n});\n","import { AgGridReact, AgGridReactProps } from \"ag-grid-react\";\n\nexport const AgGrid = (props: AgGridReactProps & { id: string }) => {\n  const { id, ...rest } = props;\n  return (\n    <div id={id} className=\"ag-theme-quartz-dark\" style={{ height: \"100%\" }}>\n      <AgGridReact {...rest} />\n    </div>\n  );\n};\n","export const shortDate = \"yyyy-MM-dd\";\n","import { DateTime } from \"luxon\";\n\nexport const sortByDate =\n  <T>(select: (data: T) => DateTime, direction: \"asc\" | \"desc\") =>\n  (a: T, b: T) =>\n    direction === \"asc\"\n      ? select(a).toMillis() - select(b).toMillis()\n      : select(b).toMillis() - select(a).toMillis();\n","import { Button, Paper } from \"@mui/material\";\nimport { create } from \"mutative\";\nimport { store } from \"shared/store\";\n\nexport const DeleteAccount = (props: { accountName: string }) => {\n  const { accountName } = props;\n\n  const onDeleteAccount = () => {\n    store.setState((prev) => {\n      return create(prev, (next) => {\n        delete next.wealth[accountName];\n      });\n    });\n  };\n\n  return (\n    <Paper elevation={3} sx={{ padding: 2, width: \"100%\" }}>\n      <Button onClick={onDeleteAccount} color=\"error\">\n        Delete Account\n      </Button>\n    </Paper>\n  );\n};\n","import { Button, Paper, TextField, Stack } from \"@mui/material\";\nimport { create } from \"mutative\";\nimport { useState } from \"react\";\nimport { store } from \"shared/store\";\n\nexport const RenameAccount = (props: { accountName: string }) => {\n  const { accountName } = props;\n\n  const [nextAccountName, setNextAccountName] = useState<string>(accountName);\n\n  const onUpdateName = () => {\n    store.setState((prev) => {\n      return create(prev, (next) => {\n        next.wealth[nextAccountName] = next.wealth[accountName];\n        delete next.wealth[accountName];\n      });\n    });\n  };\n\n  return (\n    <Paper elevation={3} sx={{ padding: 2 }}>\n      <Stack spacing={1}>\n        <TextField\n          label=\"Account Name\"\n          value={nextAccountName}\n          onChange={(event) => setNextAccountName(event.target.value)}\n          placeholder=\"\"\n        />\n        <Button disabled={!nextAccountName} onClick={onUpdateName}>\n          Update Name\n        </Button>\n      </Stack>\n    </Paper>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport { Button } from \"@mui/material\";\nimport { ColDef } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { AccountData } from \"shared/models/account-data\";\nimport { store } from \"shared/store\";\nimport { formatCashShort } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (\n  accountName: string\n): ColDef<AccountData>[] => [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n  },\n  {\n    headerName: \"Value\",\n    valueGetter: (x) => x.data?.value,\n    valueFormatter: (x) => formatCashShort(x.value),\n    type: \"numericColumn\",\n  },\n  {\n    headerName: \"Actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            store.setState((prev) => {\n              return create(prev, (next) => {\n                const idxToRemove = next.wealth[accountName].data.findIndex(\n                  (x) => x.id === props.data?.id\n                );\n                next.wealth[accountName].data.splice(idxToRemove, 1);\n                return next;\n              });\n            });\n          }}\n          color=\"error\"\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n","import { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { Account } from \"shared/models/account\";\n\nexport const useMissingYears = (account: Account) => {\n  return useMemo(() => {\n    const years = Object.entries(\n      Object.groupBy(account.data, (x) => DateTime.fromISO(x.date).year)\n    )\n      .map(\n        ([year, entries]) =>\n          [\n            +year,\n            !!entries?.find((x) => {\n              const date = DateTime.fromISO(x.date);\n              const janFirst = DateTime.fromObject({\n                day: 1,\n                month: 1,\n                year: +year,\n              });\n              return date.diff(janFirst, [\"days\", \"hours\"]).days == 0;\n            }),\n          ] as [number, boolean]\n      )\n      .sort(([a], [b]) => {\n        return a - b;\n      });\n\n    const lookup = Object.fromEntries(years);\n    const missing = [];\n    for (let i = years[0]?.[0] ?? 0; i <= years[years.length - 1]?.[0]; i++) {\n      if (!lookup[i]) {\n        missing.push(i);\n      }\n    }\n    return missing;\n  }, [account.data]);\n};\n","import {\n  Alert,\n  Button,\n  InputAdornment,\n  Paper,\n  Stack,\n  TextField,\n} from \"@mui/material\";\nimport Grid from \"@mui/system/Unstable_Grid\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { useMemo, useState } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { Account } from \"shared/models/account\";\nimport { store } from \"shared/store\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { sortByDate } from \"shared/utility/sort-by-date\";\nimport { v4 as uuid } from \"uuid\";\nimport { DeleteAccount } from \"../components/delete-account\";\nimport { RenameAccount } from \"../components/update-account\";\nimport { createAccountColumnConfig } from \"./column-config\";\nimport { useMissingYears } from \"./hooks/useMissingYears\";\n\nexport const AccountTab = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const account = useStore(\n    store,\n    (state) => state.wealth[accountName]\n  ) as Account;\n  const [date, setDate] = useState(DateTime.local());\n  const [amount, setAmount] = useState(0);\n\n  const missingYears = useMissingYears(account);\n  const hasSameDate = useMemo(() => {\n    return !!account?.data?.find((x) =>\n      date.hasSame(DateTime.fromISO(x.date), \"day\")\n    );\n  }, [account?.data, date]);\n\n  const onAddEntry = () => {\n    store.setState((prev) => {\n      return create(prev, (next) => {\n        (next.wealth[accountName] as Account).data.push({\n          date: date.toString(),\n          value: amount,\n          id: uuid(),\n        });\n        next.wealth[accountName].data.sort(\n          sortByDate((x) => DateTime.fromISO(x.date), \"asc\")\n        );\n      });\n    });\n  };\n\n  const accountColumnConfig = useMemo(() => {\n    return createAccountColumnConfig(accountName);\n  }, [accountName]);\n\n  return (\n    <>\n      {missingYears.length > 0 && (\n        <Alert severity=\"warning\">\n          Ensure an entry for Jan 1st for each year {missingYears.join(\", \")}\n        </Alert>\n      )}\n      <Grid container height=\"100%\" width={\"100%\"} padding={1} spacing={2}>\n        <Grid xl={3} lg={4}>\n          <AgGrid\n            reactiveCustomComponents\n            rowData={account?.data ?? []}\n            columnDefs={accountColumnConfig}\n            id={account + \"-history\"}\n          />\n        </Grid>\n        <Grid xl={9} lg={8}>\n          <div>\n            <Grid container spacing={2}>\n              <Grid xl={2} lg={3}>\n                <Paper elevation={3} sx={{ padding: 2 }}>\n                  <Stack spacing={1}>\n                    <DatePicker\n                      format={shortDate}\n                      sx={{ color: \"white\" }}\n                      label=\"Date\"\n                      defaultValue={date}\n                      onChange={(value) => value && setDate(value)}\n                    />\n                    <TextField\n                      label=\"amount\"\n                      value={amount}\n                      type=\"number\"\n                      onChange={(event) => setAmount(+event.target.value)}\n                      InputProps={{\n                        startAdornment: (\n                          <InputAdornment position=\"start\">$</InputAdornment>\n                        ),\n                      }}\n                      placeholder=\"\"\n                    />\n                    <Button\n                      disabled={!amount || !date || hasSameDate}\n                      onClick={onAddEntry}\n                    >\n                      Add Entry\n                    </Button>\n                  </Stack>\n                </Paper>\n              </Grid>\n              <Grid xl={8} lg={0}></Grid>\n              <Grid xl={2} lg={4}>\n                <Stack spacing={2}>\n                  <DeleteAccount accountName={accountName} />\n                  <RenameAccount accountName={accountName} />\n                </Stack>\n              </Grid>\n            </Grid>\n          </div>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n","import { Button, Paper, TextField } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { DateTime } from \"luxon\";\nimport { useRef } from \"react\";\nimport { store } from \"shared/store\";\nimport { create } from \"mutative\";\nimport { v4 as uuid } from \"uuid\";\n\nexport const AddEntry = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const ref = useRef<{ date?: DateTime; value?: number }>({\n    date: DateTime.local(),\n    value: 0,\n  });\n  const onAddEntry = () => {\n    const { date, value } = ref.current;\n    if (!date || !value) {\n      return;\n    }\n    store.setState((prev) => {\n      return create(prev, (next) => {\n        next.wealth[accountName].data.push({\n          date: date.toISO()!,\n          value,\n          id: uuid(),\n        });\n      });\n    });\n  };\n  return (\n    <Paper elevation={3} sx={{ padding: 2 }}>\n      <Stack spacing={1}>\n        <DatePicker\n          defaultValue={DateTime.local()}\n          onChange={(date: DateTime | null) => {\n            if (date) {\n              ref.current.date = date;\n            }\n          }}\n        />\n        <TextField\n          label=\"Home value\"\n          type=\"numeric\"\n          onChange={(event) => {\n            ref.current.value = +event.target.value;\n          }}\n        />\n        <Button onClick={onAddEntry}>Add Home Value</Button>\n      </Stack>\n    </Paper>\n  );\n};\n","export function groupBy<T, T2 extends string | number | symbol>(\n  array: T[],\n  selector: (x: T) => T2\n): Record<T2, T[]> {\n  return array.reduce((acc: Record<T2, T[]>, curr: T) => {\n    const key = selector(curr);\n    acc[key] ??= [];\n    acc[key].push(curr);\n    return acc;\n  }, {} as Record<T2, T[]>);\n}\n","import { ZodIssue, z } from \"zod\";\nimport { Button, Paper, Stack, TextField } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { DateTime } from \"luxon\";\nimport { useRef, useState } from \"react\";\nimport { create } from \"mutative\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { Loan } from \"shared/models/loan\";\nimport { Mortgage } from \"shared/models/mortgage\";\nimport { store } from \"shared/store\";\nimport { groupBy } from \"shared/utility/group-by\";\n\nconst convertPct = (value: number) => {\n  return value > 1 ? value / 100 : value;\n};\n\nconst validator: z.ZodType<Loan> = z.object({\n  principal: z.number().min(0),\n  ratePct: z.number().min(0),\n  paymentsPerYear: z.number().min(0),\n  payment: z.number().min(0),\n  firstPaymentDate: z.string().datetime({ offset: true }),\n  ownershipPct: z.number().min(0),\n});\n\nexport const AddLoan = (props: { accountName: string }) => {\n  const { accountName } = props;\n\n  const loan = useStore(store, (x) => {\n    const account = x.wealth[accountName];\n    if (\"loan\" in account) {\n      return account.loan;\n    }\n  });\n\n  const ref = useRef<Partial<Loan>>(loan ?? {});\n  const [error, setError] = useState<Partial<Record<keyof Loan, ZodIssue>>>({});\n\n  return (\n    <Paper elevation={3} sx={{ padding: 2 }}>\n      <Stack spacing={1}>\n        <DatePicker\n          defaultValue={\n            ref.current?.firstPaymentDate\n              ? DateTime.fromISO(ref.current.firstPaymentDate)\n              : null\n          }\n          label=\"First Payment\"\n          slotProps={{\n            textField: {\n              error: !!error.firstPaymentDate,\n            },\n          }}\n          onChange={(value: DateTime | null) => {\n            if (value) {\n              ref.current.firstPaymentDate = value.toISO()!;\n            }\n          }}\n        />\n        <TextField\n          error={!!error.principal}\n          defaultValue={loan?.principal}\n          onChange={(event) => {\n            ref.current.principal = +event.target.value;\n          }}\n          variant=\"outlined\"\n          label=\"Principal\"\n          type=\"number\"\n        />\n        <TextField\n          error={!!error.ratePct}\n          defaultValue={loan?.ratePct}\n          onChange={(event) => {\n            ref.current.ratePct = convertPct(+event.target.value);\n          }}\n          variant=\"outlined\"\n          label=\"Rate\"\n          type=\"number\"\n        />\n        <TextField\n          error={!!error.paymentsPerYear}\n          defaultValue={loan?.paymentsPerYear}\n          onChange={(event) => {\n            ref.current.paymentsPerYear = +event.target.value;\n          }}\n          variant=\"outlined\"\n          label=\"Payments Per Year\"\n          type=\"number\"\n        />\n        <TextField\n          defaultValue={loan?.payment}\n          error={!!error.payment}\n          onChange={(event) => {\n            ref.current.payment = +event.target.value;\n          }}\n          variant=\"outlined\"\n          label=\"Payment\"\n          type=\"number\"\n        />\n        <TextField\n          defaultValue={loan?.ownershipPct}\n          error={!!error.ownershipPct}\n          onChange={(event) => {\n            ref.current.ownershipPct = convertPct(+event.target.value);\n          }}\n          variant=\"outlined\"\n          label=\"Ownership (%)\"\n          type=\"number\"\n        />\n        <Button\n          onClick={() => {\n            const parsed = validator.safeParse(ref.current);\n            if (parsed.success) {\n              setError({});\n              store.setState((prev) => {\n                return create(prev, (next) => {\n                  (next.wealth[accountName] as Mortgage).loan = parsed.data;\n                });\n              });\n            } else {\n              const issues = groupBy(parsed.error.issues, (x) =>\n                x.path.join(\"\")\n              );\n              setError(issues);\n            }\n          }}\n        >\n          Set Loan\n        </Button>\n      </Stack>\n    </Paper>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport { Button } from \"@mui/material\";\nimport { ColDef } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { AccountData } from \"shared/models/account-data\";\nimport { store } from \"shared/store\";\nimport { formatCashShort } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (\n  accountName: string\n): ColDef<AccountData>[] => [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n  },\n  {\n    headerName: \"Home Value\",\n    valueGetter: (x) => x.data?.value,\n    valueFormatter: (x) => formatCashShort(x.value),\n    type: \"numericColumn\",\n  },\n  {\n    headerName: \"Actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            store.setState((prev) => {\n              return create(prev, (next) => {\n                const account = next.wealth[accountName];\n                const idxToRemove = account.data.findIndex(\n                  (x) => x.id === props.data?.id\n                );\n                account.data.splice(idxToRemove, 1);\n                return next;\n              });\n            });\n          }}\n          color=\"error\"\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n\nexport const mortgageColumnConfig: ColDef<{\n  date: DateTime;\n  balance: number;\n  equity: number;\n}>[] = [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data?.date,\n  },\n  {\n    headerName: \"Loan Balance\",\n    valueGetter: (x) => x.data?.balance.toFixed(2),\n    valueFormatter: (x) => formatCashShort(x.value),\n    type: \"numericColumn\",\n  },\n  {\n    headerName: \"Equity\",\n    valueGetter: (x) => x.data?.equity.toFixed(2),\n    valueFormatter: (x) => formatCashShort(x.value),\n    type: \"numericColumn\",\n  },\n];\n","import { Stack } from \"@mui/system\";\nimport Grid from \"@mui/system/Unstable_Grid\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { Mortgage } from \"shared/models/mortgage\";\nimport { store } from \"shared/store\";\n\nimport { findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\nimport { getGraphDates } from \"shared/utility/get-graph-dates\";\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\nimport { DeleteAccount } from \"../components/delete-account\";\nimport { RenameAccount } from \"../components/update-account\";\nimport { AddEntry } from \"./add-entry\";\nimport { AddLoan } from \"./add-loan\";\nimport {\n  createAccountColumnConfig,\n  mortgageColumnConfig,\n} from \"./column-config\";\n\nexport const MortgageTab = (props: { accountName: string }) => {\n  const { accountName } = props;\n\n  const account = useStore(\n    store,\n    (state) => state.wealth[accountName]\n  ) as Mortgage;\n\n  const allAccounts = useStore(store, (x) => x.wealth);\n\n  const accountColumnConfig = useMemo(() => {\n    return createAccountColumnConfig(accountName);\n  }, [accountName]);\n\n  const mortgageData = useMemo(() => {\n    if (!account?.loan) {\n      return [];\n    }\n\n    return getGraphDates(Object.values(allAccounts)).map((date) => {\n      const loanBalance = calcLoanBalance(date, account.loan!);\n      return {\n        date,\n        balance: loanBalance,\n        equity: calcEquity(\n          account.loan!.ownershipPct,\n          findNearestOnOrBefore(date, account.data)?.value,\n          loanBalance,\n          account.loan!.principal\n        ),\n      };\n    });\n  }, [account, allAccounts]);\n\n  return (\n    <Grid container height=\"100%\" width={\"100%\"} padding={1} spacing={2}>\n      <Grid lg={3}>\n        <AgGrid\n          reactiveCustomComponents\n          rowData={account?.data ?? []}\n          columnDefs={accountColumnConfig}\n          id={account + \"-history\"}\n        />\n      </Grid>\n      <Grid lg={3}>\n        <AgGrid\n          rowData={mortgageData}\n          columnDefs={mortgageColumnConfig}\n          id={account + \"-history\"}\n        />\n      </Grid>\n      <Grid lg={6}>\n        <div>\n          <Grid container spacing={2}>\n            <Grid xl={3}>\n              <AddLoan accountName={accountName} />\n            </Grid>\n            <Grid xl={3}>\n              <AddEntry accountName={accountName} />\n            </Grid>\n            <Grid xl={0}></Grid>\n            <Grid xl={3}>\n              <Stack spacing={2}>\n                <DeleteAccount accountName={accountName} />\n                <RenameAccount accountName={accountName} />\n              </Stack>\n            </Grid>\n          </Grid>\n        </div>\n      </Grid>\n    </Grid>\n  );\n};\n","import { Box, Tab, Tabs } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useEffect, useState } from \"react\";\nimport { store } from \"shared/store\";\nimport { NewAccount } from \"../new-account\";\nimport { AccountTab } from \"../tab-types/account/account\";\nimport { MortgageTab } from \"../tab-types/mortgage\";\n\nexport const AccountTabs = () => {\n  const accounts = useStore(store, (x) => x.wealth);\n  const firstAccount = Object.keys(accounts)?.[0] ?? \"\";\n  const [account, setAccount] = useState<string>(firstAccount);\n\n  useEffect(() => {\n    if (!accounts[account]) {\n      setAccount(Object.keys(accounts)?.[0] ?? \"\");\n    }\n  }, [account, accounts]);\n\n  return (\n    <Box display=\"flex\" flexDirection={\"column\"} width=\"100%\" height=\"100%\">\n      <Box display={\"flex\"} flex={\"0 1 auto\"}>\n        <Tabs\n          value={account}\n          defaultValue={firstAccount}\n          onChange={(_, value) => {\n            setAccount(value as string);\n          }}\n        >\n          {Object.keys(accounts).map((account) => {\n            return <Tab key={account} value={account} label={account} />;\n          })}\n          <Tab component={NewAccount} />\n        </Tabs>\n      </Box>\n      <Box flex={\"1 1 auto\"}>\n        {accounts[account]?.type === \"account\" && (\n          <AccountTab accountName={account} />\n        )}\n        {accounts[account]?.type === \"mortgage\" && (\n          <MortgageTab accountName={account} />\n        )}\n      </Box>\n    </Box>\n  );\n};\n","import Grid from \"@mui/system/Unstable_Grid\";\nimport { WealthChart } from \"./components/wealth-chart\";\nimport { AccountTabs } from \"./components/account-tabs\";\n\nexport const NetWealth = () => {\n  return (\n    <Grid container height={\"100%\"} width=\"100%\">\n      <Grid xs={12} height=\"50%\">\n        <WealthChart />\n      </Grid>\n      <Grid xs={12} height=\"50%\">\n        <AccountTabs />\n      </Grid>\n    </Grid>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\n\nexport const useDates = (year: number) =>\n  useMemo(() => {\n    return {\n      meritIncrease: DateTime.fromObject({ month: 4, day: 1, year }),\n      meritBonus: DateTime.fromObject({ month: 4, day: 15, year }),\n      companyBonus: DateTime.fromObject({ month: 6, day: 15, year }),\n      retirementBonus: DateTime.fromObject({ month: 7, day: 15, year }),\n      aPayday: DateTime.fromObject({ month: 12, day: 1, year: 2023 }),\n    };\n  }, [year]);\n\nexport const useDateRanges = (year: number) => {\n  return useMemo(\n    () => ({\n      base: {\n        start: DateTime.fromObject({ month: 1, day: 1, year }),\n        end: DateTime.fromObject({ month: 12, day: 31, year }).endOf(\"day\"),\n      },\n      meritBonus: {\n        start: DateTime.fromObject({ month: 1, day: 1, year: year - 1 }),\n        end: DateTime.fromObject({ month: 12, day: 31, year: year - 1 }).endOf(\n          \"day\"\n        ),\n      },\n      companyBonus: {\n        start: DateTime.fromObject({ day: 1, month: 4, year: year - 1 }),\n        end: DateTime.fromObject({ day: 31, month: 3, year }).endOf(\"day\"),\n      },\n      retirementBonus: {\n        start: DateTime.fromObject({ day: 1, month: 7, year: year - 1 }),\n        end: DateTime.fromObject({ day: 30, month: 6, year }).endOf(\"day\"),\n      },\n    }),\n    [year]\n  );\n};\n","export interface Outcome {\n  min: number;\n  max: number;\n  avg: number;\n  actual?: number;\n}\n\nexport interface BonusOutcomes {\n  percent: Outcome;\n  cash: Outcome;\n}\n\nexport const minMaxAvg = (values: number[]): Outcome => {\n  if (values.length === 0) {\n    return { min: 0, max: 0, avg: 0 };\n  }\n  return values.reduce(\n    (acc, curr, index, arr) => {\n      const { min, max, avg } = acc;\n      return {\n        min: Math.min(curr, min),\n        max: Math.max(curr, max),\n        avg: index === arr.length - 1 ? (avg + curr) / arr.length : avg + curr,\n      };\n    },\n    { min: Infinity, max: 0, avg: 0 }\n  );\n};\n\nexport const outcomeFromSingle = (value: number): Outcome => {\n  return { min: value, max: value, avg: value, actual: value };\n};\n\nexport const actualizedOutcome = (outcome: Outcome): Outcome =>\n  outcome.actual ? outcomeFromSingle(outcome.actual) : outcome;\n\nexport const scaleOutcome = (outcome: Outcome, value: number): Outcome => {\n  return {\n    min: outcome.min * value,\n    max: outcome.max * value,\n    avg: outcome.avg * value,\n    actual: outcome.actual ? outcome.actual * value : undefined,\n  };\n};\nexport const AddConstantOutcome = (\n  outcome: Outcome,\n  value: number\n): Outcome => {\n  return {\n    min: outcome.min + value,\n    max: outcome.max + value,\n    avg: outcome.avg + value,\n    actual: outcome.actual ? outcome.actual + value : undefined,\n  };\n};\n\nexport const MultiplyOutcome = (\n  outcomeA: Outcome,\n  outcomeB: Outcome\n): Outcome => {\n  return {\n    min: outcomeA.min * outcomeB.min,\n    max: outcomeA.max * outcomeB.max,\n    avg: outcomeA.avg * outcomeB.avg,\n    actual:\n      outcomeA.actual != undefined && outcomeB.actual != undefined\n        ? outcomeA.actual * outcomeB.avg\n        : undefined,\n  };\n};\n\nexport const AddOutcome = (...outcomes: Outcome[]): Outcome => {\n  const everyActualDefined = outcomes.every((x) => x.actual != undefined);\n  return outcomes.reduce(\n    (acc, curr) => {\n      return {\n        min: acc.min + curr.min,\n        avg: acc.avg + curr.avg,\n        max: acc.max + curr.max,\n        actual: everyActualDefined\n          ? (acc.actual ?? 0) + (curr.actual ?? 0)\n          : undefined,\n      };\n    },\n    { min: 0, max: 0, avg: 0, actual: undefined }\n  );\n};\n","import { Tooltip } from \"@mui/material\";\nimport { useMemo } from \"react\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\n\ninterface CashProps {\n  value?: number;\n  fallback?: number;\n  disableTooltip?: boolean;\n  compact?: boolean;\n}\nexport const Cash = ({\n  value,\n  fallback,\n  disableTooltip,\n  compact = true,\n}: CashProps) => {\n  const formatted = useMemo(() => {\n    if (!value) {\n      return fallback;\n    }\n    return compact ? formatCashShort(value) : formatCash(value);\n  }, [compact, fallback, value]);\n\n  return (\n    <Tooltip\n      disableHoverListener={disableTooltip || !compact || !value}\n      title={formatCash(value!)}\n    >\n      <span>{formatted}</span>\n    </Tooltip>\n  );\n};\n","import { Box } from \"@mui/material\";\nimport { DateTime } from \"luxon\";\nimport { ReactNode, useMemo } from \"react\";\n\ninterface DurationProps {\n  dateTime: DateTime;\n  children?: ReactNode;\n}\nexport const Duration = ({ dateTime, children }: DurationProps) => {\n  const countDownStr = useMemo(\n    () => dateTime.diffNow([\"months\", \"days\", \"hours\"]).toFormat(\"d'd'\"),\n    [dateTime]\n  );\n\n  const countDownColor = useMemo(() => {\n    const days = dateTime.diffNow(\"days\").days;\n    if (days < 30) {\n      return \"green\";\n    } else if (days < 60) {\n      return \"yellow\";\n    }\n    return \"red\";\n  }, [dateTime]);\n\n  return dateTime > DateTime.local() ? (\n    <Box color={countDownColor}>{countDownStr}</Box>\n  ) : (\n    children\n  );\n};\n","export const formatPercent = new Intl.NumberFormat(\"en-us\", {\n  style: \"percent\",\n  maximumFractionDigits: 1,\n}).format;\n","import { formatPercent } from \"shared/utility/format-percent\";\n\ninterface PercentProps {\n  value: number;\n}\nexport const Percent = ({ value }: PercentProps) => {\n  return formatPercent(value);\n};\n","import { Box } from \"@mui/material\";\nimport { ReactNode } from \"react\";\n\ninterface CellProps {\n  children?: ReactNode;\n  secondaryValue?: ReactNode;\n  tertiaryValue?: ReactNode;\n  title: string;\n}\n\nexport const Value = (props: CellProps) => {\n  const { children, secondaryValue, tertiaryValue, title } = props;\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        minWidth: 106,\n        height: 64,\n        padding: \"0px 8px\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"flex-start\",\n        gap: 0.5,\n        flexShrink: 0,\n      }}\n    >\n      <Box display={\"flex\"} alignItems={\"center\"} gap={0.5}>\n        <Box fontSize={18} fontWeight={700} lineHeight={\"20px\"}>\n          {children ? children : \"??\"}\n        </Box>\n        {!!(secondaryValue ?? tertiaryValue) && (\n          <Box\n            alignSelf={\"flex-end\"}\n            fontSize={12}\n            fontWeight={500}\n            lineHeight={\"16px\"}\n            textTransform={\"uppercase\"}\n            color={\"#888\"}\n          >\n            {secondaryValue ?? tertiaryValue}\n          </Box>\n        )}\n      </Box>\n      <Box\n        fontSize={12}\n        fontWeight={500}\n        lineHeight={\"16px\"}\n        textTransform={\"uppercase\"}\n      >\n        {title}\n      </Box>\n    </Box>\n  );\n};\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Duration } from \"shared/components/formatters/duration\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { BonusOutcomes } from \"shared/utility/min-max-avg\";\nimport { Value } from \"./value\";\n\nexport const BonusOutcome = (props: {\n  title: string;\n  outcome: BonusOutcomes;\n  payDate: DateTime;\n}) => {\n  const { outcome, title, payDate } = props;\n\n  return (\n    <Box sx={{ border: \"1px solid rgba(255,255,255,0.1)\", borderRadius: 2 }}>\n      <Typography\n        sx={{\n          paddingBottom: 1,\n          paddingLeft: 2,\n          paddingTop: 1,\n          paddingRight: 2,\n          width: \"max-content\",\n        }}\n        variant=\"h5\"\n      >\n        {title}\n      </Typography>\n      <Divider />\n      <Stack\n        padding={1}\n        direction={\"row\"}\n        spacing={0.5}\n        justifyContent={\"center\"}\n      >\n        {!outcome.cash.actual && (\n          <>\n            <Value\n              secondaryValue={<Percent value={outcome.percent.min} />}\n              title={\"min\"}\n            >\n              <Cash value={outcome.cash.min} fallback={0} />\n            </Value>\n            <Value\n              secondaryValue={<Percent value={outcome.percent.avg} />}\n              title={\"avg\"}\n            >\n              <Cash value={outcome.cash.avg} fallback={0} />\n            </Value>\n            <Value\n              secondaryValue={<Percent value={outcome.percent.max} />}\n              title={\"max\"}\n            >\n              <Cash value={outcome.cash.max} fallback={0} />\n            </Value>\n          </>\n        )}\n        <Value\n          title={\"Actual\"}\n          tertiaryValue={\n            outcome.percent.actual && <Percent value={outcome.percent.actual} />\n          }\n          secondaryValue={\n            outcome.cash.actual && <Cash value={outcome.cash.actual} />\n          }\n        >\n          <Duration dateTime={payDate}>\n            <Cash value={outcome.cash.actual} />\n          </Duration>\n        </Value>\n      </Stack>\n    </Box>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport { Button, Tooltip } from \"@mui/material\";\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { AccountData } from \"shared/models/account-data\";\nimport { TimeSeries } from \"shared/models/projected-wealth\";\nimport { store } from \"shared/store\";\nimport { formatCash } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport UpdateIcon from \"@mui/icons-material/Update\";\nimport { Stack } from \"@mui/system\";\n\nexport const createAccountColumnConfig = (\n  accountName: TimeSeries,\n  variant: \"number\" | \"cash\" | \"percent\"\n): ColDef<AccountData>[] => [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\n      return (\n        <Stack direction={\"row\"} alignItems={\"center\"}>\n          {x.valueFormatted}&nbsp;\n          {x.value && x.value > DateTime.local() && (\n            <Tooltip title=\"Future Event\">\n              <UpdateIcon htmlColor=\"yellow\" />\n            </Tooltip>\n          )}\n        </Stack>\n      );\n    },\n  },\n  {\n    headerName: \"Value\",\n    valueGetter: (x) => x.data?.value,\n    valueFormatter: (x) =>\n      variant === \"number\"\n        ? x.value\n        : variant === \"cash\"\n        ? formatCash(x.value)\n        : (x.value * 100).toFixed(2) + \"%\",\n    type: \"numericColumn\",\n    editable: true,\n    cellEditor: \"agNumberCellEditor\",\n    valueSetter: (x) => {\n      store.setState((prev) => {\n        const next = create(prev, (next) => {\n          const account = next.projectedIncome.timeSeries[accountName];\n          const idx = account.findIndex(({ id }) => id === x.data.id);\n          account[idx].value = +x.newValue;\n        });\n        return next;\n      });\n      return true;\n    },\n  },\n  {\n    headerName: \"Actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            store.setState((prev) => {\n              return create(prev, (next) => {\n                const idxToRemove = next.projectedIncome.timeSeries[\n                  accountName\n                ].findIndex((x) => x.id === props.data?.id);\n                next.projectedIncome.timeSeries[accountName].splice(\n                  idxToRemove,\n                  1\n                );\n              });\n            });\n          }}\n          color=\"error\"\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n","import {\n  Box,\n  Button,\n  InputAdornment,\n  Paper,\n  Stack,\n  TextField,\n  Tooltip,\n  Typography,\n} from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { useMemo, useState } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { TimeSeries } from \"shared/models/projected-wealth\";\nimport { store } from \"shared/store\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { sortByDate } from \"shared/utility/sort-by-date\";\nimport { v4 as uuid } from \"uuid\";\nimport { createAccountColumnConfig } from \"./column-config\";\n\nexport const DataEntry = (props: {\n  accountName: TimeSeries;\n  defaultDate: DateTime;\n  variant?: \"number\" | \"cash\" | \"percent\";\n}) => {\n  const { accountName, defaultDate, variant = \"number\" } = props;\n  const account = useStore(\n    store,\n    (state) => state.projectedIncome.timeSeries[accountName]\n  );\n\n  const [date, setDate] = useState(defaultDate);\n  const [amount, setAmount] = useState<number | null>(null);\n\n  const hasSameDate = useMemo(() => {\n    return !!account?.find((x) =>\n      date.hasSame(DateTime.fromISO(x.date), \"day\")\n    );\n  }, [account, date]);\n\n  const onAddEntry = () => {\n    if (amount != null) {\n      store.setState((prev) => {\n        return create(prev, (next) => {\n          next.projectedIncome.timeSeries[accountName] =\n            next.projectedIncome.timeSeries[accountName]\n              .concat({\n                date: date.toString(),\n                value: variant === \"percent\" ? amount / 100 : amount,\n                id: uuid(),\n              })\n              .sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\n        });\n      });\n      setAmount(null);\n    }\n  };\n\n  const accountColumnConfig = useMemo(() => {\n    return createAccountColumnConfig(accountName, variant);\n  }, [accountName, variant]);\n\n  return (\n    <Box display={\"flex\"} flexDirection={\"column\"} height=\"100%\">\n      <Stack spacing={2} flex=\"0 1 auto\">\n        <DatePicker\n          format={shortDate}\n          sx={{ color: \"white\" }}\n          label=\"Date\"\n          value={date}\n          onChange={(value) => {\n            console.log(value);\n            value && setDate(value);\n          }}\n        />\n        <TextField\n          label=\"amount\"\n          value={amount ?? \"\"}\n          type=\"number\"\n          onChange={(event) =>\n            event.target.value === \"\"\n              ? setAmount(null)\n              : setAmount(+event.target.value)\n          }\n          InputProps={{\n            startAdornment: variant !== \"number\" && (\n              <InputAdornment position=\"start\">\n                {variant === \"cash\" ? \"$\" : \"%\"}\n              </InputAdornment>\n            ),\n          }}\n        />\n        <Button\n          disabled={amount === null || !date || hasSameDate}\n          onClick={onAddEntry}\n        >\n          Add Entry\n        </Button>\n      </Stack>\n      <Box sx={{ paddingTop: 2, flex: \"1 1 auto\" }}>\n        <AgGrid\n          reactiveCustomComponents\n          rowData={account ?? []}\n          columnDefs={accountColumnConfig}\n          id={account + \"-history\"}\n          autoSizeStrategy={{\n            type: \"fitGridWidth\",\n          }}\n          stopEditingWhenCellsLoseFocus\n        />\n      </Box>\n    </Box>\n  );\n};\n\nexport interface LayoutProps {\n  title: string;\n  accountName: TimeSeries;\n  defaultDate: DateTime;\n  variant: \"percent\" | \"number\" | \"cash\";\n}\n\nexport const Layout = (props: LayoutProps) => {\n  const { title, accountName, defaultDate, variant } = props;\n  return (\n    <Paper sx={{ padding: 2, height: \"100%\", width: 450, flexShrink: 0 }}>\n      <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\n        <Box flex=\"0 1 auto\" marginBottom={2}>\n          <Typography sx={{ marginBottom: 2 }} variant=\"h5\">\n            {title}{\" \"}\n            {variant === \"cash\" && (\n              <Tooltip\n                title={\n                  <>\n                    <span>Cash values are used in lieu of Percent values.</span>\n                    <br />\n                    <span>\n                      Cash values are considered actual payment values.\n                    </span>\n                  </>\n                }\n              >\n                <span>($)</span>\n              </Tooltip>\n            )}\n            {variant === \"percent\" && (\n              <Tooltip title=\"Percentage values are used for predictions.\">\n                <span>(%)</span>\n              </Tooltip>\n            )}\n          </Typography>\n        </Box>\n        <Box flex=\"1 1 auto\">\n          <DataEntry\n            variant={variant}\n            accountName={accountName}\n            defaultDate={defaultDate}\n          />\n        </Box>\n      </Box>\n    </Paper>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { ReactNode } from \"react\";\n\ninterface UntilProps {\n  dateTime: DateTime;\n  children: ReactNode;\n}\n\nexport const Until = (props: UntilProps) => {\n  const { dateTime, children } = props;\n  return DateTime.local() < dateTime && children;\n};\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/account-data\";\n\nexport function findSameYear(\n  year: number,\n  data: AccountData[]\n): AccountData | undefined;\nexport function findSameYear(\n  date: DateTime,\n  data: AccountData[]\n): AccountData | undefined;\nexport function findSameYear(\n  date: DateTime | number,\n  data: AccountData[]\n): AccountData | undefined {\n  const year = typeof date === \"number\" ? date : date.year;\n  return data.find((x) => {\n    return DateTime.fromISO(x.date).year === year;\n  });\n}\n","import { DateTime } from \"luxon\";\n\nexport function DateRangesOverlap(\n  a: { start: DateTime; end: DateTime },\n  b: { start: DateTime; end: DateTime }\n) {\n  return a.start <= b.end && b.start <= a.end;\n}\n","import { DateTime } from \"luxon\";\n\nexport interface PayPeriod {\n  start: DateTime;\n  end: DateTime;\n  payedOn: DateTime;\n}\n\nexport const getPayPeriods = (\n  anyPayday: DateTime,\n  start: DateTime,\n  end: DateTime\n): PayPeriod[] => {\n  const diff = -1 * Math.abs(start.diff(anyPayday, [\"weeks\", \"days\"]).days);\n  const daysOffset = +(anyPayday > start);\n  const startPayDay = start.plus({\n    day: diff + daysOffset,\n  });\n\n  const numPayDays = end.diff(start, [\"weeks\", \"days\"]).weeks / 2;\n  const periods = [];\n  for (let i = 1; i <= numPayDays; i++) {\n    periods.push({\n      start: startPayDay.plus({ weeks: i * 2 - 3, day: 3 }),\n      end: startPayDay.plus({ weeks: i * 2 - 1 }).endOf(\"day\"),\n      payedOn: startPayDay.plus({ weeks: i * 2 }),\n    });\n  }\n  return periods;\n};\n","import { useMemo } from \"react\";\nimport { AccountData } from \"shared/models/account-data\";\n\nexport const useMostFrequentValue = (\n  data: AccountData[]\n): number | undefined => {\n  return useMemo(() => {\n    return Object.entries(\n      Object.groupBy(\n        data.map((x) => x.value),\n        (x) => x\n      )\n    )\n      .map(([key, values]) => [+key, values?.length ?? 0])\n      .sort(([, a], [, b]) => {\n        return b - a;\n      })[0]?.[0];\n  }, [data]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { AccountData } from \"shared/models/account-data\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\nimport { sortByDate } from \"shared/utility/sort-by-date\";\nimport { useMostFrequentValue } from \"./use-most-frequent-value\";\n\nconst valueByDateRange = (account: AccountData[]) => {\n  return account\n    .toSorted(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"))\n    .map((x, index, array) => {\n      const next = array[index + 1];\n      return {\n        start: DateTime.fromISO(x.date),\n        end: (next?.date\n          ? DateTime.fromISO(next?.date).startOf(\"day\")\n          : DateTime.fromISO(x.date).endOf(\"day\").plus({ years: 1 })\n        ).minus({ days: 1 }),\n        value: x.value,\n      };\n    });\n};\n\nconst defaultValue = {\n  start: DateTime.fromObject({ month: 1, day: 1 }),\n  end: DateTime.fromObject({ month: 12, day: 31 }).endOf(\"day\"),\n  value: 1,\n};\n\nexport const useProjectedPay = () => {\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  const baseIncome = timeSeries.paycheck;\n  const meritPct = useMostFrequentValue(timeSeries.meritIncreasePct);\n\n  return useMemo(() => {\n    const payPerPeriod = valueByDateRange(baseIncome);\n    const mostRecentPay = payPerPeriod[payPerPeriod.length - 1] ?? defaultValue;\n\n    for (let i = 0; i < 2; i++) {\n      const { start, end, value } = payPerPeriod[0] ?? mostRecentPay;\n      const startDate = start.plus({ years: -1 });\n      const equity = findSameYear(start, timeSeries.equityPct)?.value ?? 0;\n      const merit =\n        findSameYear(start, timeSeries.meritIncreasePct)?.value ??\n        meritPct ??\n        0;\n      const multiplier = 1 / (1 + merit + equity);\n\n      payPerPeriod.unshift({\n        start: startDate,\n        end: end.plus({ years: -1 }),\n        value: Math.round(value * multiplier),\n      });\n    }\n\n    const startIdx = payPerPeriod.length;\n    for (let i = startIdx; i < startIdx + 11; i++) {\n      const { start, end, value } = payPerPeriod[i - 1] ?? mostRecentPay;\n      const startDate = start.plus({ years: 1 });\n      const equity = findSameYear(startDate, timeSeries.equityPct)?.value ?? 0;\n      const merit =\n        findSameYear(startDate, timeSeries.meritIncreasePct)?.value ??\n        meritPct ??\n        0;\n      const multiplier = 1 + merit + equity;\n\n      payPerPeriod.push({\n        start: startDate,\n        end: end.plus({ years: 1 }),\n        value: Math.round(value * multiplier),\n      });\n    }\n\n    return payPerPeriod;\n  }, [baseIncome, meritPct, timeSeries.equityPct, timeSeries.meritIncreasePct]);\n};\n","import { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { useDates } from \"shared/hooks/use-dates\";\nimport { DateRangesOverlap } from \"shared/utility/date-ranges-overlap\";\nimport { PayPeriod, getPayPeriods } from \"shared/utility/get-pay-periods\";\nimport { useProjectedPay } from \"./use-projected-pay\";\n\nexport type IncomePerPeriod = {\n  perPayday: number;\n  count: number;\n  start: DateTime;\n  end: DateTime;\n  value: number;\n};\n\nexport interface BaseIncome {\n  totalIncome: number;\n  payPeriods: PayPeriod[];\n  incomePerPeriod: IncomePerPeriod[];\n}\n\nexport const useBaseIncome = (\n  startDate: DateTime,\n  endDate: DateTime\n): BaseIncome => {\n  const pay = useProjectedPay();\n  const { aPayday } = useDates(startDate.year);\n\n  return useMemo(() => {\n    const payPeriods = getPayPeriods(aPayday, startDate, endDate).map(\n      (payPeriod) => {\n        const payDuringPeriod = pay\n          .filter((_pay) => DateRangesOverlap(_pay, payPeriod))\n          .map((__pay) => {\n            const start = DateTime.max(__pay.start, payPeriod.start);\n            const end = DateTime.min(__pay.end, payPeriod.end);\n            const value =\n              __pay.value * Math.round(end.diff(start, \"days\").days / 10);\n            return {\n              start,\n              end,\n              value,\n            };\n          })\n          .reduce((acc, curr) => acc + curr.value, 0);\n\n        return {\n          ...payPeriod,\n          value: payDuringPeriod,\n        };\n      }\n    );\n\n    const totalIncome = payPeriods.reduce((acc, curr) => acc + curr.value, 0);\n\n    const incomePerPeriod = payPeriods\n      .reduceRight((acc, curr) => {\n        if (acc[0]?.[0]?.value === curr.value) {\n          acc[0].unshift(curr);\n        } else {\n          acc.unshift([curr]);\n        }\n\n        return acc;\n      }, [] as (typeof payPeriods)[])\n      .reduce((acc, curr) => {\n        acc.push({\n          start: curr[0].payedOn,\n          end: curr[curr.length - 1].payedOn,\n          value: curr.reduce((acc, curr) => acc + curr.value, 0),\n          perPayday: curr[0].value,\n          count: curr.length,\n        });\n        return acc;\n      }, [] as IncomePerPeriod[]);\n\n    return { totalIncome, payPeriods, incomePerPeriod };\n  }, [aPayday, startDate, endDate, pay]);\n};\n","import { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { useProjectedPay } from \"./use-projected-pay\";\n\nexport const usePayCheck = (date: DateTime) => {\n  const payChecks = useProjectedPay();\n\n  const payCheck = useMemo(() => {\n    return payChecks.find(({ start }) => start.year === date.year)?.value ?? 0;\n  }, [date.year, payChecks]);\n\n  return payCheck;\n};\n","import ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\nimport { Table, TableBody, TableCell, TableRow } from \"@mui/material\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { IncomePerPeriod } from \"../hooks/use-base-income\";\n\ninterface IncomePerPeriodTooltipProps {\n  incomePerPeriod: IncomePerPeriod[];\n  totalIncome: number;\n}\n\nexport const IncomePerPeriodTooltip = (props: IncomePerPeriodTooltipProps) => {\n  const { incomePerPeriod, totalIncome } = props;\n  return (\n    <Table sx={{ width: \"max-content\" }}>\n      <TableBody>\n        {incomePerPeriod.map(\n          ({ start, end, value, perPayday, count }, index) => {\n            return (\n              <TableRow key={index}>\n                <TableCell>\n                  <Cash value={value} compact={false} />\n                </TableCell>\n                <TableCell>{start.toFormat(shortDate)}</TableCell>\n                <TableCell>\n                  <ArrowForwardIcon />\n                </TableCell>\n                <TableCell>{end.toFormat(shortDate)}</TableCell>\n                <TableCell>\n                  <Cash value={perPayday} compact={false} /> x {count}\n                </TableCell>\n              </TableRow>\n            );\n          }\n        )}\n        <TableRow>\n          <TableCell colSpan={4}>Total:</TableCell>\n          <TableCell>\n            <Cash value={totalIncome} compact={false} />\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};\n","import { Box, Divider, Stack, Tooltip, Typography } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Duration } from \"shared/components/formatters/duration\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { Until } from \"shared/components/formatters/until\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\nimport { useBaseIncome } from \"../hooks/use-base-income\";\nimport { useMostFrequentValue } from \"../hooks/use-most-frequent-value\";\nimport { usePayCheck } from \"../hooks/use-pay-check\";\nimport { useProjectedPay } from \"../hooks/use-projected-pay\";\nimport { IncomePerPeriodTooltip } from \"./income-per-period\";\nimport { Value } from \"./value\";\n\nexport const MeritOutcome = (props: { title: string; payDate: DateTime }) => {\n  const { title, payDate } = props;\n\n  const income = useBaseIncome(\n    DateTime.fromObject({ day: 1, month: 1, year: payDate.year }),\n    DateTime.fromObject({ day: 31, month: 12, year: payDate.year })\n  );\n\n  const projectedPay = useProjectedPay();\n  const baseAprToApr = useMemo(() => {\n    return (\n      (projectedPay.find((x) => x.start <= payDate && payDate <= x.end)\n        ?.value ?? 0) * 26\n    );\n  }, [payDate, projectedPay]);\n\n  const meritIncreases = useStore(\n    store,\n    (x) => x.projectedIncome.timeSeries.meritIncreasePct\n  );\n  const commonMerit = useMostFrequentValue(meritIncreases);\n  const meritPct = useStore(\n    store,\n    (x) =>\n      findSameYear(payDate, x.projectedIncome.timeSeries.meritIncreasePct)\n        ?.value ?? commonMerit\n  );\n\n  const equityPct = useStore(\n    store,\n    (x) =>\n      payDate && findSameYear(payDate, x.projectedIncome.timeSeries.equityPct)\n  );\n\n  const totalAdjust = (meritPct ?? 0) + (equityPct?.value ?? 0);\n  const payCheck = usePayCheck(payDate);\n\n  return (\n    <Box\n      sx={{\n        border: \"1px solid rgba(255,255,255,0.1)\",\n        borderRadius: 2,\n      }}\n    >\n      <Typography\n        sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1 }}\n        variant=\"h5\"\n      >\n        {title}\n      </Typography>\n      <Divider />\n\n      <Stack padding={1} direction={\"row\"} spacing={0.5}>\n        {\n          <Value title={\"Paycheck\"}>\n            <Cash value={payCheck} compact={false} />\n          </Value>\n        }\n        <Tooltip\n          componentsProps={{\n            tooltip: {\n              sx: {\n                maxWidth: \"none\",\n              },\n            },\n          }}\n          title={\n            <IncomePerPeriodTooltip\n              incomePerPeriod={income.incomePerPeriod}\n              totalIncome={income.totalIncome}\n            />\n          }\n        >\n          <div>\n            <Value title={\"Base Pay\"}>\n              <Cash disableTooltip value={income.totalIncome ?? 0} />\n            </Value>\n          </div>\n        </Tooltip>\n\n        <Value title={\"APR to APR\"}>\n          <Cash value={baseAprToApr} />\n        </Value>\n\n        <Value\n          title={\"Actual\"}\n          secondaryValue={\n            <Until dateTime={payDate}>\n              <Percent value={totalAdjust} />\n            </Until>\n          }\n        >\n          <Duration dateTime={payDate}>\n            <Percent value={totalAdjust} />\n          </Duration>\n        </Value>\n      </Stack>\n    </Box>\n  );\n};\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\nimport { Outcome as TOutcome } from \"shared/utility/min-max-avg\";\nimport { Value } from \"./value\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Duration } from \"shared/components/formatters/duration\";\nimport { Until } from \"shared/components/formatters/until\";\nimport { ReactNode } from \"react\";\n\nexport const Outcome = (props: {\n  title: ReactNode;\n  outcome: TOutcome;\n  payDate?: DateTime;\n}) => {\n  const { outcome, title, payDate } = props;\n\n  return (\n    <Box\n      sx={{\n        border: \"1px solid rgba(255,255,255,0.1)\",\n        borderRadius: 2,\n      }}\n    >\n      <Typography\n        sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1 }}\n        variant=\"h5\"\n      >\n        {title}\n      </Typography>\n      <Divider />\n\n      <Stack padding={1} direction={\"row\"} spacing={0.5}>\n        {!outcome.actual && (\n          <>\n            <Value title={\"min\"}>\n              <Cash value={outcome.min} fallback={0} />\n            </Value>\n            <Value title={\"avg\"}>\n              <Cash value={outcome.avg} fallback={0} />\n            </Value>\n            <Value title={\"max\"}>\n              <Cash value={outcome.max} fallback={0} />\n            </Value>\n          </>\n        )}\n        {payDate && (\n          <Value\n            title={\"Actual\"}\n            secondaryValue={\n              <Until dateTime={payDate}>\n                <Cash value={outcome.actual} />\n              </Until>\n            }\n          >\n            <Duration dateTime={payDate}>\n              <Cash value={outcome.actual} />\n            </Duration>\n          </Value>\n        )}\n      </Stack>\n    </Box>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { useDateRanges } from \"shared/hooks/use-dates\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\nimport {\n  BonusOutcomes,\n  actualizedOutcome,\n  minMaxAvg,\n  scaleOutcome,\n} from \"shared/utility/min-max-avg\";\nimport { useBaseIncome } from \"./use-base-income\";\n\nexport const useJuneBonus = (year: number): BonusOutcomes => {\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  const dateRanges = useDateRanges(year);\n  const { totalIncome } = useBaseIncome(\n    dateRanges.companyBonus.start,\n    dateRanges.companyBonus.end\n  );\n\n  return useMemo(() => {\n    const mostRecentBonus = findSameYear(year, timeSeries.companyBonus);\n    const mostRecentPercent = findSameYear(year, timeSeries.companyBonusPct);\n\n    const meritFactor = timeSeries.meritBonusPct\n      .filter((x) => DateTime.fromISO(x.date).year <= year)\n      .slice(-3)\n      .reduce((acc, curr) => acc + curr.value, 0);\n\n    const outcomes = minMaxAvg(timeSeries.companyBonusPct.map((x) => x.value));\n    const cash = scaleOutcome(outcomes, meritFactor * totalIncome);\n    const projectedActual = mostRecentPercent?.value\n      ? mostRecentPercent?.value * meritFactor * totalIncome\n      : undefined;\n\n    return {\n      percent: actualizedOutcome({\n        ...outcomes,\n        actual: mostRecentPercent?.value,\n      }),\n      cash: actualizedOutcome({\n        ...cash,\n        actual: mostRecentBonus?.value ?? projectedActual,\n      }),\n    };\n  }, [\n    totalIncome,\n    timeSeries.companyBonus,\n    timeSeries.companyBonusPct,\n    timeSeries.meritBonusPct,\n    year,\n  ]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { useDateRanges } from \"shared/hooks/use-dates\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\nimport {\n  BonusOutcomes,\n  actualizedOutcome,\n  minMaxAvg,\n  scaleOutcome,\n} from \"shared/utility/min-max-avg\";\nimport { useBaseIncome } from \"./use-base-income\";\nimport { useMostFrequentValue } from \"./use-most-frequent-value\";\n\nexport const useMeritBonus = (year: number): BonusOutcomes => {\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  const ranges = useDateRanges(year);\n  const { totalIncome } = useBaseIncome(\n    ranges.meritBonus.start,\n    ranges.meritBonus.end\n  );\n\n  const bonusAmount = useMemo(() => {\n    return findSameYear(year, timeSeries.meritBonus)?.value;\n  }, [timeSeries.meritBonus, year]);\n\n  const bonusPercent = useMemo(() => {\n    return findSameYear(year, timeSeries.meritBonusPct)?.value;\n  }, [timeSeries.meritBonusPct, year]);\n\n  const frequentMeritBonusPercent = useMostFrequentValue(\n    timeSeries.meritBonusPct\n  );\n\n  return useMemo(() => {\n    const meritOutcome = minMaxAvg(\n      timeSeries.meritBonusPct\n        .filter((x) => DateTime.fromISO(x.date).year <= year)\n        .map((x) => x.value)\n    );\n    meritOutcome.avg = frequentMeritBonusPercent ?? 0;\n\n    return {\n      percent: actualizedOutcome({ ...meritOutcome, actual: bonusPercent }),\n      cash: actualizedOutcome({\n        ...scaleOutcome(meritOutcome, totalIncome),\n        actual:\n          bonusAmount ??\n          (bonusPercent ? totalIncome * bonusPercent : undefined),\n      }),\n    };\n  }, [\n    bonusAmount,\n    bonusPercent,\n    frequentMeritBonusPercent,\n    timeSeries.meritBonusPct,\n    totalIncome,\n    year,\n  ]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { useDateRanges } from \"shared/hooks/use-dates\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\nimport {\n  AddOutcome,\n  BonusOutcomes,\n  actualizedOutcome,\n  outcomeFromSingle,\n  scaleOutcome,\n} from \"shared/utility/min-max-avg\";\nimport { useBaseIncome } from \"./use-base-income\";\nimport { useJuneBonus } from \"./use-company-bonus\";\nimport { useMeritBonus } from \"./use-merit-bonus\";\n\nconst bonusPercent = 0.15;\nexport const useRetirementBonus = (year: number): BonusOutcomes => {\n  const actual = useStore(\n    store,\n    (x) =>\n      findSameYear(year, x.projectedIncome.timeSeries.retirementBonus)?.value\n  );\n\n  const dateRanges = useDateRanges(year);\n  const { totalIncome } = useBaseIncome(\n    dateRanges.retirementBonus.start,\n    dateRanges.retirementBonus.end\n  );\n\n  const meritBonus = useMeritBonus(year);\n  const juneBonus = useJuneBonus(year);\n\n  return useMemo(() => {\n    const eligibleIncome = outcomeFromSingle(totalIncome);\n    const outcome = scaleOutcome(\n      AddOutcome(\n        eligibleIncome,\n        actualizedOutcome(meritBonus.cash),\n        actualizedOutcome(juneBonus.cash)\n      ),\n      bonusPercent\n    );\n    return {\n      cash: actualizedOutcome({ ...outcome, actual: actual ?? outcome.actual }),\n      percent: {\n        min: 0.15,\n        max: 0.15,\n        avg: 0.15,\n        actual: 0.15,\n      },\n    };\n  }, [actual, juneBonus.cash, meritBonus.cash, totalIncome]);\n};\n","import { Box, Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo, useState } from \"react\";\nimport { useDateRanges, useDates } from \"shared/hooks/use-dates\";\nimport { store } from \"shared/store\";\nimport {\n  AddOutcome,\n  actualizedOutcome,\n  outcomeFromSingle,\n} from \"shared/utility/min-max-avg\";\nimport { BonusOutcome } from \"./components/bonus-outcome\";\nimport { Layout } from \"./components/data-entry/data-entry\";\nimport { MeritOutcome } from \"./components/merit-increase\";\nimport { Outcome } from \"./components/outcome\";\nimport { useBaseIncome } from \"./hooks/use-base-income\";\nimport { useJuneBonus } from \"./hooks/use-company-bonus\";\nimport { useMeritBonus } from \"./hooks/use-merit-bonus\";\nimport { useRetirementBonus } from \"./hooks/use-retirement-bonus\";\n\nexport const ProjectedIncome = () => {\n  const [year, setYear] = useState(DateTime.local().year);\n\n  const oldestYear = useStore(store, (x) => {\n    const first = x.projectedIncome.timeSeries.paycheck[1]?.date;\n    const date = first ? DateTime.fromISO(first) : DateTime.local();\n    return date.year;\n  });\n\n  const dates = useDates(year);\n  const { base } = useDateRanges(year);\n  const income = useBaseIncome(base.start, base.end);\n\n  const meritBonus = useMeritBonus(year);\n  const juneBonus = useJuneBonus(year);\n  const julyBonus = useRetirementBonus(year);\n\n  const incomeOutcome = useMemo(() => {\n    return AddOutcome(\n      outcomeFromSingle(income.totalIncome),\n      actualizedOutcome(meritBonus.cash),\n      actualizedOutcome(juneBonus.cash),\n      actualizedOutcome(julyBonus.cash)\n    );\n  }, [income, julyBonus, juneBonus, meritBonus]);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" height=\"100%\" gap={2}>\n      <Box flex=\"0 1 auto\">\n        <Stack gap={2} direction={\"row\"} overflow={\"auto\"}>\n          <Outcome\n            title={\n              <Box display=\"flex\" alignItems={\"center\"} gap={2} width={\"100%\"}>\n                <span>Income</span>\n                <DatePicker\n                  sx={{ width: 90, marginLeft: \"auto\", marginRight: 2 }}\n                  label={\"year\"}\n                  views={[\"year\"]}\n                  minDate={DateTime.local().set({ year: oldestYear })}\n                  maxDate={DateTime.local().plus({ years: 10 })}\n                  defaultValue={DateTime.local()}\n                  slotProps={{\n                    textField: {\n                      variant: \"standard\",\n                      label: \"\",\n                    },\n                  }}\n                  onYearChange={(year) => {\n                    setYear(year.year);\n                  }}\n                />\n              </Box>\n            }\n            outcome={incomeOutcome}\n            payDate={dates.companyBonus}\n          />\n          <MeritOutcome title=\"Merit Increase\" payDate={dates.meritIncrease} />\n          <BonusOutcome\n            title=\"Merit Bonus\"\n            outcome={meritBonus}\n            payDate={dates.meritBonus}\n          />\n          <BonusOutcome\n            title=\"Company Bonus\"\n            outcome={juneBonus}\n            payDate={dates.companyBonus}\n          />\n          <BonusOutcome\n            title=\"Retirement Bonus\"\n            outcome={julyBonus}\n            payDate={dates.retirementBonus}\n          />\n        </Stack>\n      </Box>\n      <Box flex=\"1 1 auto\">\n        <Box overflow={\"auto\"} width={\"100%\"} height={\"100%\"}>\n          <Box\n            height={\"100%\"}\n            display={\"flex\"}\n            gap={2}\n            flexWrap={\"nowrap\"}\n            flexShrink={0}\n          >\n            <Layout\n              accountName=\"paycheck\"\n              variant=\"cash\"\n              defaultDate={DateTime.fromObject({ day: 1, month: 4 })}\n              title=\"Income Per Check\"\n            />\n            <Layout\n              title=\"Merit Increase\"\n              accountName=\"meritIncreasePct\"\n              variant=\"percent\"\n              defaultDate={dates.meritIncrease}\n            />\n            <Layout\n              title=\"Equity Increase\"\n              accountName=\"equityPct\"\n              variant=\"percent\"\n              defaultDate={dates.meritIncrease}\n            />\n            <Layout\n              title=\"Merit Bonus\"\n              accountName=\"meritBonusPct\"\n              variant=\"percent\"\n              defaultDate={dates.meritBonus}\n            />\n            <Layout\n              title=\"Merit Bonus\"\n              accountName=\"meritBonus\"\n              variant=\"cash\"\n              defaultDate={dates.meritBonus}\n            />\n            <Layout\n              title=\"Company Bonus Factor\"\n              accountName=\"companyBonusPct\"\n              defaultDate={dates.companyBonus}\n              variant=\"percent\"\n            />\n            <Layout\n              title=\"Company Bonus\"\n              accountName=\"companyBonus\"\n              defaultDate={dates.companyBonus}\n              variant=\"cash\"\n            />\n            <Layout\n              title=\"Retirement Bonus\"\n              accountName=\"retirementBonus\"\n              defaultDate={dates.retirementBonus}\n              variant=\"cash\"\n            />\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { Account } from \"shared/models/account\";\nimport { Mortgage } from \"shared/models/mortgage\";\nimport { store } from \"shared/store\";\nimport { findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\n\nexport const getWealth = (date: DateTime, accounts: (Account | Mortgage)[]) => {\n  return Math.max(\n    1,\n    accounts\n      .map((x) => {\n        if (x.type === \"account\") {\n          const entry = findNearestOnOrBefore(date, x.data);\n          return entry?.value ?? 0;\n        } else if (x.type === \"mortgage\" && x.loan) {\n          const houseValue = findNearestOnOrBefore(date, x.data);\n          const balance = calcLoanBalance(date, x.loan);\n          return calcEquity(\n            x.loan.ownershipPct,\n            houseValue?.value,\n            balance,\n            x.loan.principal\n          );\n        }\n      })\n      .reduce((acc, curr) => acc! + (curr ?? 0), 0)!\n  );\n};\n\nexport const getEarliestEntry = (accounts: (Account | Mortgage)[]) => {\n  return DateTime.fromMillis(\n    accounts\n      .map((x) => {\n        if (x.type === \"account\") {\n          return x.data[0]?.date\n            ? DateTime.fromISO(x.data[0].date)\n            : DateTime.local();\n        }\n        return DateTime.local();\n      })\n      .reduce(\n        (acc, curr) => Math.min(acc, curr?.toMillis() ?? Infinity),\n        DateTime.local().toMillis()\n      )\n  );\n};\n\nexport const useYearlyWealth = (date: DateTime, benchmarkDate: DateTime) => {\n  const accounts = useStore(store, (x) => Object.values(x.wealth));\n\n  return useMemo(() => {\n    const earliest = getEarliestEntry(accounts);\n    if (earliest.year >= date.year) {\n      return { date, benchmarkDate, wealth: 0, yoyCash: 0, yoyPercent: 1 };\n    }\n\n    const currentDate = getWealth(date, accounts);\n    const benchmark = getWealth(benchmarkDate, accounts);\n\n    return {\n      date,\n      benchmarkDate,\n      wealth: currentDate,\n      benchmarkWealth: benchmark,\n      yoyCash: currentDate - benchmark,\n      yoyPercent: currentDate / benchmark,\n    };\n  }, [accounts, benchmarkDate, date]);\n};\n","import { DateTime } from \"luxon\";\nimport { useYearlyWealth } from \"./hooks/use-yearly-wealth\";\n\nexport const ProjectedWealth = () => {\n  return (\n    <>\n      {JSON.stringify(\n        useYearlyWealth(DateTime.local(), DateTime.fromObject({ year: 2024 })),\n        null,\n        2\n      )}\n      <br />\n      {JSON.stringify(\n        useYearlyWealth(\n          DateTime.fromObject({ year: 2024 }),\n          DateTime.fromObject({ year: 2022 })\n        ),\n        null,\n        2\n      )}\n      <br />\n      {JSON.stringify(\n        useYearlyWealth(\n          DateTime.fromObject({ year: 2023 }),\n          DateTime.fromObject({ year: 2022 })\n        ),\n        null,\n        2\n      )}\n      <br />\n      {JSON.stringify(\n        useYearlyWealth(\n          DateTime.fromObject({ year: 2022 }),\n          DateTime.fromObject({ year: 2021 })\n        ),\n        null,\n        2\n      )}\n      <br />\n      {JSON.stringify(\n        useYearlyWealth(\n          DateTime.fromObject({ year: 2021 }),\n          DateTime.fromObject({ year: 2020 })\n        ),\n        null,\n        2\n      )}\n      <br />\n      {JSON.stringify(\n        useYearlyWealth(\n          DateTime.fromObject({ year: 2020 }),\n          DateTime.fromObject({ year: 2019 })\n        ),\n        null,\n        2\n      )}\n      <br />\n    </>\n  );\n};\n\n/*\nShow Year+1 \n\nfuture savings:\n  +SSN \n  -Medicare surplus\n  +SDI limit\n  +Monthly Saving rate target\n  +Bonuses remaining\n    - April, June, July\n  +EOY home equity\n\n\nWhen do we hit SSN limit, 168600 2024\nwhen do we hit mediare surplus (.009 on all wages over 200k )\nwhen do we hit SDI limit\n\n\nShow all prior years on jan 1 20xx for which we have data\nYoY Growth in %\nYoY growth in $\n\n\n*/\n","import { Box, Button, ButtonProps } from \"@mui/material\";\nimport { ReactNode, useEffect, useState } from \"react\";\n\ntype SafetyState = \"inactive\" | \"activating\" | \"active\";\n\ninterface SafetyButtonProps {\n  inactiveLabel: string;\n  activatingLabel: string;\n  activeLabel: string;\n  icon?: ReactNode;\n  onConfirm: () => void;\n}\n\nexport const SafetyButton = (\n  props: Omit<ButtonProps, \"children\"> & SafetyButtonProps\n) => {\n  const {\n    inactiveLabel,\n    activatingLabel,\n    activeLabel,\n    onConfirm,\n    icon,\n    variant,\n    disabled,\n    ...rest\n  } = props;\n  const [safetyState, setSafetyState] = useState<SafetyState>(\"inactive\");\n\n  useEffect(() => {\n    if (safetyState === \"active\") {\n      setTimeout(() => {\n        setSafetyState((prev) => {\n          return prev === \"active\" ? \"inactive\" : prev;\n        });\n      }, 2000);\n    } else if (safetyState === \"activating\") {\n      setTimeout(() => {\n        setSafetyState(\"active\");\n      }, 2000);\n    }\n  }, [safetyState]);\n\n  return (\n    <Box\n      sx={{\n        minWidth: 130,\n        padding: safetyState === \"active\" ? \"8px\" : \"unset\",\n      }}\n    >\n      <Button\n        {...rest}\n        sx={{ height: \"100%\", width: \"100%\" }}\n        disabled={disabled || safetyState === \"activating\"}\n        variant={safetyState === \"active\" ? \"contained\" : variant}\n        size=\"small\"\n        onClick={() => {\n          safetyState === \"inactive\" && setSafetyState(\"activating\");\n          safetyState === \"active\" && onConfirm?.();\n        }}\n      >\n        {icon}\n        {safetyState === \"inactive\" && inactiveLabel}\n        {safetyState === \"activating\" && activatingLabel}\n        {safetyState === \"active\" && activeLabel}\n      </Button>\n    </Box>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useCallback } from \"react\";\nimport { store } from \"shared/store\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const useExport = () => {\n  const storeData = useStore(store);\n  const onExport = useCallback(() => {\n    const data = JSON.stringify(storeData, null, 2);\n    const link = document.createElement(\"a\");\n    link.download = `wealth-tracker-${DateTime.local().toFormat(\n      shortDate\n    )}.json`;\n    const blob = new Blob([data], { type: \"application/json\" });\n    link.href = window.URL.createObjectURL(blob);\n    link.click();\n  }, [storeData]);\n\n  return onExport;\n};\n","import { useCallback } from \"react\";\nimport { storeValidator } from \"shared/models/store\";\nimport { store } from \"shared/store\";\n\nfunction selectFile(contentType: string) {\n  return new Promise<File>((resolve) => {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.multiple = false;\n    input.accept = contentType;\n\n    input.onchange = () => {\n      const files = Array.from(input.files ?? []);\n      resolve(files[0]);\n    };\n\n    input.click();\n  });\n}\n\nexport const useImport = () => {\n  return useCallback(async () => {\n    const file = await selectFile(\"application/json\");\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = (readerEvent) => {\n      const content = readerEvent.target?.result?.toString();\n      if (content) {\n        const data = JSON.parse(window.atob(content.split(\",\")[1]));\n        const validation = storeValidator.safeParse(data);\n        validation.success && store.setState(() => data);\n      }\n    };\n  }, []);\n};\n","import DeleteForever from \"@mui/icons-material/DeleteForever\";\nimport { Box, Button, Stack, Tab, Tabs } from \"@mui/material\";\nimport { NetWealth } from \"capabilities/net-wealth\";\nimport { ProjectedIncome } from \"capabilities/projected-income\";\nimport { ProjectedWealth } from \"capabilities/projected-wealth\";\nimport { useState } from \"react\";\nimport { SafetyButton } from \"shared/components/safety-button\";\nimport { useExport } from \"shared/hooks/use-export\";\nimport { useImport } from \"shared/hooks/use-import\";\nimport { getDefaults } from \"shared/models/projected-wealth\";\nimport { store } from \"shared/store\";\n\nexport const App = () => {\n  const [tab, setTab] = useState<string>(\"projected-income\");\n  const onExport = useExport();\n  const onImport = useImport();\n  return (\n    <>\n      <Stack direction=\"row\">\n        <Tabs value={tab} onChange={(_, value) => setTab(value)}>\n          <Tab value=\"wealth\" label=\"Total Wealth\" />\n          <Tab value=\"projected-income\" label=\"Projected Income\" />\n          <Tab value=\"projected-wealth\" label=\"Projected Wealth\" />\n        </Tabs>\n        <Box marginLeft={\"auto\"} gap={2} display={\"flex\"}>\n          <Button onClick={onImport}>Import</Button>\n          <Button onClick={onExport}>Export</Button>\n          <SafetyButton\n            onConfirm={() => {\n              store.setState(() => getDefaults());\n            }}\n            inactiveLabel=\"Reset\"\n            activatingLabel=\"Wait\"\n            activeLabel=\"Confirm\"\n            color=\"error\"\n            icon={<DeleteForever />}\n          />\n        </Box>\n      </Stack>\n      <Box padding={2} height={\"95%\"} width={\"100%\"}>\n        {tab === \"wealth\" && <NetWealth />}\n        {tab === \"projected-income\" && <ProjectedIncome />}\n        {tab === \"projected-wealth\" && <ProjectedWealth />}\n      </Box>\n    </>\n  );\n};\n","import { CssBaseline, ThemeProvider, createTheme } from \"@mui/material\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers\";\nimport { AdapterLuxon } from \"@mui/x-date-pickers/AdapterLuxon\";\nimport \"ag-grid-community/styles/ag-grid.css\";\nimport \"ag-grid-community/styles/ag-theme-quartz.css\";\nimport { App } from \"app/app.tsx\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport \"./index.css\";\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: \"dark\",\n  },\n});\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <ErrorBoundary\n      fallbackRender={(props) => {\n        return (\n          <>\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.message}</div>\n            <div style={{ backgroundColor: \"#FFF\" }}>\n              {props.error.stackTrace}\n            </div>\n          </>\n        );\n      }}\n    >\n      <LocalizationProvider dateAdapter={AdapterLuxon}>\n        <ThemeProvider theme={darkTheme}>\n          <CssBaseline />\n          <App />\n        </ThemeProvider>\n      </LocalizationProvider>\n    </ErrorBoundary>\n  </React.StrictMode>\n);\n\n"],"names":["accountDataValidator","z","object","date","string","value","number","id","accountValidator","type","literal","data","array","loanValidator","principal","ratePct","paymentsPerYear","payment","firstPaymentDate","ownershipPct","mortgageValidator","loan","optional","wealth","record","union","projectedWealth","timeSeries","paycheck","retirementRate","savingsRate","meritBonusPct","companyBonusPct","meritBonus","companyBonus","retirementBonus","equityPct","meritIncreasePct","getDefaults","projectedIncome","storeValidator","createStore","key","validator","defaultValue","localData","localStorage","getItem","JSON","parse","safeParse","success","log","error","next","merge","setItem","stringify","store","CreateStore","subscribe","current","state","formatCashShort","Intl","NumberFormat","style","currency","notation","maximumFractionDigits","format","formatCash","getGraphDates","accounts","Set","flatMap","x","map","DateTime","fromISO","startOf","toISO","sort","a","b","toMillis","findNearestOnOrBefore","find","idx","length","calcLoanBalance","pricipal","rate","monthlyPayment","anualizedRate","periods","diff","months","totalRate","balance","calcEquity","houseValue","loanBalance","getMortgageValue","mortgage","entry","getAccountValue","account","getGraphValue","useGraphData","useStore","useMemo","dates","Object","values","entries","graphData","reduce","acc","accountName","toJSDate","total","forEach","arr","keys","firstNonZero","findIndex","slice","WealthChart","series","stacked","xKey","yKey","yName","tooltip","renderer","datum","content","fromJSDate","toISODate","options","theme","title","text","axes","position","label","NewAccount","forwardRef","props","ref","open","setOpen","useState","nameRef","useRef","setError","accountType","setAccountType","undefined","marginLeft","target","setState","create","prev","children","AgGrid","rest","height","AgGridReact","shortDate","sortByDate","select","direction","DeleteAccount","padding","width","onDeleteAccount","RenameAccount","nextAccountName","setNextAccountName","event","onUpdateName","createAccountColumnConfig","headerName","valueFormatter","toFormat","valueGetter","cellRenderer","idxToRemove","splice","DeleteForeverIcon","useMissingYears","years","groupBy","year","janFirst","fromObject","day","month","days","lookup","fromEntries","missing","i","push","AccountTab","setDate","local","amount","setAmount","missingYears","hasSameDate","hasSame","onAddEntry","toString","uuid","accountColumnConfig","join","color","startAdornment","AddEntry","Stack","selector","curr","convertPct","min","datetime","offset","AddLoan","textField","parsed","issues","path","mortgageColumnConfig","toFixed","equity","MortgageTab","allAccounts","mortgageData","AccountTabs","firstAccount","setAccount","useEffect","_","NetWealth","useDates","meritIncrease","aPayday","useDateRanges","base","start","end","endOf","minMaxAvg","max","avg","index","Math","Infinity","outcomeFromSingle","actual","actualizedOutcome","outcome","scaleOutcome","AddOutcome","outcomes","everyActualDefined","every","Cash","fallback","disableTooltip","compact","formatted","Duration","dateTime","countDownStr","diffNow","countDownColor","formatPercent","Percent","Value","secondaryValue","tertiaryValue","display","minWidth","flexDirection","justifyContent","alignItems","gap","flexShrink","BonusOutcome","payDate","border","borderRadius","paddingBottom","paddingLeft","paddingTop","paddingRight","cash","percent","variant","valueFormatted","UpdateIcon","editable","cellEditor","valueSetter","newValue","DataEntry","defaultDate","concat","console","flex","Layout","marginBottom","Until","findSameYear","DateRangesOverlap","getPayPeriods","anyPayday","abs","daysOffset","startPayDay","plus","numPayDays","weeks","payedOn","useMostFrequentValue","valueByDateRange","toSorted","minus","useProjectedPay","baseIncome","meritPct","payPerPeriod","mostRecentPay","startDate","multiplier","unshift","round","startIdx","useBaseIncome","endDate","pay","payPeriods","payDuringPeriod","filter","_pay","payPeriod","__pay","totalIncome","incomePerPeriod","reduceRight","perPayday","count","usePayCheck","payChecks","payCheck","IncomePerPeriodTooltip","ArrowForwardIcon","MeritOutcome","income","projectedPay","baseAprToApr","meritIncreases","commonMerit","totalAdjust","sx","maxWidth","Outcome","useJuneBonus","dateRanges","mostRecentBonus","mostRecentPercent","meritFactor","projectedActual","useMeritBonus","ranges","bonusAmount","bonusPercent","frequentMeritBonusPercent","meritOutcome","useRetirementBonus","juneBonus","eligibleIncome","ProjectedIncome","setYear","oldestYear","first","julyBonus","incomeOutcome","Box","marginRight","set","getWealth","getEarliestEntry","fromMillis","useYearlyWealth","benchmarkDate","earliest","yoyCash","yoyPercent","currentDate","benchmark","benchmarkWealth","ProjectedWealth","SafetyButton","inactiveLabel","activatingLabel","activeLabel","onConfirm","icon","disabled","safetyState","setSafetyState","setTimeout","useExport","storeData","onExport","useCallback","link","document","createElement","download","blob","Blob","href","window","URL","createObjectURL","click","selectFile","contentType","Promise","input","multiple","accept","onchange","files","Array","from","useImport","file","reader","FileReader","readAsDataURL","onload","readerEvent","result","atob","split","App","tab","setTab","onImport","DeleteForever","darkTheme","createTheme","palette","mode","ReactDOM","createRoot","getElementById","render","backgroundColor","message","stackTrace","AdapterLuxon"],"mappings":"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"}