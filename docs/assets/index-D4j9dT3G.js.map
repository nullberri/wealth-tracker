{"version":3,"file":"index-D4j9dT3G.js","sources":["../../src/shared/models/account-data.ts","../../src/shared/models/account.ts","../../src/shared/models/loan.ts","../../src/shared/models/mortgage.ts","../../src/shared/models/net-wealth.ts","../../src/shared/models/projected-wealth.ts","../../src/shared/models/store.ts","../../src/shared/store.ts","../../src/shared/utility/format-cash.ts","../../src/shared/utility/mortgage-calc.ts","../../src/shared/utility/graph-helpers.ts","../../src/capabilities/net-wealth/components/wealth-chart/use-graph-data.ts","../../src/capabilities/net-wealth/components/wealth-chart/wealth-chart.tsx","../../src/capabilities/net-wealth/components/new-account/new-account.tsx","../../src/shared/components/ag-grid/ag-grid.tsx","../../src/shared/utility/format-date.ts","../../src/shared/utility/sort-by-date.ts","../../src/capabilities/net-wealth/components/tab-types/components/delete-account.tsx","../../src/capabilities/net-wealth/components/tab-types/components/update-account.tsx","../../src/capabilities/net-wealth/components/tab-types/account/column-config.tsx","../../src/capabilities/net-wealth/components/tab-types/account/account.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/column-config.tsx","../../src/shared/utility/group-by.ts","../../src/capabilities/net-wealth/components/tab-types/mortgage/add-loan.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/add-entry.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/mortgage.tsx","../../src/capabilities/net-wealth/components/account-tabs/account-tabs.tsx","../../src/capabilities/net-wealth/net-wealth.tsx","../../src/shared/utility/min-max-avg.ts","../../src/capabilities/projected-income/components/value.tsx","../../src/shared/components/formatters/cash.tsx","../../src/shared/components/formatters/duration.tsx","../../src/shared/utility/format-percent.ts","../../src/shared/components/formatters/percent.tsx","../../src/shared/components/formatters/until.tsx","../../src/capabilities/projected-income/components/bonus-outcome.tsx","../../src/capabilities/projected-income/components/data-entry/column-config.tsx","../../src/capabilities/projected-income/components/data-entry/data-entry.tsx","../../src/capabilities/projected-income/components/merit-increase.tsx","../../src/capabilities/projected-income/components/outcome.tsx","../../src/capabilities/projected-income/hooks/use-base-income.ts","../../src/capabilities/projected-income/hooks/use-april-bonus.ts","../../src/capabilities/projected-income/hooks/use-june-bonus.ts","../../src/capabilities/projected-income/hooks/use-july-bonus.ts","../../src/capabilities/projected-income/projected-income.tsx","../../src/app/app.tsx","../../src/main.tsx"],"sourcesContent":["import { z } from \"zod\";\n\nexport const accountDataValidator = z.object({\n  date: z.string(),\n  value: z.number(),\n  id: z.string(),\n});\n\nexport type AccountData = z.infer<typeof accountDataValidator>;\n\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n\n","import { z } from \"zod\";\n\nexport const loanValidator = z.object({\n  principal: z.number(),\n  ratePct: z.number(),\n  paymentsPerYear: z.number(),\n  payment: z.number(),\n  firstPaymentDate: z.string(),\n  ownershipPct: z.number(),\n});\n\nexport type Loan = z.infer<typeof loanValidator>;\n\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\nimport { loanValidator } from \"./loan\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const projectedWealth = z.object({\n  timeSeries: z.object({\n    paycheck: z.array(accountDataValidator),\n    retirementRate: z.array(accountDataValidator),\n    savingsRate: z.array(accountDataValidator),\n    meritBonusPct: z.array(accountDataValidator),\n    companyBonusPct: z.array(accountDataValidator),\n    meritBonus: z.array(accountDataValidator),\n    companyBonus: z.array(accountDataValidator),\n    retirementBonus: z.array(accountDataValidator),\n    equityPct: z.array(accountDataValidator),\n    meritIncreasePct: z.array(accountDataValidator),\n  }),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type TimeSeries = keyof ProjectedWealth[\"timeSeries\"];\n","import { z } from \"zod\";\nimport { wealth } from \"./net-wealth\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  wealth: wealth,\n  projectedIncome: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { Store as CreateStore } from \"@tanstack/store\";\nimport merge from \"deepmerge\";\nimport { ZodSchema } from \"zod\";\nimport { Store, storeValidator } from \"./models/store\";\n\nconst createStore = <T extends object>(\n  key: string,\n  validator: ZodSchema,\n  defaultValue: T\n) => {\n  const localData = localStorage.getItem(key);\n  let data = localData ? JSON.parse(localData) : defaultValue;\n  const parse = validator.safeParse(data);\n\n  if (!parse.success) {\n    console.log(\"zod error\", parse.error);\n    console.log(\"original\", data);\n\n    const next = merge(data, defaultValue);\n    console.log(\"merged\", next);\n    localStorage.setItem(`${key}-previous`, JSON.stringify(data));\n    localStorage.setItem(key, JSON.stringify(next));\n    data = next;\n  }\n\n  const store = new CreateStore<T>(data);\n  store.subscribe(() => {\n    const current = localStorage.getItem(key);\n    current && localStorage.setItem(`${key}-previous`, current);\n    localStorage.setItem(key, JSON.stringify(store.state));\n  });\n\n  return store;\n};\n\nexport const store = createStore<Store>(\"store\", storeValidator, {\n  projectedIncome: {\n    timeSeries: {\n      paycheck: [],\n      retirementRate: [],\n      savingsRate: [],\n      meritBonusPct: [],\n      companyBonusPct: [],\n      meritBonus: [],\n      companyBonus: [],\n      retirementBonus: [],\n      equityPct: [],\n      meritIncreasePct: [],\n    },\n  },\n  wealth: {},\n});\n","export const formatCashShort = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  notation: \"compact\",\n  maximumFractionDigits: 1,\n}).format;\n\nexport const formatCash = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 0,\n}).format;\n","import { DateTime } from \"luxon\";\nimport { Loan } from \"shared/models/loan\";\n\nexport const calcLoanBalance = (date: DateTime, loan: Loan) => {\n  const {\n    firstPaymentDate,\n    paymentsPerYear,\n    principal: pricipal,\n    ratePct: rate,\n    payment: monthlyPayment,\n  } = loan;\n  const anualizedRate = rate / paymentsPerYear;\n  const periods = date.diff(\n    DateTime.fromISO(firstPaymentDate),\n    \"months\"\n  ).months;\n  const totalRate = (1 + anualizedRate) ** periods;\n  const balance =\n    pricipal * totalRate - (monthlyPayment / anualizedRate) * (totalRate - 1);\n\n  return balance;\n};\n\nexport const calcEquity = (\n  ownershipPct: number,\n  houseValue: number | undefined,\n  loanBalance: number,\n  principal: number\n) => {\n  return houseValue\n    ? houseValue * ownershipPct - loanBalance\n    : principal - loanBalance;\n};\n","import { DateTime } from \"luxon\";\nimport { Mortgage } from \"shared/models/mortgage\";\nimport { Account } from \"shared/models/account\";\nimport { calcEquity, calcLoanBalance } from \"./mortgage-calc\";\nimport { AccountData } from \"shared/models/account-data\";\n\nexport const findNearstOnOrBefore = (date: DateTime, data: AccountData[]) => {\n  return data.find((x, idx, array) => {\n    if (idx == 0 && DateTime.fromISO(x.date).startOf(\"day\") > date) {\n      return true;\n    }\n    if (idx < array.length - 1) {\n      if (\n        DateTime.fromISO(x.date).startOf(\"day\") <= date &&\n        DateTime.fromISO(data[idx + 1].date).startOf(\"day\") > date\n      ) {\n        return true;\n      }\n    }\n    if (idx === array.length - 1) {\n      return true;\n    }\n  });\n};\n\nexport const findSameYear = (date: DateTime, data: AccountData[]) => {\n  return data.find((x) => {\n    return DateTime.fromISO(x.date).year === date.year;\n  });\n};\n\nconst getMortgateValue = (date: DateTime, mortgage: Mortgage) => {\n  if (!mortgage.loan) {\n    return 0;\n  }\n  const entry = findNearstOnOrBefore(date, mortgage.data);\n  if (\n    entry?.date &&\n    mortgage.data[0] === entry &&\n    DateTime.fromISO(entry.date) > date\n  ) {\n    return 0;\n  }\n  const { ownershipPct, principal } = mortgage.loan;\n  const balance = calcLoanBalance(date, mortgage.loan);\n  return calcEquity(ownershipPct, entry?.value, balance, principal);\n};\n\nconst getAccountValue = (date: DateTime, account: Account) => {\n  const entry = findNearstOnOrBefore(date, account.data);\n  if (\n    entry?.date &&\n    account.data[0] === entry &&\n    DateTime.fromISO(entry.date) > date\n  ) {\n    return 0;\n  }\n  return entry?.value ?? 0;\n};\n\nexport const getGraphValue = (date: DateTime, account: Account | Mortgage) => {\n  switch (account.type) {\n    case \"account\":\n      return getAccountValue(date, account);\n    case \"mortgage\":\n      return getMortgateValue(date, account);\n  }\n};\n\nexport const getGraphDates = (accounts: (Account | Mortgage)[]) => {\n  return [\n    ...new Set(\n      accounts.flatMap((x) => {\n        return x.data.map((x) =>\n          DateTime.fromISO(x.date).startOf(\"day\").toISO()\n        );\n      })\n    ),\n  ]\n    .map((x) => DateTime.fromISO(x!))\n    .sort((a, b) => a.toMillis() - b.toMillis()) as DateTime<true>[];\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { getGraphDates, getGraphValue } from \"shared/utility/graph-helpers\";\n\nexport const useGraphData = () => {\n  const wealth = useStore(store, (x) => x.wealth);\n  return useMemo(() => {\n    const dates = getGraphDates(Object.values(wealth));\n    const accounts = Object.entries(wealth);\n    const graphData = dates.map((date) => {\n      return accounts.reduce(\n        (acc, [accountName, account]) => {\n          const value = getGraphValue(date, account);\n          acc[accountName] = value;\n          acc[\"total\"] = (acc[\"total\"] as number) + value;\n          acc[\"date\"] = date.toJSDate();\n          return acc;\n        },\n        { total: 0 } as Record<string, number | Date>\n      );\n    });\n    const firstNonZero = graphData.findIndex((x) => (x[\"total\"] as number) > 0);\n    return graphData.slice(firstNonZero);\n  }, [wealth]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport {\n  AgAreaSeriesOptions,\n  AgCartesianChartOptions,\n  AgLineSeriesOptions,\n} from \"ag-charts-community\";\nimport { AgChartsReact } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { formatCashShort } from \"shared/utility/format-cash\";\nimport { useGraphData } from \"./use-graph-data\";\n\nexport const WealthChart = () => {\n  const wealth = useStore(store, (x) => x.wealth);\n  const data = useGraphData();\n\n  const series = useMemo(() => {\n    return [\n      ...Object.keys(wealth).map((x) => {\n        return {\n          stacked: true,\n          type: \"area\",\n          xKey: \"date\",\n          yKey: x,\n          yName: x,\n          tooltip: {\n            renderer: ({ datum, yKey, xKey }) => ({\n              content: `${DateTime.fromJSDate(\n                datum[xKey]\n              ).toISODate()} ${formatCashShort(datum[yKey])}`,\n            }),\n          },\n        } as AgAreaSeriesOptions;\n      }),\n      {\n        type: \"line\",\n        xKey: \"date\",\n        yKey: \"total\",\n        yName: \"Total\",\n        tooltip: {\n          renderer: ({ datum, yKey, xKey }) => ({\n            content: `${DateTime.fromJSDate(\n              datum[xKey]\n            ).toISODate()} ${formatCashShort(datum[yKey])}`,\n          }),\n        },\n      } as AgLineSeriesOptions,\n    ];\n  }, [wealth]);\n\n  const options: AgCartesianChartOptions = useMemo(\n    () => ({\n      theme: \"ag-default-dark\",\n      title: {\n        text: `Total Wealth ${formatCashShort(\n          (data[data.length - 1]?.total ?? 0) as number\n        )}`,\n      },\n      data,\n      axes: [\n        {\n          type: \"time\",\n          position: \"bottom\",\n          label: {\n            format: \"%Y\",\n          },\n        },\n        {\n          type: \"number\",\n          position: \"left\",\n        },\n      ],\n      series,\n    }),\n    [data, series]\n  );\n  return <AgChartsReact options={options} />;\n};\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  MenuItem,\n  Stack,\n  TextField,\n} from \"@mui/material\";\nimport { create } from \"mutative\";\nimport { ReactNode, forwardRef, useRef, useState } from \"react\";\nimport { AssetType } from \"shared/models/asset-types\";\nimport { store } from \"shared/store\";\n\nexport const NewAccount = forwardRef<\n  HTMLButtonElement,\n  { children?: ReactNode }\n>((props, ref) => {\n  const [open, setOpen] = useState(false);\n  const nameRef = useRef<HTMLInputElement>(null);\n  const [error, setError] = useState(false);\n  const [accountType, setAccountType] = useState<AssetType>();\n\n  return (\n    <>\n      <Button\n        ref={ref}\n        onClick={() => {\n          setOpen(true);\n          setError(false);\n          setAccountType(undefined);\n        }}\n      >\n        add account\n      </Button>\n      <Dialog open={open} onClose={() => setOpen(false)}>\n        <DialogTitle>Add New Account</DialogTitle>\n        <DialogContent>\n          <Stack spacing={2} margin={2}>\n            <TextField\n              select\n              color={error ? \"error\" : \"primary\"}\n              onChange={(value) => {\n                setError(false);\n                setAccountType(value.target.value as AssetType);\n              }}\n              label=\"Type\"\n            >\n              <MenuItem value=\"mortgage\">Mortgage</MenuItem>\n              <MenuItem value=\"account\">Generic Account</MenuItem>\n            </TextField>\n\n            <TextField\n              placeholder=\"Name\"\n              onChange={() => {\n                setError(false);\n              }}\n              error={error}\n              inputRef={nameRef}\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            disabled={error}\n            onClick={() => {\n              store.setState((prev) => {\n                return create(prev, (next) => {\n                  if (\n                    !nameRef.current?.value ||\n                    !accountType ||\n                    prev.wealth[nameRef.current.value]\n                  ) {\n                    setError(true);\n                    return;\n                  }\n\n                  next.wealth[nameRef.current.value] = {\n                    type: accountType,\n                    data: [],\n                  };\n\n                  setOpen(false);\n                });\n              });\n            }}\n          >\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {props?.children}\n    </>\n  );\n});\n","import { AgGridReact, AgGridReactProps } from \"ag-grid-react\";\n\nexport const AgGrid = (props: AgGridReactProps & { id: string }) => {\n  const { id, ...rest } = props;\n  return (\n    <div id={id} className=\"ag-theme-quartz-dark\" style={{ height: \"100%\" }}>\n      <AgGridReact {...rest} />\n    </div>\n  );\n};\n","export const shortDate = \"yyyy-MM-dd\";\n","import { DateTime } from \"luxon\";\n\nexport const sortByDate =\n  <T>(select: (data: T) => DateTime, direction: \"asc\" | \"desc\") =>\n  (a: T, b: T) =>\n    direction === \"asc\"\n      ? select(a).toMillis() - select(b).toMillis()\n      : select(b).toMillis() - select(a).toMillis();\n","import { Button, Paper } from \"@mui/material\";\nimport { create } from \"mutative\";\nimport { store } from \"shared/store\";\n\nexport const DeleteAccount = (props: { accountName: string }) => {\n  const { accountName } = props;\n\n  const onDeleteAccount = () => {\n    store.setState((prev) => {\n      return create(prev, (next) => {\n        delete next.wealth[accountName];\n      });\n    });\n  };\n\n  return (\n    <Paper elevation={3} sx={{ padding: 2, width: \"100%\" }}>\n      <Button onClick={onDeleteAccount} color=\"error\">\n        Delete Account\n      </Button>\n    </Paper>\n  );\n};\n","import { Button, Paper, TextField, Stack } from \"@mui/material\";\nimport { create } from \"mutative\";\nimport { useState } from \"react\";\nimport { store } from \"shared/store\";\n\nexport const RenameAccount = (props: { accountName: string }) => {\n  const { accountName } = props;\n\n  const [nextAccountName, setNextAccountName] = useState<string>(accountName);\n\n  const onUpdateName = () => {\n    store.setState((prev) => {\n      return create(prev, (next) => {\n        next.wealth[nextAccountName] = next.wealth[accountName];\n        delete next.wealth[accountName];\n      });\n    });\n  };\n\n  return (\n    <Paper elevation={3} sx={{ padding: 2 }}>\n      <Stack spacing={1}>\n        <TextField\n          label=\"Account Name\"\n          value={nextAccountName}\n          onChange={(event) => setNextAccountName(event.target.value)}\n          placeholder=\"\"\n        />\n        <Button disabled={!nextAccountName} onClick={onUpdateName}>\n          Update Name\n        </Button>\n      </Stack>\n    </Paper>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport { Button } from \"@mui/material\";\nimport { ColDef } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { AccountData } from \"shared/models/account-data\";\nimport { store } from \"shared/store\";\nimport { formatCashShort } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (\n  accountName: string\n): ColDef<AccountData>[] => [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n  },\n  {\n    headerName: \"Value\",\n    valueGetter: (x) => x.data?.value,\n    valueFormatter: (x) => formatCashShort(x.value),\n    type: \"numericColumn\",\n  },\n  {\n    headerName: \"Actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            store.setState((prev) => {\n              return create(prev, (next) => {\n                const idxToRemove = next.wealth[accountName].data.findIndex(\n                  (x) => x.id === props.data?.id\n                );\n                next.wealth[accountName].data.splice(idxToRemove, 1);\n                return next;\n              });\n            });\n          }}\n          color=\"error\"\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n","import { Button, InputAdornment, Paper, Stack, TextField } from \"@mui/material\";\nimport Grid from \"@mui/system/Unstable_Grid\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { useMemo, useState } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { Account } from \"shared/models/account\";\nimport { store } from \"shared/store\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { sortByDate } from \"shared/utility/sort-by-date\";\nimport { v4 as uuid } from \"uuid\";\nimport { DeleteAccount } from \"../components/delete-account\";\nimport { RenameAccount } from \"../components/update-account\";\nimport { createAccountColumnConfig } from \"./column-config\";\n\nexport const AccountTab = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const account = useStore(\n    store,\n    (state) => state.wealth[accountName]\n  ) as Account;\n  const [date, setDate] = useState(DateTime.local());\n  const [amount, setamount] = useState(0);\n\n  const hasSameDate = useMemo(() => {\n    return !!account?.data?.find((x) =>\n      date.hasSame(DateTime.fromISO(x.date), \"day\")\n    );\n  }, [account?.data, date]);\n\n  const onAddEntry = () => {\n    store.setState((prev) => {\n      return create(prev, (next) => {\n        (next.wealth[accountName] as Account).data.push({\n          date: date.toString(),\n          value: amount,\n          id: uuid(),\n        });\n        next.wealth[accountName].data.sort(\n          sortByDate((x) => DateTime.fromISO(x.date), \"asc\")\n        );\n      });\n    });\n  };\n\n  const accountColumnConfig = useMemo(() => {\n    return createAccountColumnConfig(accountName);\n  }, [accountName]);\n\n  return (\n    <Grid container height=\"100%\" width={\"100%\"} padding={1} spacing={2}>\n      <Grid xs={3}>\n        <AgGrid\n          reactiveCustomComponents\n          rowData={account?.data ?? []}\n          columnDefs={accountColumnConfig}\n          id={account + \"-history\"}\n        />\n      </Grid>\n      <Grid xs={9}>\n        <div>\n          <Grid container spacing={2}>\n            <Grid xs={2}>\n              <Paper elevation={3} sx={{ padding: 2 }}>\n                <Stack spacing={1}>\n                  <DatePicker\n                    format={shortDate}\n                    sx={{ color: \"white\" }}\n                    label=\"Date\"\n                    defaultValue={date}\n                    onChange={(value) => value && setDate(value)}\n                  />\n                  <TextField\n                    label=\"amount\"\n                    value={amount}\n                    type=\"number\"\n                    onChange={(event) => setamount(+event.target.value)}\n                    InputProps={{\n                      startAdornment: (\n                        <InputAdornment position=\"start\">$</InputAdornment>\n                      ),\n                    }}\n                    placeholder=\"\"\n                  />\n                  <Button\n                    disabled={!amount || !date || hasSameDate}\n                    onClick={onAddEntry}\n                  >\n                    Add Entry\n                  </Button>\n                </Stack>\n              </Paper>\n            </Grid>\n            <Grid xs={8}></Grid>\n            <Grid xs={2}>\n              <Stack spacing={2}>\n                <DeleteAccount accountName={accountName} />\n                <RenameAccount accountName={accountName} />\n              </Stack>\n            </Grid>\n          </Grid>\n        </div>\n      </Grid>\n    </Grid>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport { Button } from \"@mui/material\";\nimport { ColDef } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { AccountData } from \"shared/models/account-data\";\nimport { store } from \"shared/store\";\nimport { formatCashShort } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (\n  accountName: string\n): ColDef<AccountData>[] => [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n  },\n  {\n    headerName: \"Home Value\",\n    valueGetter: (x) => x.data?.value,\n    valueFormatter: (x) => formatCashShort(x.value),\n    type: \"numericColumn\",\n  },\n  {\n    headerName: \"Actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            store.setState((prev) => {\n              return create(prev, (next) => {\n                const account = next.wealth[accountName];\n                const idxToRemove = account.data.findIndex(\n                  (x) => x.id === props.data?.id\n                );\n                account.data.splice(idxToRemove, 1);\n                return next;\n              });\n            });\n          }}\n          color=\"error\"\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n\nexport const mortgageColumnConfig: ColDef<{\n  date: DateTime;\n  balance: number;\n}>[] = [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data?.date,\n  },\n  {\n    headerName: \"Loan Balance\",\n    valueGetter: (x) => x.data?.balance.toFixed(2),\n    valueFormatter: (x) => formatCashShort(x.value),\n    type: \"numericColumn\",\n  },\n];\n","export function groupBy<T, T2 extends string | number | symbol>(\n  array: T[],\n  selector: (x: T) => T2\n): Record<T2, T[]> {\n  return array.reduce((acc: Record<T2, T[]>, curr: T) => {\n    const key = selector(curr);\n    acc[key] ??= [];\n    acc[key].push(curr);\n    return acc;\n  }, {} as Record<T2, T[]>);\n}\n","import { ZodIssue, z } from \"zod\";\nimport { Button, Paper, Stack, TextField } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { DateTime } from \"luxon\";\nimport { useRef, useState } from \"react\";\nimport { create } from \"mutative\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { Loan } from \"shared/models/loan\";\nimport { Mortgage } from \"shared/models/mortgage\";\nimport { store } from \"shared/store\";\nimport { groupBy } from \"shared/utility/group-by\";\n\nconst convertPct = (value: number) => {\n  return value > 1 ? value / 100 : value;\n};\n\nconst validator: z.ZodType<Loan> = z.object({\n  principal: z.number().min(0),\n  ratePct: z.number().min(0),\n  paymentsPerYear: z.number().min(0),\n  payment: z.number().min(0),\n  firstPaymentDate: z.string().datetime({ offset: true }),\n  ownershipPct: z.number().min(0),\n});\n\nexport const AddLoan = (props: { accountName: string }) => {\n  const { accountName } = props;\n\n  const loan = useStore(store, (x) => {\n    const account = x.wealth[accountName];\n    if (\"loan\" in account) {\n      return account.loan;\n    }\n  });\n\n  const ref = useRef<Partial<Loan>>(loan ?? {});\n  const [error, setError] = useState<Partial<Record<keyof Loan, ZodIssue>>>({});\n\n  return (\n    <Paper elevation={3} sx={{ padding: 2 }}>\n      <Stack spacing={1}>\n        <DatePicker\n          defaultValue={\n            ref.current?.firstPaymentDate\n              ? DateTime.fromISO(ref.current.firstPaymentDate)\n              : null\n          }\n          label=\"First Payment\"\n          slotProps={{\n            textField: {\n              error: !!error.firstPaymentDate,\n            },\n          }}\n          onChange={(value: DateTime | null) => {\n            if (value) {\n              ref.current.firstPaymentDate = value.toISO()!;\n            }\n          }}\n        />\n        <TextField\n          error={!!error.principal}\n          defaultValue={loan?.principal}\n          onChange={(event) => {\n            ref.current.principal = +event.target.value;\n          }}\n          variant=\"outlined\"\n          label=\"Principal\"\n          type=\"number\"\n        />\n        <TextField\n          error={!!error.ratePct}\n          defaultValue={loan?.ratePct}\n          onChange={(event) => {\n            ref.current.ratePct = convertPct(+event.target.value);\n          }}\n          variant=\"outlined\"\n          label=\"Rate\"\n          type=\"number\"\n        />\n        <TextField\n          error={!!error.paymentsPerYear}\n          defaultValue={loan?.paymentsPerYear}\n          onChange={(event) => {\n            ref.current.paymentsPerYear = +event.target.value;\n          }}\n          variant=\"outlined\"\n          label=\"Payments Per Year\"\n          type=\"number\"\n        />\n        <TextField\n          defaultValue={loan?.payment}\n          error={!!error.payment}\n          onChange={(event) => {\n            ref.current.payment = +event.target.value;\n          }}\n          variant=\"outlined\"\n          label=\"Payment\"\n          type=\"number\"\n        />\n        <TextField\n          defaultValue={loan?.ownershipPct}\n          error={!!error.ownershipPct}\n          onChange={(event) => {\n            ref.current.ownershipPct = convertPct(+event.target.value);\n          }}\n          variant=\"outlined\"\n          label=\"Ownership (%)\"\n          type=\"number\"\n        />\n        <Button\n          onClick={() => {\n            const parsed = validator.safeParse(ref.current);\n            if (parsed.success) {\n              setError({});\n              store.setState((prev) => {\n                return create(prev, (next) => {\n                  (next.wealth[accountName] as Mortgage).loan = parsed.data;\n                });\n              });\n            } else {\n              const issues = groupBy(parsed.error.issues, (x) =>\n                x.path.join(\"\")\n              );\n              setError(issues);\n            }\n          }}\n        >\n          Set Loan\n        </Button>\n      </Stack>\n    </Paper>\n  );\n};\n","import { Button, Paper, TextField } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { DateTime } from \"luxon\";\nimport { useRef } from \"react\";\nimport { store } from \"shared/store\";\nimport { create } from \"mutative\";\nimport { v4 as uuid } from \"uuid\";\n\nexport const AddEntry = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const ref = useRef<{ date?: DateTime; value?: number }>({\n    date: DateTime.local(),\n    value: 0,\n  });\n  const onAddEntry = () => {\n    const { date, value } = ref.current;\n    if (!date || !value) {\n      return;\n    }\n    store.setState((prev) => {\n      return create(prev, (next) => {\n        next.wealth[accountName].data.push({\n          date: date.toISO()!,\n          value,\n          id: uuid(),\n        });\n      });\n    });\n  };\n  return (\n    <Paper elevation={3} sx={{ padding: 2 }}>\n      <Stack spacing={1}>\n        <DatePicker\n          defaultValue={DateTime.local()}\n          onChange={(date: DateTime | null) => {\n            if (date) {\n              ref.current.date = date;\n            }\n          }}\n        />\n        <TextField\n          label=\"Home value\"\n          type=\"numeric\"\n          onChange={(event) => {\n            ref.current.value = +event.target.value;\n          }}\n        />\n        <Button onClick={onAddEntry}>Add Home Value</Button>\n      </Stack>\n    </Paper>\n  );\n};\n","import Grid from \"@mui/system/Unstable_Grid\";\nimport { store } from \"shared/store\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport {\n  createAccountColumnConfig,\n  mortgageColumnConfig,\n} from \"./column-config\";\nimport { AddLoan } from \"./add-loan\";\nimport { AddEntry } from \"./add-entry\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { Mortgage } from \"shared/models/mortgage\";\nimport { getGraphDates } from \"shared/utility/graph-helpers\";\nimport { calcLoanBalance } from \"shared/utility/mortgage-calc\";\nimport { DeleteAccount } from \"../components/delete-account\";\nimport { RenameAccount } from \"../components/update-account\";\nimport { Stack } from \"@mui/system\";\n\nexport const MortgageTab = (props: { accountName: string }) => {\n  const { accountName } = props;\n\n  const account = useStore(\n    store,\n    (state) => state.wealth[accountName]\n  ) as Mortgage;\n\n  const allAccounts = useStore(store, (x) => x.wealth);\n\n  const accountColumnConfig = useMemo(() => {\n    return createAccountColumnConfig(accountName);\n  }, [accountName]);\n\n  const mortgageData = useMemo(() => {\n    if (!account?.loan) {\n      return [];\n    }\n    return getGraphDates(Object.values(allAccounts)).map((date) => ({\n      date,\n      balance: calcLoanBalance(date, account.loan!),\n    }));\n  }, [account.loan, allAccounts]);\n\n  return (\n    <Grid container height=\"100%\" width={\"100%\"} padding={1} spacing={2}>\n      <Grid xs={3}>\n        <AgGrid\n          reactiveCustomComponents\n          rowData={account?.data ?? []}\n          columnDefs={accountColumnConfig}\n          id={account + \"-history\"}\n        />\n      </Grid>\n      <Grid xs={3}>\n        <AgGrid\n          rowData={mortgageData}\n          columnDefs={mortgageColumnConfig}\n          id={account + \"-history\"}\n        />\n      </Grid>\n      <Grid xs={6}>\n        <div>\n          <Grid container spacing={2}>\n            <Grid xs={3}>\n              <AddLoan accountName={accountName} />\n            </Grid>\n            <Grid xs={3}>\n              <AddEntry accountName={accountName} />\n            </Grid>\n            <Grid xs={3}></Grid>\n            <Grid xs={3}>\n              <Stack spacing={2}>\n                <DeleteAccount accountName={accountName} />\n                <RenameAccount accountName={accountName} />\n              </Stack>\n            </Grid>\n          </Grid>\n        </div>\n      </Grid>\n    </Grid>\n  );\n};\n","import { Box, Tab, Tabs } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useEffect, useState } from \"react\";\nimport { store } from \"shared/store\";\nimport { NewAccount } from \"../new-account\";\nimport { AccountTab } from \"../tab-types/account/account\";\nimport { MortgageTab } from \"../tab-types/mortgage\";\n\nexport const AccountTabs = () => {\n  const accounts = useStore(store, (x) => x.wealth);\n  const firstAccount = Object.keys(accounts)?.[0] ?? \"\";\n  const [account, setAccount] = useState<string>(firstAccount);\n\n  useEffect(() => {\n    if (!accounts[account]) {\n      setAccount(Object.keys(accounts)?.[0] ?? \"\");\n    }\n  }, [account, accounts]);\n\n  return (\n    <Box display=\"flex\" flexDirection={\"column\"} width=\"100%\" height=\"100%\">\n      <Box display={\"flex\"} flex={\"0 1 auto\"}>\n        <Tabs\n          value={account}\n          defaultValue={firstAccount}\n          onChange={(_, value) => {\n            setAccount(value as string);\n          }}\n        >\n          {Object.keys(accounts).map((account) => {\n            return <Tab key={account} value={account} label={account} />;\n          })}\n          <Tab component={NewAccount} />\n        </Tabs>\n      </Box>\n      <Box flex={\"1 1 auto\"}>\n        {accounts[account]?.type === \"account\" && (\n          <AccountTab accountName={account} />\n        )}\n        {accounts[account]?.type === \"mortgage\" && (\n          <MortgageTab accountName={account} />\n        )}\n      </Box>\n    </Box>\n  );\n};\n","import Grid from \"@mui/system/Unstable_Grid\";\nimport { WealthChart } from \"./components/wealth-chart\";\nimport { AccountTabs } from \"./components/account-tabs\";\n\nexport const NetWealth = () => {\n  return (\n    <Grid container height={\"100%\"} width=\"100%\">\n      <Grid xs={12} height=\"50%\">\n        <WealthChart />\n      </Grid>\n      <Grid xs={12} height=\"50%\">\n        <AccountTabs />\n      </Grid>\n    </Grid>\n  );\n};\n","export interface Outcome {\n  min: number;\n  max: number;\n  avg: number;\n  actual?: number;\n}\n\nexport interface BonusOutcomes {\n  percent: Outcome;\n  cash: Outcome;\n}\n\nexport const minMaxAvg = (values: number[]): Outcome => {\n  if (values.length === 0) {\n    return { min: 0, max: 0, avg: 0 };\n  }\n  return values.reduce(\n    (acc, curr, index, arr) => {\n      const { min, max, avg } = acc;\n      return {\n        min: Math.min(curr, min),\n        max: Math.max(curr, max),\n        avg: index === arr.length - 1 ? (avg + curr) / arr.length : avg + curr,\n      };\n    },\n    { min: Infinity, max: 0, avg: 0 }\n  );\n};\n\nexport const outcomeFromSingle = (value: number): Outcome => {\n  return { min: value, max: value, avg: value, actual: value };\n};\n\nexport const scaleOutcome = (outcome: Outcome, value: number): Outcome => {\n  return {\n    min: outcome.min * value,\n    max: outcome.max * value,\n    avg: outcome.avg * value,\n    actual: outcome.actual ? outcome.actual * value : undefined,\n  };\n};\nexport const AddConstantOutcome = (\n  outcome: Outcome,\n  value: number\n): Outcome => {\n  return {\n    min: outcome.min + value,\n    max: outcome.max + value,\n    avg: outcome.avg + value,\n    actual: outcome.actual ? outcome.actual + value : undefined,\n  };\n};\n\nexport const MultiplyOutcome = (\n  outcomeA: Outcome,\n  outcomeB: Outcome\n): Outcome => {\n  return {\n    min: outcomeA.min * outcomeB.min,\n    max: outcomeA.max * outcomeB.max,\n    avg: outcomeA.avg * outcomeB.avg,\n    actual:\n      outcomeA.actual != undefined && outcomeB.actual != undefined\n        ? outcomeA.actual * outcomeB.avg\n        : undefined,\n  };\n};\n\nexport const AddOutcome = (...outcomes: Outcome[]): Outcome => {\n  const everyActualDefined = outcomes.every((x) => x.actual != undefined);\n  return outcomes.reduce(\n    (acc, curr) => {\n      return {\n        min: acc.min + curr.min,\n        avg: acc.avg + curr.avg,\n        max: acc.max + curr.max,\n        actual: everyActualDefined\n          ? (acc.actual ?? 0) + (curr.actual ?? 0)\n          : undefined,\n      };\n    },\n    { min: 0, max: 0, avg: 0, actual: undefined }\n  );\n};\n","import { Box } from \"@mui/material\";\nimport { ReactNode } from \"react\";\n\ninterface CellProps {\n  children?: ReactNode;\n  secondaryValue?: ReactNode;\n  title: string;\n}\n\nexport const Value = (props: CellProps) => {\n  const { children, secondaryValue, title } = props;\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        minWidth: 106,\n\n        height: 64,\n        padding: \"0px 8px\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"flex-start\",\n        gap: 0.5,\n        flexShrink: 0,\n      }}\n    >\n      <Box display={\"flex\"} alignItems={\"center\"} gap={0.5}>\n        <Box fontSize={18} fontWeight={700} lineHeight={\"20px\"}>\n          {children ? children : \"??\"}\n        </Box>\n        {!!secondaryValue && (\n          <Box\n            alignSelf={\"flex-end\"}\n            fontSize={12}\n            fontWeight={500}\n            lineHeight={\"16px\"}\n            textTransform={\"uppercase\"}\n            color={\"#888\"}\n          >\n            {secondaryValue}\n          </Box>\n        )}\n      </Box>\n      <Box\n        fontSize={12}\n        fontWeight={500}\n        lineHeight={\"16px\"}\n        textTransform={\"uppercase\"}\n      >\n        {title}\n      </Box>\n    </Box>\n  );\n};\n","import { formatCashShort } from \"shared/utility/format-cash\";\n\ninterface CashProps {\n  value?: number;\n}\nexport const Cash = ({ value }: CashProps) => {\n  return value ? formatCashShort(value) : null;\n};\n","import { Box } from \"@mui/material\";\nimport { DateTime } from \"luxon\";\nimport { ReactNode, useMemo } from \"react\";\n\ninterface DurationProps {\n  dateTime: DateTime;\n  children?: ReactNode;\n}\nexport const Duration = ({ dateTime, children }: DurationProps) => {\n  const countDownStr = useMemo(\n    () => dateTime.diffNow([\"months\", \"days\", \"hours\"]).toFormat(\"d'd'\"),\n    [dateTime]\n  );\n\n  const countDownColor = useMemo(() => {\n    const days = dateTime.diffNow(\"days\").days;\n    if (days < 30) {\n      return \"green\";\n    } else if (days < 60) {\n      return \"yellow\";\n    }\n    return \"red\";\n  }, [dateTime]);\n\n  return dateTime > DateTime.local() ? (\n    <Box color={countDownColor}>{countDownStr}</Box>\n  ) : (\n    children\n  );\n};\n","export const formatPercent = new Intl.NumberFormat(\"en-us\", {\n  style: \"percent\",\n  maximumFractionDigits: 1,\n}).format;\n","import { formatPercent } from \"shared/utility/format-percent\";\n\ninterface PercentProps {\n  value: number;\n}\nexport const Percent = ({ value }: PercentProps) => {\n  return formatPercent(value);\n};\n","import { DateTime } from \"luxon\";\nimport { ReactNode } from \"react\";\n\ninterface UntilProps {\n  dateTime: DateTime;\n  children: ReactNode;\n}\n\nexport const Until = (props: UntilProps) => {\n  const { dateTime, children } = props;\n  return DateTime.local() < dateTime && children;\n};\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\nimport { BonusOutcomes } from \"shared/utility/min-max-avg\";\nimport { Value } from \"./value\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Duration } from \"shared/components/formatters/duration\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { Until } from \"shared/components/formatters/until\";\n\nexport const BonusOutcome = (props: {\n  title: string;\n  outcome: BonusOutcomes;\n  payDate: DateTime;\n}) => {\n  const { outcome, title, payDate } = props;\n\n  return (\n    <Box sx={{ border: \"1px solid rgba(255,255,255,0.1)\", borderRadius: 2 }}>\n      <Typography\n        sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1 }}\n        variant=\"h5\"\n      >\n        {title}\n      </Typography>\n      <Divider />\n      <Stack padding={1} direction={\"row\"} spacing={0.5}>\n        <Value\n          secondaryValue={<Percent value={outcome.percent.min} />}\n          title={\"min\"}\n        >\n          <Cash value={outcome.cash.min} />\n        </Value>\n        <Value\n          secondaryValue={<Percent value={outcome.percent.avg} />}\n          title={\"avg\"}\n        >\n          <Cash value={outcome.cash.avg} />\n        </Value>\n        <Value\n          secondaryValue={<Percent value={outcome.percent.max} />}\n          title={\"max\"}\n        >\n          <Cash value={outcome.cash.max} />\n        </Value>\n        <Value\n          title={\"Actual\"}\n          secondaryValue={\n            <Until dateTime={payDate}>\n              <Cash value={outcome.cash.actual} />\n            </Until>\n          }\n        >\n          <Duration dateTime={payDate}>\n            <Cash value={outcome.cash.actual} />\n          </Duration>\n        </Value>\n      </Stack>\n    </Box>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport { Button, Tooltip } from \"@mui/material\";\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { AccountData } from \"shared/models/account-data\";\nimport { TimeSeries } from \"shared/models/projected-wealth\";\nimport { store } from \"shared/store\";\nimport { formatCash } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport UpdateIcon from \"@mui/icons-material/Update\";\nimport { Stack } from \"@mui/system\";\n\nexport const createAccountColumnConfig = (\n  accountName: TimeSeries,\n  variant: \"number\" | \"cash\" | \"percent\"\n): ColDef<AccountData>[] => [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\n      return (\n        <Stack direction={\"row\"} alignItems={\"center\"}>\n          {x.valueFormatted}&nbsp;\n          {x.value && x.value > DateTime.local() && (\n            <Tooltip title=\"Future Event\">\n              <UpdateIcon htmlColor=\"yellow\" />\n            </Tooltip>\n          )}\n        </Stack>\n      );\n    },\n  },\n  {\n    headerName: \"Value\",\n    valueGetter: (x) => x.data?.value,\n    valueFormatter: (x) =>\n      variant === \"number\"\n        ? x.value\n        : variant === \"cash\"\n        ? formatCash(x.value)\n        : (x.value * 100).toFixed(2) + \"%\",\n    type: \"numericColumn\",\n    editable: true,\n    cellEditor: \"agNumberCellEditor\",\n    valueSetter: (x) => {\n      store.setState((prev) => {\n        const next = create(prev, (next) => {\n          const account = next.projectedIncome.timeSeries[accountName];\n          const idx = account.findIndex(({ id }) => id === x.data.id);\n          account[idx].value = +x.newValue;\n        });\n        return next;\n      });\n      return true;\n    },\n  },\n  {\n    headerName: \"Actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            store.setState((prev) => {\n              return create(prev, (next) => {\n                const idxToRemove = next.projectedIncome.timeSeries[\n                  accountName\n                ].findIndex((x) => x.id === props.data?.id);\n                next.projectedIncome.timeSeries[accountName].splice(\n                  idxToRemove,\n                  1\n                );\n              });\n            });\n          }}\n          color=\"error\"\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n","import {\n  Box,\n  Button,\n  InputAdornment,\n  Paper,\n  Stack,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { useMemo, useState } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { TimeSeries } from \"shared/models/projected-wealth\";\nimport { store } from \"shared/store\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { sortByDate } from \"shared/utility/sort-by-date\";\nimport { v4 as uuid } from \"uuid\";\nimport { createAccountColumnConfig } from \"./column-config\";\n\nexport const DataEntry = (props: {\n  accountName: TimeSeries;\n  defaultDate: DateTime;\n  variant?: \"number\" | \"cash\" | \"percent\";\n}) => {\n  const { accountName, defaultDate, variant = \"number\" } = props;\n  const account = useStore(\n    store,\n    (state) => state.projectedIncome.timeSeries[accountName]\n  );\n\n  const [date, setDate] = useState(defaultDate);\n  const [amount, setAmount] = useState<number | null>(null);\n\n  const hasSameDate = useMemo(() => {\n    return !!account?.find((x) =>\n      date.hasSame(DateTime.fromISO(x.date), \"day\")\n    );\n  }, [account, date]);\n\n  const onAddEntry = () => {\n    amount != null &&\n      store.setState((prev) => {\n        return create(prev, (next) => {\n          next.projectedIncome.timeSeries[accountName] =\n            next.projectedIncome.timeSeries[accountName]\n              .concat({\n                date: date.toString(),\n                value: variant === \"percent\" ? amount / 100 : amount,\n                id: uuid(),\n              })\n              .sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\n        });\n      });\n  };\n\n  const accountColumnConfig = useMemo(() => {\n    return createAccountColumnConfig(accountName, variant);\n  }, [accountName, variant]);\n\n  return (\n    <Box display={\"flex\"} flexDirection={\"column\"} height=\"100%\">\n      <Stack spacing={2} flex=\"0 1 auto\">\n        <DatePicker\n          format={shortDate}\n          sx={{ color: \"white\" }}\n          label=\"Date\"\n          value={date}\n          onChange={(value) => {\n            console.log(value);\n            value && setDate(value);\n          }}\n        />\n        <TextField\n          label=\"amount\"\n          value={amount ?? \"\"}\n          type=\"number\"\n          onChange={(event) =>\n            event.target.value === \"\"\n              ? setAmount(null)\n              : setAmount(+event.target.value)\n          }\n          InputProps={{\n            startAdornment: variant !== \"number\" && (\n              <InputAdornment position=\"start\">\n                {variant === \"cash\" ? \"$\" : \"%\"}\n              </InputAdornment>\n            ),\n          }}\n        />\n        <Button\n          disabled={amount === null || !date || hasSameDate}\n          onClick={onAddEntry}\n        >\n          Add Entry\n        </Button>\n      </Stack>\n      <Box sx={{ paddingTop: 2, flex: \"1 1 auto\" }}>\n        <AgGrid\n          reactiveCustomComponents\n          rowData={account ?? []}\n          columnDefs={accountColumnConfig}\n          id={account + \"-history\"}\n          autoSizeStrategy={{\n            type: \"fitGridWidth\",\n          }}\n          stopEditingWhenCellsLoseFocus\n        />\n      </Box>\n    </Box>\n  );\n};\n\nexport interface LayoutProps {\n  title: string;\n  accountName: TimeSeries;\n  defaultDate: DateTime;\n  variant: \"percent\" | \"number\" | \"cash\";\n}\n\nexport const Layout = (props: LayoutProps) => {\n  const { title, accountName, defaultDate, variant } = props;\n  return (\n    <Paper sx={{ padding: 2, height: \"100%\", width: 450, flexShrink: 0 }}>\n      <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\n        <Box flex=\"0 1 auto\" marginBottom={2}>\n          <Typography sx={{ marginBottom: 2 }} variant=\"h5\">\n            {title}\n          </Typography>\n        </Box>\n        <Box flex=\"1 1 auto\">\n          <DataEntry\n            variant={variant}\n            accountName={accountName}\n            defaultDate={defaultDate}\n          />\n        </Box>\n      </Box>\n    </Paper>\n  );\n};\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Duration } from \"shared/components/formatters/duration\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { Until } from \"shared/components/formatters/until\";\nimport { store } from \"shared/store\";\nimport {\n  findNearstOnOrBefore as findNearestOnOrBefore,\n  findSameYear,\n} from \"shared/utility/graph-helpers\";\nimport { Value } from \"./value\";\n\nexport const MeritOutcome = (props: { title: string; payDate: DateTime }) => {\n  const { title, payDate } = props;\n\n  const income = useStore(store, (x) =>\n    findNearestOnOrBefore(payDate, x.projectedIncome.timeSeries.paycheck)\n  );\n  const meritPct = useStore(\n    store,\n    (x) =>\n      payDate &&\n      findNearestOnOrBefore(\n        payDate,\n        x.projectedIncome.timeSeries.meritIncreasePct\n      )\n  );\n\n  const equityPct = useStore(\n    store,\n    (x) =>\n      payDate && findSameYear(payDate, x.projectedIncome.timeSeries.equityPct)\n  );\n\n  const totalAdjust = (meritPct?.value ?? 0) + (equityPct?.value ?? 0);\n  const multiplier = DateTime.local() < payDate ? 1 + totalAdjust : 1;\n  return (\n    <Box\n      sx={{\n        border: \"1px solid rgba(255,255,255,0.1)\",\n        borderRadius: 2,\n      }}\n    >\n      <Typography\n        sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1 }}\n        variant=\"h5\"\n      >\n        {title}\n      </Typography>\n      <Divider />\n\n      <Stack padding={1} direction={\"row\"} spacing={0.5}>\n        <Value\n          title={\"Paycheck\"}\n          secondaryValue={<Percent value={totalAdjust} />}\n        >\n          <Cash value={(income?.value ?? 0) * multiplier} />\n        </Value>\n        <Value\n          title={\"Base Pay\"}\n          secondaryValue={<Percent value={totalAdjust} />}\n        >\n          <Cash value={(income?.value ?? 0) * multiplier * 26} />\n        </Value>\n        <Value\n          title={\"Actual\"}\n          secondaryValue={\n            <Until dateTime={payDate}>\n              <Percent value={totalAdjust} />\n            </Until>\n          }\n        >\n          <Duration dateTime={payDate}>\n            <Percent value={totalAdjust} />\n          </Duration>\n        </Value>\n      </Stack>\n    </Box>\n  );\n};\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\nimport { Outcome as TOutcome } from \"shared/utility/min-max-avg\";\nimport { Value } from \"./value\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Duration } from \"shared/components/formatters/duration\";\nimport { Until } from \"shared/components/formatters/until\";\nimport { ReactNode } from \"react\";\n\nexport const Outcome = (props: {\n  title: ReactNode;\n  outcome: TOutcome;\n  payDate?: DateTime;\n}) => {\n  const { outcome, title, payDate } = props;\n\n  return (\n    <Box\n      sx={{\n        border: \"1px solid rgba(255,255,255,0.1)\",\n        borderRadius: 2,\n      }}\n    >\n      <Typography\n        sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1 }}\n        variant=\"h5\"\n      >\n        {title}\n      </Typography>\n      <Divider />\n\n      <Stack padding={1} direction={\"row\"} spacing={0.5}>\n        <Value title={\"min\"}>\n          <Cash value={outcome.min} />\n        </Value>\n        <Value title={\"avg\"}>\n          <Cash value={outcome.avg} />\n        </Value>\n        <Value title={\"max\"}>\n          <Cash value={outcome.max} />\n        </Value>\n        {payDate && (\n          <Value\n            title={\"Actual\"}\n            secondaryValue={\n              <Until dateTime={payDate}>\n                <Cash value={outcome.actual} />\n              </Until>\n            }\n          >\n            <Duration dateTime={payDate}>\n              <Cash value={outcome.actual} />\n            </Duration>\n          </Value>\n        )}\n      </Stack>\n    </Box>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { AccountData } from \"shared/models/account-data\";\nimport { store } from \"shared/store\";\nimport {\n  findNearstOnOrBefore,\n  findSameYear,\n} from \"shared/utility/graph-helpers\";\nimport { sortByDate } from \"shared/utility/sort-by-date\";\n\nconst valueByDateRange = (account: AccountData[]) => {\n  return account\n    .toSorted(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"))\n    .map((x, index, array) => {\n      const next = array[index + 1];\n      return [\n        DateTime.fromISO(x.date),\n        (next?.date\n          ? DateTime.fromISO(next?.date).startOf(\"day\")\n          : DateTime.fromISO(x.date).startOf(\"day\").plus({ years: 1 })\n        ).minus({ days: 1 }),\n        x.value,\n      ] as const;\n    });\n};\n\nexport const useBaseIncome = (startDate: DateTime, endDate: DateTime) => {\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  const baseIncome = timeSeries.paycheck;\n\n  const lastMerit = useMemo(() => {\n    const endOfYear = DateTime.fromObject({ day: 31, month: 12 });\n    return (\n      1 +\n      (findNearstOnOrBefore(endOfYear, timeSeries.meritIncreasePct)?.value ?? 0)\n    );\n  }, [timeSeries.meritIncreasePct]);\n\n  return useMemo(() => {\n    const payPerPeriod = valueByDateRange(baseIncome);\n    const mostRecentPay =\n      payPerPeriod.length > 0\n        ? payPerPeriod[payPerPeriod.length - 1]\n        : ([startDate, endDate, 1] as const);\n    const projectedPayPerPeriod = Array(10)\n      .fill(mostRecentPay)\n      .map(([start, end, value]: [DateTime, DateTime, number], index) => {\n        const startDate = start.plus({ years: index + 1 });\n        return [\n          startDate,\n          end.plus({ years: index + 1 }),\n          value *\n            (lastMerit +\n              (findSameYear(startDate, timeSeries.equityPct)?.value ?? 0)) **\n              (index + 1),\n        ] as const;\n      });\n\n    const combinedPayPerPeriod = [\n      ...payPerPeriod,\n      ...projectedPayPerPeriod,\n    ].filter(([start, end]) => {\n      const rangeOutside = startDate <= start && endDate >= end;\n      const rangeInside = startDate >= start && end >= endDate;\n      const overlapEnd = startDate <= start && endDate < end && endDate > start;\n      const overlapStart =\n        startDate <= end && startDate >= start && endDate > end;\n      return rangeInside || rangeOutside || overlapEnd || overlapStart;\n    });\n\n    const x = combinedPayPerPeriod.map(([start, end, value]) => {\n      return [\n        DateTime.max(start, startDate),\n        DateTime.min(end, endDate),\n        value,\n      ] as const;\n    });\n\n    const incomePerPeriod = x.map(([start, end, value]) => {\n      return (end.diff(start, \"weeks\").weeks / 2) * value;\n    });\n\n    const income = Math.round(\n      incomePerPeriod.reduce((acc, curr) => acc + curr, 0)\n    );\n\n    return income;\n  }, [baseIncome, startDate, endDate, lastMerit, timeSeries.equityPct]);\n};\n","import { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { useBaseIncome } from \"./use-base-income\";\nimport { store } from \"shared/store\";\nimport { useStore } from \"@tanstack/react-store\";\nimport {\n  BonusOutcomes,\n  scaleOutcome,\n  minMaxAvg,\n} from \"shared/utility/min-max-avg\";\nimport { findSameYear } from \"shared/utility/graph-helpers\";\n\nexport const useAprilBonus = (year: number): BonusOutcomes => {\n  const payedOn = useMemo(\n    () => DateTime.fromObject({ day: 15, month: 4, year }),\n    [year]\n  );\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  const income = useBaseIncome(\n    DateTime.fromObject({ day: 1, month: 1, year: year - 1 }),\n    DateTime.fromObject({ day: 1, month: 1, year })\n  );\n\n  const bonusAmmount = useMemo(() => {\n    return findSameYear(payedOn, timeSeries.meritBonus)?.value;\n  }, [payedOn, timeSeries.meritBonus]);\n\n  const bonusPercent = useMemo(() => {\n    return findSameYear(payedOn, timeSeries.meritBonusPct)?.value;\n  }, [payedOn, timeSeries.meritBonusPct]);\n\n  return useMemo(() => {\n    const meritOutcome = minMaxAvg(\n      timeSeries.meritBonusPct\n        .filter((x) => DateTime.fromISO(x.date).year <= year)\n        .slice(-3)\n        .map((x) => x.value)\n    );\n\n    return {\n      percent: { ...meritOutcome, actual: bonusPercent },\n      cash: {\n        ...scaleOutcome(meritOutcome, income),\n        actual: bonusAmmount,\n      },\n    };\n  }, [bonusAmmount, bonusPercent, income, timeSeries.meritBonusPct, year]);\n};\n","import { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { useBaseIncome } from \"./use-base-income\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/graph-helpers\";\nimport {\n  BonusOutcomes,\n  scaleOutcome,\n  minMaxAvg,\n} from \"shared/utility/min-max-avg\";\n\nexport const useJuneBonus = (year: number): BonusOutcomes => {\n  const payedOn = useMemo(\n    () => DateTime.fromObject({ day: 15, month: 6, year }),\n    [year]\n  );\n  const timeseries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  const income = useBaseIncome(\n    DateTime.fromObject({ day: 1, month: 4, year: year - 1 }),\n    DateTime.fromObject({ day: 31, month: 3, year })\n  );\n\n  return useMemo(() => {\n    const mostRecentBonus = findSameYear(payedOn, timeseries.companyBonus);\n    const mostRecentPercent = findSameYear(payedOn, timeseries.companyBonusPct);\n\n    const meritFactor = timeseries.meritBonusPct\n      .filter((x) => DateTime.fromISO(x.date).year <= year)\n      .slice(-3)\n      .reduce((acc, curr) => acc + curr.value, 0);\n\n    const outcomes = minMaxAvg(timeseries.companyBonusPct.map((x) => x.value));\n\n    const cash = scaleOutcome(outcomes, meritFactor * income);\n\n    return {\n      percent: { ...outcomes, actual: mostRecentPercent?.value },\n      cash: { ...cash, actual: mostRecentBonus?.value },\n    };\n  }, [\n    income,\n    payedOn,\n    timeseries.companyBonus,\n    timeseries.companyBonusPct,\n    timeseries.meritBonusPct,\n    year,\n  ]);\n};\n","import { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { useBaseIncome } from \"./use-base-income\";\nimport { useAprilBonus } from \"./use-april-bonus\";\nimport { useJuneBonus } from \"./use-june-bonus\";\nimport {\n  AddOutcome,\n  Outcome,\n  outcomeFromSingle,\n  scaleOutcome,\n} from \"shared/utility/min-max-avg\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/graph-helpers\";\n\nconst bonusPercent = 0.15;\nexport const useJulyBonus = (year: number): Outcome => {\n  const payDay = useMemo(\n    () => DateTime.fromObject({ day: 15, month: 7, year }),\n    [year]\n  );\n\n  const actual = useStore(\n    store,\n    (x) =>\n      findSameYear(payDay, x.projectedIncome.timeSeries.retirementBonus)?.value\n  );\n\n  const income = useBaseIncome(\n    DateTime.fromObject({ day: 1, month: 7, year: year - 1 }),\n    DateTime.fromObject({ day: 1, month: 7, year })\n  );\n\n  const meritBonus = useAprilBonus(year);\n  const juneBonus = useJuneBonus(year);\n\n  return useMemo(() => {\n    const eligbleIncome = outcomeFromSingle(income);\n    const outcome = scaleOutcome(\n      AddOutcome(eligbleIncome, meritBonus.cash, juneBonus.cash),\n      bonusPercent\n    );\n    return { ...outcome, actual: actual ?? outcome.actual };\n  }, [actual, income, juneBonus.cash, meritBonus.cash]);\n};\n","import { Box, Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { DateTime } from \"luxon\";\nimport { useMemo, useState } from \"react\";\nimport { AddOutcome, outcomeFromSingle } from \"shared/utility/min-max-avg\";\nimport { BonusOutcome } from \"./components/bonus-outcome\";\nimport { Layout } from \"./components/data-entry/data-entry\";\nimport { MeritOutcome } from \"./components/merit-increase\";\nimport { Outcome } from \"./components/outcome\";\nimport { useAprilBonus } from \"./hooks/use-april-bonus\";\nimport { useBaseIncome } from \"./hooks/use-base-income\";\nimport { useJulyBonus } from \"./hooks/use-july-bonus\";\nimport { useJuneBonus } from \"./hooks/use-june-bonus\";\n\nexport const ProjectedIncome = () => {\n  const [year, setYear] = useState(DateTime.local().year);\n\n  const income = useBaseIncome(\n    DateTime.fromObject({ day: 1, month: 1, year: year }),\n    DateTime.fromObject({ day: 1, month: 1, year: year + 1 })\n  );\n\n  const junePayDay = useMemo(\n    () => DateTime.fromObject({ day: 15, month: 6, year: year }),\n    [year]\n  );\n\n  const meritPayDay = useMemo(\n    () => DateTime.fromObject({ day: 15, month: 4, year: year }),\n    [year]\n  );\n\n  const meritIncreaseDay = useMemo(\n    () => DateTime.fromObject({ day: 1, month: 4, year: year }),\n    [year]\n  );\n\n  const julyPayDay = useMemo(\n    () => DateTime.fromObject({ day: 15, month: 7, year: year }),\n    [year]\n  );\n\n  const meritBonus = useAprilBonus(year);\n  const juneBonus = useJuneBonus(year);\n  const julyBonus = useJulyBonus(year);\n\n  const incomeOutcome = useMemo(() => {\n    return AddOutcome(\n      outcomeFromSingle(income),\n      meritBonus.cash,\n      juneBonus.cash,\n      julyBonus\n    );\n  }, [income, julyBonus, juneBonus, meritBonus]);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" height=\"100%\" gap={2}>\n      <Box flex=\"0 1 auto\">\n        <Stack gap={2} direction={\"row\"} overflow={\"auto\"}>\n          <Outcome\n            title={\n              <Box display=\"flex\" alignItems={\"center\"} gap={2} width={\"100%\"}>\n                <span>Projected Income</span>\n                <DatePicker\n                  sx={{ width: 90, marginLeft: \"auto\", marginRight: 2 }}\n                  label={\"year\"}\n                  views={[\"year\"]}\n                  defaultValue={DateTime.local()}\n                  slotProps={{\n                    textField: {\n                      variant: \"standard\",\n                      label: \"\",\n                    },\n                  }}\n                  onYearChange={(year) => {\n                    setYear(year.year);\n                  }}\n                />\n              </Box>\n            }\n            outcome={incomeOutcome}\n            payDate={junePayDay}\n          />\n          <MeritOutcome title=\"Merit Increase\" payDate={meritIncreaseDay} />\n          <BonusOutcome\n            title=\"Merit Bonus\"\n            outcome={meritBonus}\n            payDate={meritPayDay}\n          />\n          <BonusOutcome\n            title=\"Company Bonus\"\n            outcome={juneBonus}\n            payDate={junePayDay}\n          />\n          <Outcome\n            title=\"Retirement Bonus\"\n            outcome={julyBonus}\n            payDate={julyPayDay}\n          />\n        </Stack>\n      </Box>\n      <Box flex=\"1 1 auto\">\n        <Box overflow={\"auto\"} width={\"100%\"} height={\"100%\"}>\n          <Box\n            height={\"100%\"}\n            display={\"flex\"}\n            gap={2}\n            flexWrap={\"nowrap\"}\n            flexShrink={0}\n          >\n            <Layout\n              accountName=\"paycheck\"\n              variant=\"cash\"\n              defaultDate={DateTime.fromObject({ day: 1, month: 4 })}\n              title=\"Income Per Check ($)\"\n            />\n            <Layout\n              title=\"Merit Increase (%)\"\n              accountName=\"meritIncreasePct\"\n              variant=\"percent\"\n              defaultDate={meritIncreaseDay}\n            />\n            <Layout\n              title=\"Equity Increase (%)\"\n              accountName=\"equityPct\"\n              variant=\"percent\"\n              defaultDate={meritIncreaseDay}\n            />\n            <Layout\n              title=\"Merit Bonus (%)\"\n              accountName=\"meritBonusPct\"\n              variant=\"percent\"\n              defaultDate={meritPayDay}\n            />\n            <Layout\n              title=\"Merit Bonus ($)\"\n              accountName=\"meritBonus\"\n              variant=\"cash\"\n              defaultDate={meritPayDay}\n            />\n            <Layout\n              title=\"Company Bonus Factor (%)\"\n              accountName=\"companyBonusPct\"\n              defaultDate={junePayDay}\n              variant=\"percent\"\n            />\n            <Layout\n              title=\"Company Bonus ($)\"\n              accountName=\"companyBonus\"\n              defaultDate={junePayDay}\n              variant=\"cash\"\n            />\n            <Layout\n              title=\"Retirement Bonus ($)\"\n              accountName=\"retirementBonus\"\n              defaultDate={julyPayDay}\n              variant=\"cash\"\n            />\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n","import { Box, Tab, Tabs } from \"@mui/material\";\nimport { NetWealth } from \"capabilities/net-wealth\";\nimport { ProjectedIncome } from \"capabilities/projected-income\";\nimport { useState } from \"react\";\n\nexport const App = () => {\n  const [tab, setTab] = useState<string>(\"projected-income\");\n  return (\n    <>\n      <Tabs value={tab} onChange={(_, value) => setTab(value)}>\n        <Tab value=\"wealth\" label=\"Total Wealth\" />\n        <Tab value=\"projected-income\" label=\"Projected Income\" />\n        <Tab disabled value=\"projected-wealth\" label=\"Projected Wealth\" />\n      </Tabs>\n      <Box padding={2} height={\"95%\"} width={\"100%\"}>\n        {tab === \"wealth\" && <NetWealth />}\n        {tab === \"projected-income\" && <ProjectedIncome />}\n      </Box>\n    </>\n  );\n};\n","import { CssBaseline, ThemeProvider, createTheme } from \"@mui/material\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers\";\nimport { AdapterLuxon } from \"@mui/x-date-pickers/AdapterLuxon\";\nimport \"ag-grid-community/styles/ag-grid.css\";\nimport \"ag-grid-community/styles/ag-theme-quartz.css\";\nimport { App } from \"app/app.tsx\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport \"./index.css\";\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: \"dark\",\n  },\n});\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <ErrorBoundary\n      fallbackRender={(props) => {\n        return (\n          <>\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.message}</div>\n            <div style={{ backgroundColor: \"#FFF\" }}>\n              {props.error.stackTrace}\n            </div>\n          </>\n        );\n      }}\n    >\n      <LocalizationProvider dateAdapter={AdapterLuxon}>\n        <ThemeProvider theme={darkTheme}>\n          <CssBaseline />\n          <App />\n        </ThemeProvider>\n      </LocalizationProvider>\n    </ErrorBoundary>\n  </React.StrictMode>\n);\n\n"],"names":["accountDataValidator","z","object","date","string","value","number","id","accountValidator","type","literal","data","array","loanValidator","principal","ratePct","paymentsPerYear","payment","firstPaymentDate","ownershipPct","mortgageValidator","loan","optional","wealth","record","union","projectedWealth","timeSeries","paycheck","retirementRate","savingsRate","meritBonusPct","companyBonusPct","meritBonus","companyBonus","retirementBonus","equityPct","meritIncreasePct","storeValidator","projectedIncome","createStore","key","validator","defaultValue","localData","localStorage","getItem","JSON","parse","safeParse","success","log","error","next","merge","setItem","stringify","store","CreateStore","subscribe","current","state","formatCashShort","Intl","NumberFormat","style","currency","notation","maximumFractionDigits","format","formatCash","calcLoanBalance","pricipal","rate","monthlyPayment","anualizedRate","periods","diff","DateTime","fromISO","months","totalRate","balance","calcEquity","houseValue","loanBalance","findNearstOnOrBefore","find","x","idx","startOf","length","findSameYear","year","getMortgateValue","mortgage","entry","getAccountValue","account","getGraphValue","getGraphDates","accounts","Set","flatMap","map","toISO","sort","a","b","toMillis","useGraphData","useStore","useMemo","dates","Object","values","entries","graphData","reduce","acc","accountName","toJSDate","total","firstNonZero","findIndex","slice","WealthChart","series","keys","stacked","xKey","yKey","yName","tooltip","renderer","datum","content","fromJSDate","toISODate","options","theme","title","text","axes","position","label","NewAccount","forwardRef","props","ref","open","setOpen","useState","nameRef","useRef","setError","accountType","setAccountType","undefined","target","setState","create","prev","children","AgGrid","rest","height","AgGridReact","shortDate","sortByDate","select","direction","DeleteAccount","padding","width","onDeleteAccount","RenameAccount","nextAccountName","setNextAccountName","event","onUpdateName","createAccountColumnConfig","headerName","valueFormatter","toFormat","valueGetter","cellRenderer","idxToRemove","splice","DeleteForeverIcon","AccountTab","setDate","local","amount","setamount","hasSameDate","hasSame","onAddEntry","push","toString","uuid","accountColumnConfig","color","startAdornment","mortgageColumnConfig","toFixed","groupBy","selector","curr","convertPct","min","datetime","offset","AddLoan","textField","parsed","issues","path","join","AddEntry","Stack","MortgageTab","allAccounts","mortgageData","AccountTabs","firstAccount","setAccount","useEffect","_","NetWealth","minMaxAvg","max","avg","index","arr","Math","Infinity","outcomeFromSingle","actual","scaleOutcome","outcome","AddOutcome","outcomes","everyActualDefined","every","Value","secondaryValue","display","minWidth","flexDirection","justifyContent","alignItems","gap","flexShrink","Cash","Duration","dateTime","countDownStr","diffNow","countDownColor","days","formatPercent","Percent","Until","BonusOutcome","payDate","border","borderRadius","paddingBottom","paddingLeft","paddingTop","percent","cash","variant","valueFormatted","UpdateIcon","editable","cellEditor","valueSetter","newValue","DataEntry","defaultDate","setAmount","concat","console","flex","Layout","marginBottom","MeritOutcome","income","findNearestOnOrBefore","meritPct","totalAdjust","multiplier","Outcome","valueByDateRange","toSorted","plus","years","minus","useBaseIncome","startDate","endDate","baseIncome","lastMerit","endOfYear","fromObject","day","month","payPerPeriod","mostRecentPay","projectedPayPerPeriod","Array","fill","start","end","incomePerPeriod","filter","rangeOutside","rangeInside","overlapEnd","overlapStart","weeks","round","useAprilBonus","payedOn","bonusAmmount","bonusPercent","meritOutcome","useJuneBonus","timeseries","mostRecentBonus","mostRecentPercent","meritFactor","useJulyBonus","payDay","juneBonus","eligbleIncome","ProjectedIncome","setYear","junePayDay","meritPayDay","meritIncreaseDay","julyPayDay","julyBonus","incomeOutcome","Box","marginLeft","marginRight","App","tab","setTab","darkTheme","createTheme","palette","mode","ReactDOM","createRoot","document","getElementById","render","backgroundColor","message","stackTrace","AdapterLuxon"],"mappings":"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"}