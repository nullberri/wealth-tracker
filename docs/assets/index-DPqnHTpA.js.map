{"version":3,"file":"index-DPqnHTpA.js","sources":["../../src/shared/models/account-data.ts","../../src/shared/models/account.ts","../../src/shared/models/loan.ts","../../src/shared/models/mortgage.ts","../../src/shared/models/net-wealth.ts","../../src/shared/models/projected-wealth.ts","../../src/shared/models/store.ts","../../src/shared/store.ts","../../src/shared/utility/format-cash.ts","../../src/shared/utility/mortgage-calc.ts","../../src/shared/utility/graph-helpers.ts","../../src/capabilities/net-wealth/components/wealth-chart/use-graph-data.ts","../../src/capabilities/net-wealth/components/wealth-chart/wealth-chart.tsx","../../src/capabilities/net-wealth/components/new-account/new-account.tsx","../../src/shared/components/ag-grid/ag-grid.tsx","../../src/shared/utility/format-date.ts","../../src/shared/utility/sort-by-date.ts","../../src/capabilities/net-wealth/components/tab-types/components/delete-account.tsx","../../src/capabilities/net-wealth/components/tab-types/components/update-account.tsx","../../src/capabilities/net-wealth/components/tab-types/account/column-config.tsx","../../src/capabilities/net-wealth/components/tab-types/account/hooks/useMissingYears.ts","../../src/capabilities/net-wealth/components/tab-types/account/account.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/column-config.tsx","../../src/shared/utility/group-by.ts","../../src/capabilities/net-wealth/components/tab-types/mortgage/add-loan.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/add-entry.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/mortgage.tsx","../../src/capabilities/net-wealth/components/account-tabs/account-tabs.tsx","../../src/capabilities/net-wealth/net-wealth.tsx","../../src/shared/utility/min-max-avg.ts","../../src/capabilities/projected-income/components/value.tsx","../../src/shared/components/formatters/cash.tsx","../../src/shared/components/formatters/duration.tsx","../../src/shared/utility/format-percent.ts","../../src/shared/components/formatters/percent.tsx","../../src/capabilities/projected-income/components/bonus-outcome.tsx","../../src/capabilities/projected-income/components/data-entry/column-config.tsx","../../src/capabilities/projected-income/components/data-entry/data-entry.tsx","../../src/shared/components/formatters/until.tsx","../../src/capabilities/projected-income/hooks/use-most-frequent-value.ts","../../src/capabilities/projected-income/hooks/use-projected-pay.ts","../../src/capabilities/projected-income/hooks/use-base-income.ts","../../src/capabilities/projected-income/components/merit-increase.tsx","../../src/capabilities/projected-income/components/outcome.tsx","../../src/capabilities/projected-income/hooks/use-april-bonus.ts","../../src/capabilities/projected-income/hooks/use-june-bonus.ts","../../src/capabilities/projected-income/hooks/use-july-bonus.ts","../../src/capabilities/projected-income/projected-income.tsx","../../src/capabilities/projected-wealth/hooks/use-yearly-wealth.ts","../../src/capabilities/projected-wealth/projected-wealth.tsx","../../src/shared/components/safety-button/safety-button.tsx","../../src/shared/hooks/use-export.tsx","../../src/shared/hooks/use-import.tsx","../../src/app/app.tsx","../../src/main.tsx"],"sourcesContent":["import { z } from \"zod\";\n\nexport const accountDataValidator = z.object({\n  date: z.string(),\n  value: z.number(),\n  id: z.string(),\n});\n\nexport type AccountData = z.infer<typeof accountDataValidator>;\n\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n\n","import { z } from \"zod\";\n\nexport const loanValidator = z.object({\n  principal: z.number(),\n  ratePct: z.number(),\n  paymentsPerYear: z.number(),\n  payment: z.number(),\n  firstPaymentDate: z.string(),\n  ownershipPct: z.number(),\n});\n\nexport type Loan = z.infer<typeof loanValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\nimport { loanValidator } from \"./loan\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const projectedWealth = z.object({\n  timeSeries: z.object({\n    paycheck: z.array(accountDataValidator),\n    retirementRate: z.array(accountDataValidator),\n    savingsRate: z.array(accountDataValidator),\n    meritBonusPct: z.array(accountDataValidator),\n    companyBonusPct: z.array(accountDataValidator),\n    meritBonus: z.array(accountDataValidator),\n    companyBonus: z.array(accountDataValidator),\n    retirementBonus: z.array(accountDataValidator),\n    equityPct: z.array(accountDataValidator),\n    meritIncreasePct: z.array(accountDataValidator),\n  }),\n});\n\nexport const getDefaults = () => ({\n  projectedIncome: {\n    timeSeries: {\n      paycheck: [],\n      retirementRate: [],\n      savingsRate: [],\n      meritBonusPct: [],\n      companyBonusPct: [],\n      meritBonus: [],\n      companyBonus: [],\n      retirementBonus: [],\n      equityPct: [],\n      meritIncreasePct: [],\n    },\n  },\n  wealth: {},\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type TimeSeries = keyof ProjectedWealth[\"timeSeries\"];\n","import { z } from \"zod\";\nimport { wealth } from \"./net-wealth\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  wealth: wealth,\n  projectedIncome: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { Store as CreateStore } from \"@tanstack/store\";\nimport merge from \"deepmerge\";\nimport { ZodSchema } from \"zod\";\nimport { Store, storeValidator } from \"./models/store\";\n\nconst createStore = <T extends object>(\n  key: string,\n  validator: ZodSchema,\n  defaultValue: T\n) => {\n  const localData = localStorage.getItem(key);\n  let data = localData ? JSON.parse(localData) : defaultValue;\n  const parse = validator.safeParse(data);\n\n  if (!parse.success) {\n    console.log(\"zod error\", parse.error);\n    console.log(\"original\", data);\n\n    const next = merge(data, defaultValue);\n    console.log(\"merged\", next);\n    localStorage.setItem(`${key}-previous`, JSON.stringify(data));\n    localStorage.setItem(key, JSON.stringify(next));\n    data = next;\n  }\n\n  const store = new CreateStore<T>(data);\n  store.subscribe(() => {\n    const current = localStorage.getItem(key);\n    current && localStorage.setItem(`${key}-previous`, current);\n    localStorage.setItem(key, JSON.stringify(store.state));\n  });\n\n  return store;\n};\n\nexport const store = createStore<Store>(\"store\", storeValidator, {\n  projectedIncome: {\n    timeSeries: {\n      paycheck: [],\n      retirementRate: [],\n      savingsRate: [],\n      meritBonusPct: [],\n      companyBonusPct: [],\n      meritBonus: [],\n      companyBonus: [],\n      retirementBonus: [],\n      equityPct: [],\n      meritIncreasePct: [],\n    },\n  },\n  wealth: {},\n});\n","export const formatCashShort = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  notation: \"compact\",\n  maximumFractionDigits: 1,\n}).format;\n\nexport const formatCash = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 0,\n}).format;\n","import { DateTime } from \"luxon\";\nimport { Loan } from \"shared/models/loan\";\n\nexport const calcLoanBalance = (date: DateTime, loan: Loan) => {\n  const {\n    firstPaymentDate,\n    paymentsPerYear,\n    principal: pricipal,\n    ratePct: rate,\n    payment: monthlyPayment,\n  } = loan;\n  const anualizedRate = rate / paymentsPerYear;\n  const periods = date.diff(\n    DateTime.fromISO(firstPaymentDate),\n    \"months\"\n  ).months;\n  const totalRate = (1 + anualizedRate) ** periods;\n  const balance =\n    pricipal * totalRate - (monthlyPayment / anualizedRate) * (totalRate - 1);\n\n  return balance;\n};\n\nexport const calcEquity = (\n  ownershipPct: number,\n  houseValue: number | undefined,\n  loanBalance: number,\n  principal: number\n) => {\n  return houseValue\n    ? houseValue * ownershipPct - loanBalance\n    : principal - loanBalance;\n};\n","import { DateTime } from \"luxon\";\nimport { Mortgage } from \"shared/models/mortgage\";\nimport { Account } from \"shared/models/account\";\nimport { calcEquity, calcLoanBalance } from \"./mortgage-calc\";\nimport { AccountData } from \"shared/models/account-data\";\n\nexport const findNearstOnOrBefore = (date: DateTime, data: AccountData[]) => {\n  return data.find((x, idx, array) => {\n    if (idx == 0 && DateTime.fromISO(x.date).startOf(\"day\") >= date) {\n      return true;\n    }\n\n    if (\n      idx < array.length - 1 &&\n      DateTime.fromISO(x.date).startOf(\"day\") <= date &&\n      DateTime.fromISO(data[idx + 1].date).startOf(\"day\") > date\n    ) {\n      return true;\n    }\n\n    if (idx === array.length - 1) {\n      return true;\n    }\n  });\n};\n\nexport const findSameYear = (date: DateTime, data: AccountData[]) => {\n  return data.find((x) => {\n    return DateTime.fromISO(x.date).year === date.year;\n  });\n};\n\nconst getMortgateValue = (date: DateTime, mortgage: Mortgage) => {\n  if (!mortgage.loan) {\n    return 0;\n  }\n  const entry = findNearstOnOrBefore(date, mortgage.data);\n  if (\n    entry?.date &&\n    mortgage.data[0] === entry &&\n    DateTime.fromISO(entry.date).startOf(\"day\") > date\n  ) {\n    return 0;\n  }\n  const { ownershipPct, principal } = mortgage.loan;\n  const balance = calcLoanBalance(date, mortgage.loan);\n  return calcEquity(ownershipPct, entry?.value, balance, principal);\n};\n\nconst getAccountValue = (date: DateTime, account: Account) => {\n  const entry = findNearstOnOrBefore(date, account.data);\n  if (\n    entry?.date &&\n    account.data[0] === entry &&\n    DateTime.fromISO(entry.date).startOf(\"day\") > date\n  ) {\n    return 0;\n  }\n  return entry?.value;\n};\n\nexport const getGraphValue = (date: DateTime, account: Account | Mortgage) => {\n  switch (account.type) {\n    case \"account\":\n      return getAccountValue(date, account);\n    case \"mortgage\":\n      return getMortgateValue(date, account);\n  }\n};\n\nexport const getGraphDates = (accounts: (Account | Mortgage)[]) => {\n  return [\n    ...new Set(\n      accounts.flatMap((x) => {\n        return x.data.map((x) =>\n          DateTime.fromISO(x.date).startOf(\"day\").toISO()\n        );\n      })\n    ),\n  ]\n    .map((x) => DateTime.fromISO(x!))\n    .sort((a, b) => a.toMillis() - b.toMillis()) as DateTime<true>[];\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { getGraphDates, getGraphValue } from \"shared/utility/graph-helpers\";\n\nexport const useGraphData = () => {\n  const wealth = useStore(store, (x) => x.wealth);\n\n  return useMemo(() => {\n    const dates = getGraphDates(Object.values(wealth));\n    const accounts = Object.entries(wealth);\n    const graphData = dates.map((date) => {\n      return accounts.reduce(\n        (acc, [accountName, account]) => {\n          const value = getGraphValue(date, account);\n\n          if (value) {\n            acc[accountName] = value;\n            acc[\"total\"] = (acc[\"total\"] as number) + value;\n          } else {\n            acc[accountName] = null;\n          }\n\n          acc[\"date\"] = date.toJSDate();\n          return acc;\n        },\n        { total: 0 } as Record<string, number | Date | null>\n      );\n    });\n\n    graphData.forEach((x, idx, arr) => {\n      if (idx < arr.length - 1) {\n        Object.keys(x).forEach((key) => {\n          if (x[key] === null && arr[idx + 1][key] !== null) {\n            x[key] = 0;\n          }\n        });\n      }\n    });\n\n    const firstNonZero = graphData.findIndex((x) => (x[\"total\"] as number) > 0);\n    return graphData.slice(firstNonZero);\n  }, [wealth]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport {\n  AgAreaSeriesOptions,\n  AgCartesianChartOptions,\n  AgLineSeriesOptions,\n} from \"ag-charts-community\";\nimport { AgChartsReact } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { formatCashShort } from \"shared/utility/format-cash\";\nimport { useGraphData } from \"./use-graph-data\";\n\nexport const WealthChart = () => {\n  const wealth = useStore(store, (x) => x.wealth);\n  const data = useGraphData();\n\n  const series = useMemo(() => {\n    return [\n      ...Object.keys(wealth).map((x) => {\n        return {\n          stacked: true,\n          type: \"area\",\n          xKey: \"date\",\n          yKey: x,\n          yName: x,\n          tooltip: {\n            renderer: ({ datum, yKey, xKey }) => ({\n              content: `${DateTime.fromJSDate(\n                datum[xKey]\n              ).toISODate()} ${formatCashShort(datum[yKey])}`,\n            }),\n          },\n        } as AgAreaSeriesOptions;\n      }),\n      {\n        type: \"line\",\n        xKey: \"date\",\n        yKey: \"total\",\n        yName: \"Total\",\n        tooltip: {\n          renderer: ({ datum, yKey, xKey }) => ({\n            content: `${DateTime.fromJSDate(\n              datum[xKey]\n            ).toISODate()} ${formatCashShort(datum[yKey])}`,\n          }),\n        },\n      } as AgLineSeriesOptions,\n    ];\n  }, [wealth]);\n\n  const options: AgCartesianChartOptions = useMemo(\n    () => ({\n      theme: \"ag-default-dark\",\n      title: {\n        text: `Total Wealth ${formatCashShort(\n          (data[data.length - 1]?.total ?? 0) as number\n        )}`,\n      },\n      data,\n      axes: [\n        {\n          type: \"time\",\n          position: \"bottom\",\n          label: {\n            format: \"%Y\",\n          },\n        },\n        {\n          type: \"number\",\n          position: \"left\",\n        },\n      ],\n      series,\n    }),\n    [data, series]\n  );\n  return <AgChartsReact options={options} />;\n};\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  MenuItem,\n  Stack,\n  TextField,\n} from \"@mui/material\";\nimport { create } from \"mutative\";\nimport { ReactNode, forwardRef, useRef, useState } from \"react\";\nimport { AssetType } from \"shared/models/asset-types\";\nimport { store } from \"shared/store\";\n\nexport const NewAccount = forwardRef<\n  HTMLButtonElement,\n  { children?: ReactNode }\n>((props, ref) => {\n  const [open, setOpen] = useState(false);\n  const nameRef = useRef<HTMLInputElement>(null);\n  const [error, setError] = useState(false);\n  const [accountType, setAccountType] = useState<AssetType>();\n\n  return (\n    <>\n      <Button\n        ref={ref}\n        variant=\"outlined\"\n        onClick={() => {\n          setOpen(true);\n          setError(false);\n          setAccountType(undefined);\n        }}\n        sx={{ marginLeft: 2 }}\n      >\n        add account\n      </Button>\n\n      <Dialog open={open} onClose={() => setOpen(false)}>\n        <DialogTitle>Add New Account</DialogTitle>\n        <DialogContent>\n          <Stack spacing={2} margin={2}>\n            <TextField\n              select\n              color={error ? \"error\" : \"primary\"}\n              onChange={(value) => {\n                setError(false);\n                setAccountType(value.target.value as AssetType);\n              }}\n              label=\"Type\"\n            >\n              <MenuItem value=\"mortgage\">Mortgage</MenuItem>\n              <MenuItem value=\"account\">Generic Account</MenuItem>\n            </TextField>\n\n            <TextField\n              placeholder=\"Name\"\n              onChange={() => {\n                setError(false);\n              }}\n              error={error}\n              inputRef={nameRef}\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            disabled={error}\n            onClick={() => {\n              store.setState((prev) => {\n                return create(prev, (next) => {\n                  if (\n                    !nameRef.current?.value ||\n                    !accountType ||\n                    prev.wealth[nameRef.current.value]\n                  ) {\n                    setError(true);\n                    return;\n                  }\n\n                  next.wealth[nameRef.current.value] = {\n                    type: accountType,\n                    data: [],\n                  };\n\n                  setOpen(false);\n                });\n              });\n            }}\n          >\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {props?.children}\n    </>\n  );\n});\n","import { AgGridReact, AgGridReactProps } from \"ag-grid-react\";\n\nexport const AgGrid = (props: AgGridReactProps & { id: string }) => {\n  const { id, ...rest } = props;\n  return (\n    <div id={id} className=\"ag-theme-quartz-dark\" style={{ height: \"100%\" }}>\n      <AgGridReact {...rest} />\n    </div>\n  );\n};\n","export const shortDate = \"yyyy-MM-dd\";\n","import { DateTime } from \"luxon\";\n\nexport const sortByDate =\n  <T>(select: (data: T) => DateTime, direction: \"asc\" | \"desc\") =>\n  (a: T, b: T) =>\n    direction === \"asc\"\n      ? select(a).toMillis() - select(b).toMillis()\n      : select(b).toMillis() - select(a).toMillis();\n","import { Button, Paper } from \"@mui/material\";\nimport { create } from \"mutative\";\nimport { store } from \"shared/store\";\n\nexport const DeleteAccount = (props: { accountName: string }) => {\n  const { accountName } = props;\n\n  const onDeleteAccount = () => {\n    store.setState((prev) => {\n      return create(prev, (next) => {\n        delete next.wealth[accountName];\n      });\n    });\n  };\n\n  return (\n    <Paper elevation={3} sx={{ padding: 2, width: \"100%\" }}>\n      <Button onClick={onDeleteAccount} color=\"error\">\n        Delete Account\n      </Button>\n    </Paper>\n  );\n};\n","import { Button, Paper, TextField, Stack } from \"@mui/material\";\nimport { create } from \"mutative\";\nimport { useState } from \"react\";\nimport { store } from \"shared/store\";\n\nexport const RenameAccount = (props: { accountName: string }) => {\n  const { accountName } = props;\n\n  const [nextAccountName, setNextAccountName] = useState<string>(accountName);\n\n  const onUpdateName = () => {\n    store.setState((prev) => {\n      return create(prev, (next) => {\n        next.wealth[nextAccountName] = next.wealth[accountName];\n        delete next.wealth[accountName];\n      });\n    });\n  };\n\n  return (\n    <Paper elevation={3} sx={{ padding: 2 }}>\n      <Stack spacing={1}>\n        <TextField\n          label=\"Account Name\"\n          value={nextAccountName}\n          onChange={(event) => setNextAccountName(event.target.value)}\n          placeholder=\"\"\n        />\n        <Button disabled={!nextAccountName} onClick={onUpdateName}>\n          Update Name\n        </Button>\n      </Stack>\n    </Paper>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport { Button } from \"@mui/material\";\nimport { ColDef } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { AccountData } from \"shared/models/account-data\";\nimport { store } from \"shared/store\";\nimport { formatCashShort } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (\n  accountName: string\n): ColDef<AccountData>[] => [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n  },\n  {\n    headerName: \"Value\",\n    valueGetter: (x) => x.data?.value,\n    valueFormatter: (x) => formatCashShort(x.value),\n    type: \"numericColumn\",\n  },\n  {\n    headerName: \"Actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            store.setState((prev) => {\n              return create(prev, (next) => {\n                const idxToRemove = next.wealth[accountName].data.findIndex(\n                  (x) => x.id === props.data?.id\n                );\n                next.wealth[accountName].data.splice(idxToRemove, 1);\n                return next;\n              });\n            });\n          }}\n          color=\"error\"\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n","import { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { Account } from \"shared/models/account\";\n\nexport const useMissingYears = (account: Account) => {\n  return useMemo(() => {\n    const years = Object.entries(\n      Object.groupBy(account.data, (x) => DateTime.fromISO(x.date).year)\n    )\n      .map(\n        ([year, entries]) =>\n          [\n            +year,\n            !!entries?.find((x) => {\n              const date = DateTime.fromISO(x.date);\n              const janFirst = DateTime.fromObject({\n                day: 1,\n                month: 1,\n                year: +year,\n              });\n              return date.diff(janFirst, [\"days\", \"hours\"]).days == 0;\n            }),\n          ] as [number, boolean]\n      )\n      .sort(([a], [b]) => {\n        return a - b;\n      });\n\n    const lookup = Object.fromEntries(years);\n    const missing = [];\n    for (let i = years[0][0]; i <= years[years.length - 1][0]; i++) {\n      if (!lookup[i]) {\n        missing.push(i);\n      }\n    }\n    return missing;\n  }, [account.data]);\n};\n","import {\n  Alert,\n  Button,\n  InputAdornment,\n  Paper,\n  Stack,\n  TextField,\n} from \"@mui/material\";\nimport Grid from \"@mui/system/Unstable_Grid\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { useMemo, useState } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { Account } from \"shared/models/account\";\nimport { store } from \"shared/store\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { sortByDate } from \"shared/utility/sort-by-date\";\nimport { v4 as uuid } from \"uuid\";\nimport { DeleteAccount } from \"../components/delete-account\";\nimport { RenameAccount } from \"../components/update-account\";\nimport { createAccountColumnConfig } from \"./column-config\";\nimport { useMissingYears } from \"./hooks/useMissingYears\";\n\nexport const AccountTab = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const account = useStore(\n    store,\n    (state) => state.wealth[accountName]\n  ) as Account;\n  const [date, setDate] = useState(DateTime.local());\n  const [amount, setamount] = useState(0);\n\n  const missingYears = useMissingYears(account);\n  const hasSameDate = useMemo(() => {\n    return !!account?.data?.find((x) =>\n      date.hasSame(DateTime.fromISO(x.date), \"day\")\n    );\n  }, [account?.data, date]);\n\n  const onAddEntry = () => {\n    store.setState((prev) => {\n      return create(prev, (next) => {\n        (next.wealth[accountName] as Account).data.push({\n          date: date.toString(),\n          value: amount,\n          id: uuid(),\n        });\n        next.wealth[accountName].data.sort(\n          sortByDate((x) => DateTime.fromISO(x.date), \"asc\")\n        );\n      });\n    });\n  };\n\n  const accountColumnConfig = useMemo(() => {\n    return createAccountColumnConfig(accountName);\n  }, [accountName]);\n\n  return (\n    <>\n      {missingYears.length > 0 && (\n        <Alert severity=\"warning\">\n          Ensure an entry for Jan 1st for each year {missingYears.join(\", \")}\n        </Alert>\n      )}\n      <Grid container height=\"100%\" width={\"100%\"} padding={1} spacing={2}>\n        <Grid xs>\n          <AgGrid\n            reactiveCustomComponents\n            rowData={account?.data ?? []}\n            columnDefs={accountColumnConfig}\n            id={account + \"-history\"}\n          />\n        </Grid>\n        <Grid xs={9}>\n          <div>\n            <Grid container spacing={2}>\n              <Grid xs={2}>\n                <Paper elevation={3} sx={{ padding: 2 }}>\n                  <Stack spacing={1}>\n                    <DatePicker\n                      format={shortDate}\n                      sx={{ color: \"white\" }}\n                      label=\"Date\"\n                      defaultValue={date}\n                      onChange={(value) => value && setDate(value)}\n                    />\n                    <TextField\n                      label=\"amount\"\n                      value={amount}\n                      type=\"number\"\n                      onChange={(event) => setamount(+event.target.value)}\n                      InputProps={{\n                        startAdornment: (\n                          <InputAdornment position=\"start\">$</InputAdornment>\n                        ),\n                      }}\n                      placeholder=\"\"\n                    />\n                    <Button\n                      disabled={!amount || !date || hasSameDate}\n                      onClick={onAddEntry}\n                    >\n                      Add Entry\n                    </Button>\n                  </Stack>\n                </Paper>\n              </Grid>\n              <Grid xs={8}></Grid>\n              <Grid xs={2}>\n                <Stack spacing={2}>\n                  <DeleteAccount accountName={accountName} />\n                  <RenameAccount accountName={accountName} />\n                </Stack>\n              </Grid>\n            </Grid>\n          </div>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport { Button } from \"@mui/material\";\nimport { ColDef } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { AccountData } from \"shared/models/account-data\";\nimport { store } from \"shared/store\";\nimport { formatCashShort } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (\n  accountName: string\n): ColDef<AccountData>[] => [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n  },\n  {\n    headerName: \"Home Value\",\n    valueGetter: (x) => x.data?.value,\n    valueFormatter: (x) => formatCashShort(x.value),\n    type: \"numericColumn\",\n  },\n  {\n    headerName: \"Actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            store.setState((prev) => {\n              return create(prev, (next) => {\n                const account = next.wealth[accountName];\n                const idxToRemove = account.data.findIndex(\n                  (x) => x.id === props.data?.id\n                );\n                account.data.splice(idxToRemove, 1);\n                return next;\n              });\n            });\n          }}\n          color=\"error\"\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n\nexport const mortgageColumnConfig: ColDef<{\n  date: DateTime;\n  balance: number;\n  equity: number;\n}>[] = [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data?.date,\n  },\n  {\n    headerName: \"Loan Balance\",\n    valueGetter: (x) => x.data?.balance.toFixed(2),\n    valueFormatter: (x) => formatCashShort(x.value),\n    type: \"numericColumn\",\n  },\n  {\n    headerName: \"Equity\",\n    valueGetter: (x) => x.data?.equity.toFixed(2),\n    valueFormatter: (x) => formatCashShort(x.value),\n    type: \"numericColumn\",\n  },\n];\n","export function groupBy<T, T2 extends string | number | symbol>(\n  array: T[],\n  selector: (x: T) => T2\n): Record<T2, T[]> {\n  return array.reduce((acc: Record<T2, T[]>, curr: T) => {\n    const key = selector(curr);\n    acc[key] ??= [];\n    acc[key].push(curr);\n    return acc;\n  }, {} as Record<T2, T[]>);\n}\n","import { ZodIssue, z } from \"zod\";\nimport { Button, Paper, Stack, TextField } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { DateTime } from \"luxon\";\nimport { useRef, useState } from \"react\";\nimport { create } from \"mutative\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { Loan } from \"shared/models/loan\";\nimport { Mortgage } from \"shared/models/mortgage\";\nimport { store } from \"shared/store\";\nimport { groupBy } from \"shared/utility/group-by\";\n\nconst convertPct = (value: number) => {\n  return value > 1 ? value / 100 : value;\n};\n\nconst validator: z.ZodType<Loan> = z.object({\n  principal: z.number().min(0),\n  ratePct: z.number().min(0),\n  paymentsPerYear: z.number().min(0),\n  payment: z.number().min(0),\n  firstPaymentDate: z.string().datetime({ offset: true }),\n  ownershipPct: z.number().min(0),\n});\n\nexport const AddLoan = (props: { accountName: string }) => {\n  const { accountName } = props;\n\n  const loan = useStore(store, (x) => {\n    const account = x.wealth[accountName];\n    if (\"loan\" in account) {\n      return account.loan;\n    }\n  });\n\n  const ref = useRef<Partial<Loan>>(loan ?? {});\n  const [error, setError] = useState<Partial<Record<keyof Loan, ZodIssue>>>({});\n\n  return (\n    <Paper elevation={3} sx={{ padding: 2 }}>\n      <Stack spacing={1}>\n        <DatePicker\n          defaultValue={\n            ref.current?.firstPaymentDate\n              ? DateTime.fromISO(ref.current.firstPaymentDate)\n              : null\n          }\n          label=\"First Payment\"\n          slotProps={{\n            textField: {\n              error: !!error.firstPaymentDate,\n            },\n          }}\n          onChange={(value: DateTime | null) => {\n            if (value) {\n              ref.current.firstPaymentDate = value.toISO()!;\n            }\n          }}\n        />\n        <TextField\n          error={!!error.principal}\n          defaultValue={loan?.principal}\n          onChange={(event) => {\n            ref.current.principal = +event.target.value;\n          }}\n          variant=\"outlined\"\n          label=\"Principal\"\n          type=\"number\"\n        />\n        <TextField\n          error={!!error.ratePct}\n          defaultValue={loan?.ratePct}\n          onChange={(event) => {\n            ref.current.ratePct = convertPct(+event.target.value);\n          }}\n          variant=\"outlined\"\n          label=\"Rate\"\n          type=\"number\"\n        />\n        <TextField\n          error={!!error.paymentsPerYear}\n          defaultValue={loan?.paymentsPerYear}\n          onChange={(event) => {\n            ref.current.paymentsPerYear = +event.target.value;\n          }}\n          variant=\"outlined\"\n          label=\"Payments Per Year\"\n          type=\"number\"\n        />\n        <TextField\n          defaultValue={loan?.payment}\n          error={!!error.payment}\n          onChange={(event) => {\n            ref.current.payment = +event.target.value;\n          }}\n          variant=\"outlined\"\n          label=\"Payment\"\n          type=\"number\"\n        />\n        <TextField\n          defaultValue={loan?.ownershipPct}\n          error={!!error.ownershipPct}\n          onChange={(event) => {\n            ref.current.ownershipPct = convertPct(+event.target.value);\n          }}\n          variant=\"outlined\"\n          label=\"Ownership (%)\"\n          type=\"number\"\n        />\n        <Button\n          onClick={() => {\n            const parsed = validator.safeParse(ref.current);\n            if (parsed.success) {\n              setError({});\n              store.setState((prev) => {\n                return create(prev, (next) => {\n                  (next.wealth[accountName] as Mortgage).loan = parsed.data;\n                });\n              });\n            } else {\n              const issues = groupBy(parsed.error.issues, (x) =>\n                x.path.join(\"\")\n              );\n              setError(issues);\n            }\n          }}\n        >\n          Set Loan\n        </Button>\n      </Stack>\n    </Paper>\n  );\n};\n","import { Button, Paper, TextField } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { DateTime } from \"luxon\";\nimport { useRef } from \"react\";\nimport { store } from \"shared/store\";\nimport { create } from \"mutative\";\nimport { v4 as uuid } from \"uuid\";\n\nexport const AddEntry = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const ref = useRef<{ date?: DateTime; value?: number }>({\n    date: DateTime.local(),\n    value: 0,\n  });\n  const onAddEntry = () => {\n    const { date, value } = ref.current;\n    if (!date || !value) {\n      return;\n    }\n    store.setState((prev) => {\n      return create(prev, (next) => {\n        next.wealth[accountName].data.push({\n          date: date.toISO()!,\n          value,\n          id: uuid(),\n        });\n      });\n    });\n  };\n  return (\n    <Paper elevation={3} sx={{ padding: 2 }}>\n      <Stack spacing={1}>\n        <DatePicker\n          defaultValue={DateTime.local()}\n          onChange={(date: DateTime | null) => {\n            if (date) {\n              ref.current.date = date;\n            }\n          }}\n        />\n        <TextField\n          label=\"Home value\"\n          type=\"numeric\"\n          onChange={(event) => {\n            ref.current.value = +event.target.value;\n          }}\n        />\n        <Button onClick={onAddEntry}>Add Home Value</Button>\n      </Stack>\n    </Paper>\n  );\n};\n","import Grid from \"@mui/system/Unstable_Grid\";\nimport { store } from \"shared/store\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport {\n  createAccountColumnConfig,\n  mortgageColumnConfig,\n} from \"./column-config\";\nimport { AddLoan } from \"./add-loan\";\nimport { AddEntry } from \"./add-entry\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { Mortgage } from \"shared/models/mortgage\";\nimport {\n  findNearstOnOrBefore,\n  getGraphDates,\n} from \"shared/utility/graph-helpers\";\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\nimport { DeleteAccount } from \"../components/delete-account\";\nimport { RenameAccount } from \"../components/update-account\";\nimport { Stack } from \"@mui/system\";\n\nexport const MortgageTab = (props: { accountName: string }) => {\n  const { accountName } = props;\n\n  const account = useStore(\n    store,\n    (state) => state.wealth[accountName]\n  ) as Mortgage;\n\n  const allAccounts = useStore(store, (x) => x.wealth);\n\n  const accountColumnConfig = useMemo(() => {\n    return createAccountColumnConfig(accountName);\n  }, [accountName]);\n\n  const mortgageData = useMemo(() => {\n    if (!account?.loan) {\n      return [];\n    }\n\n    return getGraphDates(Object.values(allAccounts)).map((date) => {\n      const loanBalance = calcLoanBalance(date, account.loan!);\n      return {\n        date,\n        balance: loanBalance,\n        equity: calcEquity(\n          account.loan!.ownershipPct,\n          findNearstOnOrBefore(date, account.data)?.value,\n          loanBalance,\n          account.loan!.principal\n        ),\n      };\n    });\n  }, [account, allAccounts]);\n\n  return (\n    <Grid container height=\"100%\" width={\"100%\"} padding={1} spacing={2}>\n      <Grid xs={3}>\n        <AgGrid\n          reactiveCustomComponents\n          rowData={account?.data ?? []}\n          columnDefs={accountColumnConfig}\n          id={account + \"-history\"}\n        />\n      </Grid>\n      <Grid xs={3}>\n        <AgGrid\n          rowData={mortgageData}\n          columnDefs={mortgageColumnConfig}\n          id={account + \"-history\"}\n        />\n      </Grid>\n      <Grid xs={6}>\n        <div>\n          <Grid container spacing={2}>\n            <Grid xs={3}>\n              <AddLoan accountName={accountName} />\n            </Grid>\n            <Grid xs={3}>\n              <AddEntry accountName={accountName} />\n            </Grid>\n            <Grid xs={3}></Grid>\n            <Grid xs={3}>\n              <Stack spacing={2}>\n                <DeleteAccount accountName={accountName} />\n                <RenameAccount accountName={accountName} />\n              </Stack>\n            </Grid>\n          </Grid>\n        </div>\n      </Grid>\n    </Grid>\n  );\n};\n","import { Box, Tab, Tabs } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useEffect, useState } from \"react\";\nimport { store } from \"shared/store\";\nimport { NewAccount } from \"../new-account\";\nimport { AccountTab } from \"../tab-types/account/account\";\nimport { MortgageTab } from \"../tab-types/mortgage\";\n\nexport const AccountTabs = () => {\n  const accounts = useStore(store, (x) => x.wealth);\n  const firstAccount = Object.keys(accounts)?.[0] ?? \"\";\n  const [account, setAccount] = useState<string>(firstAccount);\n\n  useEffect(() => {\n    if (!accounts[account]) {\n      setAccount(Object.keys(accounts)?.[0] ?? \"\");\n    }\n  }, [account, accounts]);\n\n  return (\n    <Box display=\"flex\" flexDirection={\"column\"} width=\"100%\" height=\"100%\">\n      <Box display={\"flex\"} flex={\"0 1 auto\"}>\n        <Tabs\n          value={account}\n          defaultValue={firstAccount}\n          onChange={(_, value) => {\n            setAccount(value as string);\n          }}\n        >\n          {Object.keys(accounts).map((account) => {\n            return <Tab key={account} value={account} label={account} />;\n          })}\n          <Tab component={NewAccount} />\n        </Tabs>\n      </Box>\n      <Box flex={\"1 1 auto\"}>\n        {accounts[account]?.type === \"account\" && (\n          <AccountTab accountName={account} />\n        )}\n        {accounts[account]?.type === \"mortgage\" && (\n          <MortgageTab accountName={account} />\n        )}\n      </Box>\n    </Box>\n  );\n};\n","import Grid from \"@mui/system/Unstable_Grid\";\nimport { WealthChart } from \"./components/wealth-chart\";\nimport { AccountTabs } from \"./components/account-tabs\";\n\nexport const NetWealth = () => {\n  return (\n    <Grid container height={\"100%\"} width=\"100%\">\n      <Grid xs={12} height=\"50%\">\n        <WealthChart />\n      </Grid>\n      <Grid xs={12} height=\"50%\">\n        <AccountTabs />\n      </Grid>\n    </Grid>\n  );\n};\n","export interface Outcome {\n  min: number;\n  max: number;\n  avg: number;\n  actual?: number;\n}\n\nexport interface BonusOutcomes {\n  percent: Outcome;\n  cash: Outcome;\n}\n\nexport const minMaxAvg = (values: number[]): Outcome => {\n  if (values.length === 0) {\n    return { min: 0, max: 0, avg: 0 };\n  }\n  return values.reduce(\n    (acc, curr, index, arr) => {\n      const { min, max, avg } = acc;\n      return {\n        min: Math.min(curr, min),\n        max: Math.max(curr, max),\n        avg: index === arr.length - 1 ? (avg + curr) / arr.length : avg + curr,\n      };\n    },\n    { min: Infinity, max: 0, avg: 0 }\n  );\n};\n\nexport const outcomeFromSingle = (value: number): Outcome => {\n  return { min: value, max: value, avg: value, actual: value };\n};\n\nexport const actualizedOutcome = (outcome: Outcome): Outcome =>\n  outcome.actual ? outcomeFromSingle(outcome.actual) : outcome;\n\nexport const scaleOutcome = (outcome: Outcome, value: number): Outcome => {\n  return {\n    min: outcome.min * value,\n    max: outcome.max * value,\n    avg: outcome.avg * value,\n    actual: outcome.actual ? outcome.actual * value : undefined,\n  };\n};\nexport const AddConstantOutcome = (\n  outcome: Outcome,\n  value: number\n): Outcome => {\n  return {\n    min: outcome.min + value,\n    max: outcome.max + value,\n    avg: outcome.avg + value,\n    actual: outcome.actual ? outcome.actual + value : undefined,\n  };\n};\n\nexport const MultiplyOutcome = (\n  outcomeA: Outcome,\n  outcomeB: Outcome\n): Outcome => {\n  return {\n    min: outcomeA.min * outcomeB.min,\n    max: outcomeA.max * outcomeB.max,\n    avg: outcomeA.avg * outcomeB.avg,\n    actual:\n      outcomeA.actual != undefined && outcomeB.actual != undefined\n        ? outcomeA.actual * outcomeB.avg\n        : undefined,\n  };\n};\n\nexport const AddOutcome = (...outcomes: Outcome[]): Outcome => {\n  const everyActualDefined = outcomes.every((x) => x.actual != undefined);\n  return outcomes.reduce(\n    (acc, curr) => {\n      return {\n        min: acc.min + curr.min,\n        avg: acc.avg + curr.avg,\n        max: acc.max + curr.max,\n        actual: everyActualDefined\n          ? (acc.actual ?? 0) + (curr.actual ?? 0)\n          : undefined,\n      };\n    },\n    { min: 0, max: 0, avg: 0, actual: undefined }\n  );\n};\n","import { Box } from \"@mui/material\";\nimport { ReactNode } from \"react\";\n\ninterface CellProps {\n  children?: ReactNode;\n  secondaryValue?: ReactNode;\n  tertiaryValue?: ReactNode;\n  title: string;\n}\n\nexport const Value = (props: CellProps) => {\n  const { children, secondaryValue, tertiaryValue, title } = props;\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        minWidth: 106,\n        height: 64,\n        padding: \"0px 8px\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"flex-start\",\n        gap: 0.5,\n        flexShrink: 0,\n      }}\n    >\n      <Box display={\"flex\"} alignItems={\"center\"} gap={0.5}>\n        <Box fontSize={18} fontWeight={700} lineHeight={\"20px\"}>\n          {children ? children : \"??\"}\n        </Box>\n        {!!(secondaryValue ?? tertiaryValue) && (\n          <Box\n            alignSelf={\"flex-end\"}\n            fontSize={12}\n            fontWeight={500}\n            lineHeight={\"16px\"}\n            textTransform={\"uppercase\"}\n            color={\"#888\"}\n          >\n            {secondaryValue ?? tertiaryValue}\n          </Box>\n        )}\n      </Box>\n      <Box\n        fontSize={12}\n        fontWeight={500}\n        lineHeight={\"16px\"}\n        textTransform={\"uppercase\"}\n      >\n        {title}\n      </Box>\n    </Box>\n  );\n};\n","import { formatCashShort } from \"shared/utility/format-cash\";\n\ninterface CashProps {\n  value?: number;\n  fallback?: number;\n}\nexport const Cash = ({ value, fallback }: CashProps) => {\n  return value ? formatCashShort(value) : fallback;\n};\n","import { Box } from \"@mui/material\";\nimport { DateTime } from \"luxon\";\nimport { ReactNode, useMemo } from \"react\";\n\ninterface DurationProps {\n  dateTime: DateTime;\n  children?: ReactNode;\n}\nexport const Duration = ({ dateTime, children }: DurationProps) => {\n  const countDownStr = useMemo(\n    () => dateTime.diffNow([\"months\", \"days\", \"hours\"]).toFormat(\"d'd'\"),\n    [dateTime]\n  );\n\n  const countDownColor = useMemo(() => {\n    const days = dateTime.diffNow(\"days\").days;\n    if (days < 30) {\n      return \"green\";\n    } else if (days < 60) {\n      return \"yellow\";\n    }\n    return \"red\";\n  }, [dateTime]);\n\n  return dateTime > DateTime.local() ? (\n    <Box color={countDownColor}>{countDownStr}</Box>\n  ) : (\n    children\n  );\n};\n","export const formatPercent = new Intl.NumberFormat(\"en-us\", {\n  style: \"percent\",\n  maximumFractionDigits: 1,\n}).format;\n","import { formatPercent } from \"shared/utility/format-percent\";\n\ninterface PercentProps {\n  value: number;\n}\nexport const Percent = ({ value }: PercentProps) => {\n  return formatPercent(value);\n};\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\nimport { BonusOutcomes } from \"shared/utility/min-max-avg\";\nimport { Value } from \"./value\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Duration } from \"shared/components/formatters/duration\";\nimport { Percent } from \"shared/components/formatters/percent\";\n\nexport const BonusOutcome = (props: {\n  title: string;\n  outcome: BonusOutcomes;\n  payDate: DateTime;\n}) => {\n  const { outcome, title, payDate } = props;\n\n  return (\n    <Box sx={{ border: \"1px solid rgba(255,255,255,0.1)\", borderRadius: 2 }}>\n      <Typography\n        sx={{\n          paddingBottom: 1,\n          paddingLeft: 2,\n          paddingTop: 1,\n          paddingRight: 2,\n        }}\n        variant=\"h5\"\n      >\n        {title}\n      </Typography>\n      <Divider />\n      <Stack\n        padding={1}\n        direction={\"row\"}\n        spacing={0.5}\n        justifyContent={\"center\"}\n      >\n        {!outcome.cash.actual && (\n          <>\n            <Value\n              secondaryValue={<Percent value={outcome.percent.min} />}\n              title={\"min\"}\n            >\n              <Cash value={outcome.cash.min} fallback={0} />\n            </Value>\n            <Value\n              secondaryValue={<Percent value={outcome.percent.avg} />}\n              title={\"avg\"}\n            >\n              <Cash value={outcome.cash.avg} fallback={0} />\n            </Value>\n            <Value\n              secondaryValue={<Percent value={outcome.percent.max} />}\n              title={\"max\"}\n            >\n              <Cash value={outcome.cash.max} fallback={0} />\n            </Value>\n          </>\n        )}\n        <Value\n          title={\"Actual\"}\n          tertiaryValue={\n            outcome.percent.actual && <Percent value={outcome.percent.actual} />\n          }\n          secondaryValue={\n            outcome.cash.actual && <Cash value={outcome.cash.actual} />\n          }\n        >\n          <Duration dateTime={payDate}>\n            <Cash value={outcome.cash.actual} />\n          </Duration>\n        </Value>\n      </Stack>\n    </Box>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport { Button, Tooltip } from \"@mui/material\";\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { AccountData } from \"shared/models/account-data\";\nimport { TimeSeries } from \"shared/models/projected-wealth\";\nimport { store } from \"shared/store\";\nimport { formatCash } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport UpdateIcon from \"@mui/icons-material/Update\";\nimport { Stack } from \"@mui/system\";\n\nexport const createAccountColumnConfig = (\n  accountName: TimeSeries,\n  variant: \"number\" | \"cash\" | \"percent\"\n): ColDef<AccountData>[] => [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\n      return (\n        <Stack direction={\"row\"} alignItems={\"center\"}>\n          {x.valueFormatted}&nbsp;\n          {x.value && x.value > DateTime.local() && (\n            <Tooltip title=\"Future Event\">\n              <UpdateIcon htmlColor=\"yellow\" />\n            </Tooltip>\n          )}\n        </Stack>\n      );\n    },\n  },\n  {\n    headerName: \"Value\",\n    valueGetter: (x) => x.data?.value,\n    valueFormatter: (x) =>\n      variant === \"number\"\n        ? x.value\n        : variant === \"cash\"\n        ? formatCash(x.value)\n        : (x.value * 100).toFixed(2) + \"%\",\n    type: \"numericColumn\",\n    editable: true,\n    cellEditor: \"agNumberCellEditor\",\n    valueSetter: (x) => {\n      store.setState((prev) => {\n        const next = create(prev, (next) => {\n          const account = next.projectedIncome.timeSeries[accountName];\n          const idx = account.findIndex(({ id }) => id === x.data.id);\n          account[idx].value = +x.newValue;\n        });\n        return next;\n      });\n      return true;\n    },\n  },\n  {\n    headerName: \"Actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            store.setState((prev) => {\n              return create(prev, (next) => {\n                const idxToRemove = next.projectedIncome.timeSeries[\n                  accountName\n                ].findIndex((x) => x.id === props.data?.id);\n                next.projectedIncome.timeSeries[accountName].splice(\n                  idxToRemove,\n                  1\n                );\n              });\n            });\n          }}\n          color=\"error\"\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n","import {\n  Box,\n  Button,\n  InputAdornment,\n  Paper,\n  Stack,\n  TextField,\n  Tooltip,\n  Typography,\n} from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { useMemo, useState } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { TimeSeries } from \"shared/models/projected-wealth\";\nimport { store } from \"shared/store\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { sortByDate } from \"shared/utility/sort-by-date\";\nimport { v4 as uuid } from \"uuid\";\nimport { createAccountColumnConfig } from \"./column-config\";\n\nexport const DataEntry = (props: {\n  accountName: TimeSeries;\n  defaultDate: DateTime;\n  variant?: \"number\" | \"cash\" | \"percent\";\n}) => {\n  const { accountName, defaultDate, variant = \"number\" } = props;\n  const account = useStore(\n    store,\n    (state) => state.projectedIncome.timeSeries[accountName]\n  );\n\n  const [date, setDate] = useState(defaultDate);\n  const [amount, setAmount] = useState<number | null>(null);\n\n  const hasSameDate = useMemo(() => {\n    return !!account?.find((x) =>\n      date.hasSame(DateTime.fromISO(x.date), \"day\")\n    );\n  }, [account, date]);\n\n  const onAddEntry = () => {\n    amount != null &&\n      store.setState((prev) => {\n        return create(prev, (next) => {\n          next.projectedIncome.timeSeries[accountName] =\n            next.projectedIncome.timeSeries[accountName]\n              .concat({\n                date: date.toString(),\n                value: variant === \"percent\" ? amount / 100 : amount,\n                id: uuid(),\n              })\n              .sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\n        });\n      });\n  };\n\n  const accountColumnConfig = useMemo(() => {\n    return createAccountColumnConfig(accountName, variant);\n  }, [accountName, variant]);\n\n  return (\n    <Box display={\"flex\"} flexDirection={\"column\"} height=\"100%\">\n      <Stack spacing={2} flex=\"0 1 auto\">\n        <DatePicker\n          format={shortDate}\n          sx={{ color: \"white\" }}\n          label=\"Date\"\n          value={date}\n          onChange={(value) => {\n            console.log(value);\n            value && setDate(value);\n          }}\n        />\n        <TextField\n          label=\"amount\"\n          value={amount ?? \"\"}\n          type=\"number\"\n          onChange={(event) =>\n            event.target.value === \"\"\n              ? setAmount(null)\n              : setAmount(+event.target.value)\n          }\n          InputProps={{\n            startAdornment: variant !== \"number\" && (\n              <InputAdornment position=\"start\">\n                {variant === \"cash\" ? \"$\" : \"%\"}\n              </InputAdornment>\n            ),\n          }}\n        />\n        <Button\n          disabled={amount === null || !date || hasSameDate}\n          onClick={onAddEntry}\n        >\n          Add Entry\n        </Button>\n      </Stack>\n      <Box sx={{ paddingTop: 2, flex: \"1 1 auto\" }}>\n        <AgGrid\n          reactiveCustomComponents\n          rowData={account ?? []}\n          columnDefs={accountColumnConfig}\n          id={account + \"-history\"}\n          autoSizeStrategy={{\n            type: \"fitGridWidth\",\n          }}\n          stopEditingWhenCellsLoseFocus\n        />\n      </Box>\n    </Box>\n  );\n};\n\nexport interface LayoutProps {\n  title: string;\n  accountName: TimeSeries;\n  defaultDate: DateTime;\n  variant: \"percent\" | \"number\" | \"cash\";\n}\n\nexport const Layout = (props: LayoutProps) => {\n  const { title, accountName, defaultDate, variant } = props;\n  return (\n    <Paper sx={{ padding: 2, height: \"100%\", width: 450, flexShrink: 0 }}>\n      <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\n        <Box flex=\"0 1 auto\" marginBottom={2}>\n          <Typography sx={{ marginBottom: 2 }} variant=\"h5\">\n            {title}{\" \"}\n            {variant === \"cash\" && (\n              <Tooltip\n                title={\n                  <>\n                    <span>Cash values are used in lieu of Percent values.</span>\n                    <br />\n                    <span>\n                      Cash values are considered actual payment values.\n                    </span>\n                  </>\n                }\n              >\n                <span>($)</span>\n              </Tooltip>\n            )}\n            {variant === \"percent\" && (\n              <Tooltip title=\"Percentage values are used for predictions.\">\n                <span>(%)</span>\n              </Tooltip>\n            )}\n          </Typography>\n        </Box>\n        <Box flex=\"1 1 auto\">\n          <DataEntry\n            variant={variant}\n            accountName={accountName}\n            defaultDate={defaultDate}\n          />\n        </Box>\n      </Box>\n    </Paper>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { ReactNode } from \"react\";\n\ninterface UntilProps {\n  dateTime: DateTime;\n  children: ReactNode;\n}\n\nexport const Until = (props: UntilProps) => {\n  const { dateTime, children } = props;\n  return DateTime.local() < dateTime && children;\n};\n","import { useMemo } from \"react\";\nimport { AccountData } from \"shared/models/account-data\";\n\nexport const useMostFrequentValue = (\n  data: AccountData[]\n): number | undefined => {\n  return useMemo(() => {\n    return Object.entries(\n      Object.groupBy(\n        data.map((x) => x.value),\n        (x) => x\n      )\n    )\n      .map(([key, values]) => [+key, values?.length ?? 0])\n      .sort(([, a], [, b]) => {\n        return b - a;\n      })[0]?.[0];\n  }, [data]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { AccountData } from \"shared/models/account-data\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/graph-helpers\";\nimport { sortByDate } from \"shared/utility/sort-by-date\";\nimport { useMostFrequentValue } from \"./use-most-frequent-value\";\n\nconst valueByDateRange = (account: AccountData[]) => {\n  return account\n    .toSorted(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"))\n    .map((x, index, array) => {\n      const next = array[index + 1];\n      return [\n        DateTime.fromISO(x.date),\n        (next?.date\n          ? DateTime.fromISO(next?.date).startOf(\"day\")\n          : DateTime.fromISO(x.date).startOf(\"day\").plus({ years: 1 })\n        ).minus({ days: 1 }),\n        x.value,\n      ] as const;\n    });\n};\n\nexport const useProjectedPay = () => {\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  const baseIncome = timeSeries.paycheck;\n\n  const lastMerit = useMostFrequentValue(timeSeries.meritIncreasePct);\n\n  return useMemo(() => {\n    const payPerPeriod = valueByDateRange(baseIncome);\n    const mostRecentPay =\n      payPerPeriod.length > 0\n        ? payPerPeriod[payPerPeriod.length - 1]\n        : ([DateTime.local(), DateTime.local().plus({ years: 1 }), 1] as const);\n\n    const projectedPayPerPeriod: [DateTime, DateTime, number][] =\n      Array(11).fill(mostRecentPay);\n    for (let i = 0; i < projectedPayPerPeriod.length; i++) {\n      const [start, end] = projectedPayPerPeriod[i];\n      const [, , value] = projectedPayPerPeriod[i - 1] ?? mostRecentPay;\n      const startDate = start.plus({ years: i + 1 });\n      const multiplier =\n        1 +\n        (lastMerit ?? 0) +\n        (findSameYear(startDate, timeSeries.equityPct)?.value ?? 0);\n\n      projectedPayPerPeriod[i] = [\n        startDate,\n        end.plus({ years: i + 1 }),\n        value * multiplier,\n      ] as const;\n    }\n\n    return [...payPerPeriod, ...projectedPayPerPeriod];\n  }, [baseIncome, lastMerit, timeSeries.equityPct]);\n};\n","import { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { useProjectedPay } from \"./use-projected-pay\";\n\nexport const useBaseIncome = (startDate: DateTime, endDate: DateTime) => {\n  const pay = useProjectedPay();\n\n  return useMemo(() => {\n    const combinedPayPerPeriod = pay.filter(([start, end]) => {\n      const rangeOutside = startDate <= start && endDate >= end;\n      const rangeInside = startDate >= start && end >= endDate;\n      const overlapEnd = startDate <= start && endDate < end && endDate > start;\n      const overlapStart =\n        startDate <= end && startDate >= start && endDate > end;\n      return rangeInside || rangeOutside || overlapEnd || overlapStart;\n    });\n\n    const x = combinedPayPerPeriod.map(([start, end, value]) => {\n      return [\n        DateTime.max(start, startDate),\n        DateTime.min(end, endDate),\n        value,\n      ] as const;\n    });\n\n    const incomePerPeriod = x.map(([start, end, value]) => {\n      const weeks = end.diff(start, \"weeks\").weeks / 2;\n      return [start, end, weeks * value, value, weeks] as const;\n    });\n\n    const totalIncome = Math.round(\n      incomePerPeriod.reduce((acc, [, , curr]) => acc + curr, 0)\n    );\n\n    return { totalIncome, incomePerPeriod };\n  }, [pay, startDate, endDate]);\n};\n","import ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\nimport {\n  Box,\n  Divider,\n  Stack,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  Tooltip,\n  Typography,\n} from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Duration } from \"shared/components/formatters/duration\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { Until } from \"shared/components/formatters/until\";\nimport { store } from \"shared/store\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { findSameYear } from \"shared/utility/graph-helpers\";\nimport { useBaseIncome } from \"../hooks/use-base-income\";\nimport { useMostFrequentValue } from \"../hooks/use-most-frequent-value\";\nimport { useProjectedPay } from \"../hooks/use-projected-pay\";\nimport { Value } from \"./value\";\n\nexport const MeritOutcome = (props: { title: string; payDate: DateTime }) => {\n  const { title, payDate } = props;\n\n  const income = useBaseIncome(\n    DateTime.fromObject({ day: 1, month: 1, year: payDate.year }),\n    DateTime.fromObject({ day: 1, month: 1, year: payDate.year + 1 })\n  );\n\n  const meritIncreases = useStore(\n    store,\n    (x) => x.projectedIncome.timeSeries.meritIncreasePct\n  );\n  const commonMerit = useMostFrequentValue(meritIncreases);\n  const meritPct = useStore(\n    store,\n    (x) =>\n      findSameYear(payDate, x.projectedIncome.timeSeries.meritIncreasePct)\n        ?.value ?? commonMerit\n  );\n  const payChecks = useProjectedPay();\n  const hasActualPaycheck = useStore(\n    store,\n    (x) => !!findSameYear(payDate, x.projectedIncome.timeSeries.paycheck)\n  );\n\n  const payCheck = useMemo(() => {\n    return payChecks.find(([start]) => start.year === payDate.year)?.[2] ?? 0;\n  }, [payChecks, payDate.year]);\n\n  const equityPct = useStore(\n    store,\n    (x) =>\n      payDate && findSameYear(payDate, x.projectedIncome.timeSeries.equityPct)\n  );\n\n  const totalAdjust = (meritPct ?? 0) + (equityPct?.value ?? 0);\n  //const multiplier = 1 + (DateTime.local() > payDate ? 0 : totalAdjust);\n\n  return (\n    <Box\n      sx={{\n        border: \"1px solid rgba(255,255,255,0.1)\",\n        borderRadius: 2,\n      }}\n    >\n      <Typography\n        sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1 }}\n        variant=\"h5\"\n      >\n        {title}\n      </Typography>\n      <Divider />\n\n      <Stack padding={1} direction={\"row\"} spacing={0.5}>\n        {!hasActualPaycheck && (\n          <Value title={\"Paycheck\"}>\n            <Cash value={payCheck * 1 + (equityPct?.value ?? 0)} />\n          </Value>\n        )}\n        <Tooltip\n          componentsProps={{\n            tooltip: {\n              sx: {\n                maxWidth: \"none\",\n              },\n            },\n          }}\n          title={\n            <Table sx={{ width: \"max-content\" }}>\n              <TableBody>\n                {income.incomePerPeriod.map(\n                  ([start, end, value, _paycheck, weeks], index) => {\n                    return (\n                      <TableRow key={index}>\n                        <TableCell>\n                          <Cash value={value} />\n                        </TableCell>\n                        <TableCell>{start.toFormat(shortDate)}</TableCell>\n                        <TableCell>\n                          <ArrowForwardIcon />\n                        </TableCell>\n                        <TableCell>{end.toFormat(shortDate)}</TableCell>\n                        <TableCell>\n                          <Cash value={_paycheck} /> x {weeks.toFixed(1)}\n                        </TableCell>\n                      </TableRow>\n                    );\n                  }\n                )}\n              </TableBody>\n            </Table>\n          }\n        >\n          <div>\n            <Value title={\"Base Pay\"}>\n              <Cash value={income.totalIncome ?? 0} />\n            </Value>\n          </div>\n        </Tooltip>\n        <Value\n          title={\"Actual\"}\n          secondaryValue={\n            <Until dateTime={payDate}>\n              <Percent value={totalAdjust} />\n            </Until>\n          }\n        >\n          <Duration dateTime={payDate}>\n            <Percent value={totalAdjust} />\n          </Duration>\n        </Value>\n      </Stack>\n    </Box>\n  );\n};\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\nimport { Outcome as TOutcome } from \"shared/utility/min-max-avg\";\nimport { Value } from \"./value\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Duration } from \"shared/components/formatters/duration\";\nimport { Until } from \"shared/components/formatters/until\";\nimport { ReactNode } from \"react\";\n\nexport const Outcome = (props: {\n  title: ReactNode;\n  outcome: TOutcome;\n  payDate?: DateTime;\n}) => {\n  const { outcome, title, payDate } = props;\n\n  return (\n    <Box\n      sx={{\n        border: \"1px solid rgba(255,255,255,0.1)\",\n        borderRadius: 2,\n      }}\n    >\n      <Typography\n        sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1 }}\n        variant=\"h5\"\n      >\n        {title}\n      </Typography>\n      <Divider />\n\n      <Stack padding={1} direction={\"row\"} spacing={0.5}>\n        {!outcome.actual && (\n          <>\n            <Value title={\"min\"}>\n              <Cash value={outcome.min} fallback={0} />\n            </Value>\n            <Value title={\"avg\"}>\n              <Cash value={outcome.avg} fallback={0} />\n            </Value>\n            <Value title={\"max\"}>\n              <Cash value={outcome.max} fallback={0} />\n            </Value>\n          </>\n        )}\n        {payDate && (\n          <Value\n            title={\"Actual\"}\n            secondaryValue={\n              <Until dateTime={payDate}>\n                <Cash value={outcome.actual} />\n              </Until>\n            }\n          >\n            <Duration dateTime={payDate}>\n              <Cash value={outcome.actual} />\n            </Duration>\n          </Value>\n        )}\n      </Stack>\n    </Box>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/graph-helpers\";\nimport {\n  BonusOutcomes,\n  actualizedOutcome,\n  minMaxAvg,\n  scaleOutcome,\n} from \"shared/utility/min-max-avg\";\nimport { useBaseIncome } from \"./use-base-income\";\nimport { useMostFrequentValue } from \"./use-most-frequent-value\";\n\nexport const useAprilBonus = (year: number): BonusOutcomes => {\n  const payedOn = useMemo(\n    () => DateTime.fromObject({ day: 15, month: 4, year }),\n    [year]\n  );\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  const { totalIncome } = useBaseIncome(\n    DateTime.fromObject({ day: 1, month: 1, year: year - 1 }),\n    DateTime.fromObject({ day: 1, month: 1, year })\n  );\n\n  const bonusAmmount = useMemo(() => {\n    return findSameYear(payedOn, timeSeries.meritBonus)?.value;\n  }, [payedOn, timeSeries.meritBonus]);\n\n  const bonusPercent = useMemo(() => {\n    return findSameYear(payedOn, timeSeries.meritBonusPct)?.value;\n  }, [payedOn, timeSeries.meritBonusPct]);\n\n  const frequentMeritBonusPercent = useMostFrequentValue(\n    timeSeries.meritBonusPct\n  );\n\n  return useMemo(() => {\n    const meritOutcome = minMaxAvg(\n      timeSeries.meritBonusPct\n        .filter((x) => DateTime.fromISO(x.date).year <= year)\n        .map((x) => x.value)\n    );\n    meritOutcome.avg = frequentMeritBonusPercent ?? 0;\n\n    return {\n      percent: actualizedOutcome({ ...meritOutcome, actual: bonusPercent }),\n      cash: actualizedOutcome({\n        ...scaleOutcome(meritOutcome, totalIncome),\n        actual:\n          bonusAmmount ??\n          (bonusPercent ? totalIncome * bonusPercent : undefined),\n      }),\n    };\n  }, [\n    bonusAmmount,\n    bonusPercent,\n    frequentMeritBonusPercent,\n    timeSeries.meritBonusPct,\n    totalIncome,\n    year,\n  ]);\n};\n","import { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { useBaseIncome } from \"./use-base-income\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/graph-helpers\";\nimport {\n  BonusOutcomes,\n  scaleOutcome,\n  minMaxAvg,\n  actualizedOutcome,\n} from \"shared/utility/min-max-avg\";\n\nexport const useJuneBonus = (year: number): BonusOutcomes => {\n  const payedOn = useMemo(\n    () => DateTime.fromObject({ day: 15, month: 6, year }),\n    [year]\n  );\n  const timeseries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  const { totalIncome } = useBaseIncome(\n    DateTime.fromObject({ day: 1, month: 4, year: year - 1 }),\n    DateTime.fromObject({ day: 31, month: 3, year })\n  );\n\n  return useMemo(() => {\n    const mostRecentBonus = findSameYear(payedOn, timeseries.companyBonus);\n    const mostRecentPercent = findSameYear(payedOn, timeseries.companyBonusPct);\n\n    const meritFactor = timeseries.meritBonusPct\n      .filter((x) => DateTime.fromISO(x.date).year <= year)\n      .slice(-3)\n      .reduce((acc, curr) => acc + curr.value, 0);\n\n    const outcomes = minMaxAvg(timeseries.companyBonusPct.map((x) => x.value));\n    const cash = scaleOutcome(outcomes, meritFactor * totalIncome);\n    const projectedActual = mostRecentPercent?.value\n      ? mostRecentPercent?.value * meritFactor * totalIncome\n      : undefined;\n\n    return {\n      percent: actualizedOutcome({\n        ...outcomes,\n        actual: mostRecentPercent?.value,\n      }),\n      cash: actualizedOutcome({\n        ...cash,\n        actual: mostRecentBonus?.value ?? projectedActual,\n      }),\n    };\n  }, [\n    totalIncome,\n    payedOn,\n    timeseries.companyBonus,\n    timeseries.companyBonusPct,\n    timeseries.meritBonusPct,\n    year,\n  ]);\n};\n","import { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { useBaseIncome } from \"./use-base-income\";\nimport { useAprilBonus } from \"./use-april-bonus\";\nimport { useJuneBonus } from \"./use-june-bonus\";\nimport {\n  AddOutcome,\n  BonusOutcomes,\n  actualizedOutcome,\n  outcomeFromSingle,\n  scaleOutcome,\n} from \"shared/utility/min-max-avg\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/graph-helpers\";\n\nconst bonusPercent = 0.15;\nexport const useJulyBonus = (year: number): BonusOutcomes => {\n  const payDay = useMemo(\n    () => DateTime.fromObject({ day: 15, month: 7, year }),\n    [year]\n  );\n\n  const actual = useStore(\n    store,\n    (x) =>\n      findSameYear(payDay, x.projectedIncome.timeSeries.retirementBonus)?.value\n  );\n\n  const { totalIncome } = useBaseIncome(\n    DateTime.fromObject({ day: 1, month: 7, year: year - 1 }),\n    DateTime.fromObject({ day: 1, month: 7, year })\n  );\n\n  const meritBonus = useAprilBonus(year);\n  const juneBonus = useJuneBonus(year);\n\n  return useMemo(() => {\n    const eligbleIncome = outcomeFromSingle(totalIncome);\n    const outcome = scaleOutcome(\n      AddOutcome(\n        eligbleIncome,\n        actualizedOutcome(meritBonus.cash),\n        actualizedOutcome(juneBonus.cash)\n      ),\n      bonusPercent\n    );\n    return {\n      cash: actualizedOutcome({ ...outcome, actual: actual ?? outcome.actual }),\n      percent: {\n        min: 0.15,\n        max: 0.15,\n        avg: 0.15,\n        actual: 0.15,\n      },\n    };\n  }, [actual, juneBonus.cash, meritBonus.cash, totalIncome]);\n};\n","import { Box, Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { DateTime } from \"luxon\";\nimport { useMemo, useState } from \"react\";\nimport {\n  AddOutcome,\n  actualizedOutcome,\n  outcomeFromSingle,\n} from \"shared/utility/min-max-avg\";\nimport { BonusOutcome } from \"./components/bonus-outcome\";\nimport { Layout } from \"./components/data-entry/data-entry\";\nimport { MeritOutcome } from \"./components/merit-increase\";\nimport { Outcome } from \"./components/outcome\";\nimport { useAprilBonus } from \"./hooks/use-april-bonus\";\nimport { useBaseIncome } from \"./hooks/use-base-income\";\nimport { useJulyBonus } from \"./hooks/use-july-bonus\";\nimport { useJuneBonus } from \"./hooks/use-june-bonus\";\nimport { store } from \"shared/store\";\nimport { useStore } from \"@tanstack/react-store\";\n\nexport const ProjectedIncome = () => {\n  const [year, setYear] = useState(DateTime.local().year);\n\n  const oldestYear = useStore(store, (x) => {\n    const first = x.projectedIncome.timeSeries.paycheck[1]?.date;\n    const date = first ? DateTime.fromISO(first) : DateTime.local();\n    return date.year;\n  });\n\n  const dates = useMemo(() => {\n    return {\n      janFirst: DateTime.fromObject({ day: 1, month: 1, year: year }),\n      nextJanFirst: DateTime.fromObject({\n        day: 1,\n        month: 1,\n        year: year + 1,\n      }),\n      junePayDay: DateTime.fromObject({ day: 15, month: 6, year: year }),\n      meritPayDay: DateTime.fromObject({ day: 15, month: 4, year: year }),\n      meritIncreaseDay: DateTime.fromObject({ day: 1, month: 4, year: year }),\n      julyPayDay: DateTime.fromObject({ day: 15, month: 7, year: year }),\n    };\n  }, [year]);\n\n  const income = useBaseIncome(dates.janFirst, dates.nextJanFirst);\n\n  const meritBonus = useAprilBonus(year);\n  const juneBonus = useJuneBonus(year);\n  const julyBonus = useJulyBonus(year);\n\n  const incomeOutcome = useMemo(() => {\n    return AddOutcome(\n      outcomeFromSingle(income.totalIncome),\n      actualizedOutcome(meritBonus.cash),\n      actualizedOutcome(juneBonus.cash),\n      actualizedOutcome(julyBonus.cash)\n    );\n  }, [income, julyBonus, juneBonus, meritBonus]);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" height=\"100%\" gap={2}>\n      <Box flex=\"0 1 auto\">\n        <Stack gap={2} direction={\"row\"} overflow={\"auto\"}>\n          <Outcome\n            title={\n              <Box display=\"flex\" alignItems={\"center\"} gap={2} width={\"100%\"}>\n                <span>Income</span>\n                <DatePicker\n                  sx={{ width: 90, marginLeft: \"auto\", marginRight: 2 }}\n                  label={\"year\"}\n                  views={[\"year\"]}\n                  minDate={DateTime.local().set({ year: oldestYear })}\n                  maxDate={DateTime.local().plus({ years: 10 })}\n                  defaultValue={DateTime.local()}\n                  slotProps={{\n                    textField: {\n                      variant: \"standard\",\n                      label: \"\",\n                    },\n                  }}\n                  onYearChange={(year) => {\n                    setYear(year.year);\n                  }}\n                />\n              </Box>\n            }\n            outcome={incomeOutcome}\n            payDate={dates.junePayDay}\n          />\n          <MeritOutcome\n            title=\"Merit Increase\"\n            payDate={dates.meritIncreaseDay}\n          />\n          <BonusOutcome\n            title=\"Merit Bonus\"\n            outcome={meritBonus}\n            payDate={dates.meritPayDay}\n          />\n          <BonusOutcome\n            title=\"Company Bonus\"\n            outcome={juneBonus}\n            payDate={dates.junePayDay}\n          />\n          <BonusOutcome\n            title=\"Retirement Bonus\"\n            outcome={julyBonus}\n            payDate={dates.julyPayDay}\n          />\n        </Stack>\n      </Box>\n      <Box flex=\"1 1 auto\">\n        <Box overflow={\"auto\"} width={\"100%\"} height={\"100%\"}>\n          <Box\n            height={\"100%\"}\n            display={\"flex\"}\n            gap={2}\n            flexWrap={\"nowrap\"}\n            flexShrink={0}\n          >\n            <Layout\n              accountName=\"paycheck\"\n              variant=\"cash\"\n              defaultDate={DateTime.fromObject({ day: 1, month: 4 })}\n              title=\"Income Per Check\"\n            />\n            <Layout\n              title=\"Merit Increase\"\n              accountName=\"meritIncreasePct\"\n              variant=\"percent\"\n              defaultDate={dates.meritIncreaseDay}\n            />\n            <Layout\n              title=\"Equity Increase\"\n              accountName=\"equityPct\"\n              variant=\"percent\"\n              defaultDate={dates.meritIncreaseDay}\n            />\n            <Layout\n              title=\"Merit Bonus\"\n              accountName=\"meritBonusPct\"\n              variant=\"percent\"\n              defaultDate={dates.meritPayDay}\n            />\n            <Layout\n              title=\"Merit Bonus\"\n              accountName=\"meritBonus\"\n              variant=\"cash\"\n              defaultDate={dates.meritPayDay}\n            />\n            <Layout\n              title=\"Company Bonus Factor\"\n              accountName=\"companyBonusPct\"\n              defaultDate={dates.junePayDay}\n              variant=\"percent\"\n            />\n            <Layout\n              title=\"Company Bonus\"\n              accountName=\"companyBonus\"\n              defaultDate={dates.junePayDay}\n              variant=\"cash\"\n            />\n            <Layout\n              title=\"Retirement Bonus\"\n              accountName=\"retirementBonus\"\n              defaultDate={dates.julyPayDay}\n              variant=\"cash\"\n            />\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { Account } from \"shared/models/account\";\nimport { Mortgage } from \"shared/models/mortgage\";\nimport { store } from \"shared/store\";\nimport { findNearstOnOrBefore } from \"shared/utility/graph-helpers\";\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\n\nexport const getWealth = (date: DateTime, accounts: (Account | Mortgage)[]) => {\n  return Math.max(\n    1,\n    accounts\n      .map((x) => {\n        if (x.type === \"account\") {\n          const entry = findNearstOnOrBefore(date, x.data);\n          return entry?.value ?? 0;\n        } else if (x.type === \"mortgage\" && x.loan) {\n          const houseValue = findNearstOnOrBefore(date, x.data);\n          const balance = calcLoanBalance(date, x.loan);\n          return calcEquity(\n            x.loan.ownershipPct,\n            houseValue?.value,\n            balance,\n            x.loan.principal\n          );\n        }\n      })\n      .reduce((acc, curr) => acc! + (curr ?? 0), 0)!\n  );\n};\n\nexport const getEarliestEntry = (accounts: (Account | Mortgage)[]) => {\n  return DateTime.fromMillis(\n    accounts\n      .map((x) => {\n        if (x.type === \"account\") {\n          return DateTime.fromISO(x.data[0].date);\n        }\n        return DateTime.local();\n      })\n      .reduce(\n        (acc, curr) => Math.min(acc, curr?.toMillis() ?? Infinity),\n        DateTime.local().toMillis()\n      )\n  );\n};\n\nexport const useYearlyWealth = (date: DateTime, benchmarkDate: DateTime) => {\n  const accounts = useStore(store, (x) => Object.values(x.wealth));\n  return useMemo(() => {\n    const earliest = getEarliestEntry(accounts);\n    if (earliest.year >= date.year) {\n      return { date, benchmarkDate, wealth: 0, yoyCash: 0, yoyPercent: 1 };\n    }\n\n    const currentDate = getWealth(date, accounts);\n    const benchmark = getWealth(benchmarkDate, accounts);\n\n    return {\n      date,\n      benchmarkDate,\n      wealth: currentDate,\n      benchmarkWealth: benchmark,\n      yoyCash: currentDate - benchmark,\n      yoyPercent: currentDate / benchmark,\n    };\n  }, [accounts, benchmarkDate, date]);\n};\n","import { DateTime } from \"luxon\";\nimport { useYearlyWealth } from \"./hooks/use-yearly-wealth\";\n\nexport const ProjectedWealth = () => {\n  return (\n    <>\n      {JSON.stringify(\n        useYearlyWealth(DateTime.local(), DateTime.fromObject({ year: 2024 })),\n        null,\n        2\n      )}\n      <br />\n      {JSON.stringify(\n        useYearlyWealth(\n          DateTime.fromObject({ year: 2024 }),\n          DateTime.fromObject({ year: 2022 })\n        ),\n        null,\n        2\n      )}\n      <br />\n      {JSON.stringify(\n        useYearlyWealth(\n          DateTime.fromObject({ year: 2023 }),\n          DateTime.fromObject({ year: 2022 })\n        ),\n        null,\n        2\n      )}\n      <br />\n      {JSON.stringify(\n        useYearlyWealth(\n          DateTime.fromObject({ year: 2022 }),\n          DateTime.fromObject({ year: 2021 })\n        ),\n        null,\n        2\n      )}\n      <br />\n      {JSON.stringify(\n        useYearlyWealth(\n          DateTime.fromObject({ year: 2021 }),\n          DateTime.fromObject({ year: 2020 })\n        ),\n        null,\n        2\n      )}\n      <br />\n      {JSON.stringify(\n        useYearlyWealth(\n          DateTime.fromObject({ year: 2020 }),\n          DateTime.fromObject({ year: 2019 })\n        ),\n        null,\n        2\n      )}\n      <br />\n    </>\n  );\n};\n\n/*\nShow Year+1 \n\nfuture savings:\n  +SSN \n  -Medicare surplus\n  +SDI limit\n  +Monthly Saving rate target\n  +Bonuses remaining\n    - April, June, July\n  +EOY home equity\n\n\nWhen do we hit SSN limit, 168600 2024\nwhen do we hit mediare surplus (.009 on all wages over 200k )\nwhen do we hit SDI limit\n\n\nShow all prior years on jan 1 20xx for which we have data\nYoY Growth in %\nYoY growth in $\n\n\n*/\n","import { Box, Button, ButtonProps } from \"@mui/material\";\nimport { ReactNode, useEffect, useState } from \"react\";\n\ntype SafetyState = \"inactive\" | \"activating\" | \"active\";\n\ninterface SafetyButtonProps {\n  inactiveLabel: string;\n  activatingLabel: string;\n  activeLabel: string;\n  icon?: ReactNode;\n  onConfirm: () => void;\n}\n\nexport const SafetyButton = (\n  props: Omit<ButtonProps, \"children\"> & SafetyButtonProps\n) => {\n  const {\n    inactiveLabel,\n    activatingLabel,\n    activeLabel,\n    onConfirm,\n    icon,\n    variant,\n    disabled,\n    ...rest\n  } = props;\n  const [safetyState, setSafetyState] = useState<SafetyState>(\"inactive\");\n\n  useEffect(() => {\n    if (safetyState === \"active\") {\n      setTimeout(() => {\n        setSafetyState((prev) => {\n          return prev === \"active\" ? \"inactive\" : prev;\n        });\n      }, 2000);\n    } else if (safetyState === \"activating\") {\n      setTimeout(() => {\n        setSafetyState(\"active\");\n      }, 2000);\n    }\n  }, [safetyState]);\n\n  return (\n    <Box\n      sx={{\n        minWidth: 130,\n        padding: safetyState === \"active\" ? \"8px\" : \"unset\",\n      }}\n    >\n      <Button\n        {...rest}\n        sx={{ height: \"100%\", width: \"100%\" }}\n        disabled={disabled || safetyState === \"activating\"}\n        variant={safetyState === \"active\" ? \"contained\" : variant}\n        size=\"small\"\n        onClick={() => {\n          safetyState === \"inactive\" && setSafetyState(\"activating\");\n          safetyState === \"active\" && onConfirm?.();\n        }}\n      >\n        {icon}\n        {safetyState === \"inactive\" && inactiveLabel}\n        {safetyState === \"activating\" && activatingLabel}\n        {safetyState === \"active\" && activeLabel}\n      </Button>\n    </Box>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useCallback } from \"react\";\nimport { store } from \"shared/store\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const useExport = () => {\n  const storeData = useStore(store);\n  const onExport = useCallback(() => {\n    const data = JSON.stringify(storeData, null, 2);\n    const link = document.createElement(\"a\");\n    link.download = `wealth-tracker-${DateTime.local().toFormat(\n      shortDate\n    )}.json`;\n    const blob = new Blob([data], { type: \"application/json\" });\n    link.href = window.URL.createObjectURL(blob);\n    link.click();\n  }, [storeData]);\n\n  return onExport;\n};\n","import { useCallback } from \"react\";\nimport { storeValidator } from \"shared/models/store\";\nimport { store } from \"shared/store\";\n\nfunction selectFile(contentType: string) {\n  return new Promise<File>((resolve) => {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.multiple = false;\n    input.accept = contentType;\n\n    input.onchange = () => {\n      const files = Array.from(input.files ?? []);\n      resolve(files[0]);\n    };\n\n    input.click();\n  });\n}\n\nexport const useImport = () => {\n  return useCallback(async () => {\n    const file = await selectFile(\"application/json\");\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = (readerEvent) => {\n      const content = readerEvent.target?.result?.toString();\n      if (content) {\n        const data = JSON.parse(window.atob(content.split(\",\")[1]));\n        const validation = storeValidator.safeParse(data);\n        validation.success && store.setState(() => data);\n      }\n    };\n  }, []);\n};\n","import DeleteForever from \"@mui/icons-material/DeleteForever\";\nimport { Box, Button, Stack, Tab, Tabs } from \"@mui/material\";\nimport { NetWealth } from \"capabilities/net-wealth\";\nimport { ProjectedIncome } from \"capabilities/projected-income\";\nimport { ProjectedWealth } from \"capabilities/projected-wealth\";\nimport { useState } from \"react\";\nimport { SafetyButton } from \"shared/components/safety-button\";\nimport { useExport } from \"shared/hooks/use-export\";\nimport { useImport } from \"shared/hooks/use-import\";\nimport { getDefaults } from \"shared/models/projected-wealth\";\nimport { store } from \"shared/store\";\n\nexport const App = () => {\n  const [tab, setTab] = useState<string>(\"projected-income\");\n  const onExport = useExport();\n  const onImport = useImport();\n  return (\n    <>\n      <Stack direction=\"row\">\n        <Tabs value={tab} onChange={(_, value) => setTab(value)}>\n          <Tab value=\"wealth\" label=\"Total Wealth\" />\n          <Tab value=\"projected-income\" label=\"Projected Income\" />\n          <Tab value=\"projected-wealth\" label=\"Projected Wealth\" />\n        </Tabs>\n        <Box marginLeft={\"auto\"} gap={2} display={\"flex\"}>\n          <Button onClick={onImport}>Import</Button>\n          <Button onClick={onExport}>Export</Button>\n          <SafetyButton\n            onConfirm={() => {\n              store.setState(() => getDefaults());\n            }}\n            inactiveLabel=\"Reset\"\n            activatingLabel=\"Wait\"\n            activeLabel=\"Confirm\"\n            color=\"error\"\n            icon={<DeleteForever />}\n          />\n        </Box>\n      </Stack>\n      <Box padding={2} height={\"95%\"} width={\"100%\"}>\n        {tab === \"wealth\" && <NetWealth />}\n        {tab === \"projected-income\" && <ProjectedIncome />}\n        {tab === \"projected-wealth\" && <ProjectedWealth />}\n      </Box>\n    </>\n  );\n};\n","import { CssBaseline, ThemeProvider, createTheme } from \"@mui/material\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers\";\nimport { AdapterLuxon } from \"@mui/x-date-pickers/AdapterLuxon\";\nimport \"ag-grid-community/styles/ag-grid.css\";\nimport \"ag-grid-community/styles/ag-theme-quartz.css\";\nimport { App } from \"app/app.tsx\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport \"./index.css\";\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: \"dark\",\n  },\n});\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <ErrorBoundary\n      fallbackRender={(props) => {\n        return (\n          <>\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.message}</div>\n            <div style={{ backgroundColor: \"#FFF\" }}>\n              {props.error.stackTrace}\n            </div>\n          </>\n        );\n      }}\n    >\n      <LocalizationProvider dateAdapter={AdapterLuxon}>\n        <ThemeProvider theme={darkTheme}>\n          <CssBaseline />\n          <App />\n        </ThemeProvider>\n      </LocalizationProvider>\n    </ErrorBoundary>\n  </React.StrictMode>\n);\n\n"],"names":["accountDataValidator","z","object","date","string","value","number","id","accountValidator","type","literal","data","array","loanValidator","principal","ratePct","paymentsPerYear","payment","firstPaymentDate","ownershipPct","mortgageValidator","loan","optional","wealth","record","union","projectedWealth","timeSeries","paycheck","retirementRate","savingsRate","meritBonusPct","companyBonusPct","meritBonus","companyBonus","retirementBonus","equityPct","meritIncreasePct","getDefaults","projectedIncome","storeValidator","createStore","key","validator","defaultValue","localData","localStorage","getItem","JSON","parse","safeParse","success","log","error","next","merge","setItem","stringify","store","CreateStore","subscribe","current","state","formatCashShort","Intl","NumberFormat","style","currency","notation","maximumFractionDigits","format","formatCash","calcLoanBalance","pricipal","rate","monthlyPayment","anualizedRate","periods","diff","DateTime","fromISO","months","totalRate","balance","calcEquity","houseValue","loanBalance","findNearstOnOrBefore","find","x","idx","startOf","length","findSameYear","year","getMortgateValue","mortgage","entry","getAccountValue","account","getGraphValue","getGraphDates","accounts","Set","flatMap","map","toISO","sort","a","b","toMillis","useGraphData","useStore","useMemo","dates","Object","values","entries","graphData","reduce","acc","accountName","toJSDate","total","forEach","arr","keys","firstNonZero","findIndex","slice","WealthChart","series","stacked","xKey","yKey","yName","tooltip","renderer","datum","content","fromJSDate","toISODate","options","theme","title","text","axes","position","label","NewAccount","forwardRef","props","ref","open","setOpen","useState","nameRef","useRef","setError","accountType","setAccountType","undefined","marginLeft","target","setState","create","prev","children","AgGrid","rest","height","AgGridReact","shortDate","sortByDate","select","direction","DeleteAccount","padding","width","onDeleteAccount","RenameAccount","nextAccountName","setNextAccountName","event","onUpdateName","createAccountColumnConfig","headerName","valueFormatter","toFormat","valueGetter","cellRenderer","idxToRemove","splice","DeleteForeverIcon","useMissingYears","years","groupBy","janFirst","fromObject","day","month","days","lookup","fromEntries","missing","i","push","AccountTab","setDate","local","amount","setamount","missingYears","hasSameDate","hasSame","onAddEntry","toString","uuid","accountColumnConfig","join","color","startAdornment","mortgageColumnConfig","toFixed","equity","selector","curr","convertPct","min","datetime","offset","AddLoan","textField","parsed","issues","path","AddEntry","Stack","MortgageTab","allAccounts","mortgageData","AccountTabs","firstAccount","setAccount","useEffect","_","NetWealth","minMaxAvg","max","avg","index","Math","Infinity","outcomeFromSingle","actual","actualizedOutcome","outcome","scaleOutcome","AddOutcome","outcomes","everyActualDefined","every","Value","secondaryValue","tertiaryValue","display","minWidth","flexDirection","justifyContent","alignItems","gap","flexShrink","Cash","fallback","Duration","dateTime","countDownStr","diffNow","countDownColor","formatPercent","Percent","BonusOutcome","payDate","border","borderRadius","paddingBottom","paddingLeft","paddingTop","paddingRight","cash","percent","variant","valueFormatted","UpdateIcon","editable","cellEditor","valueSetter","newValue","DataEntry","defaultDate","setAmount","concat","console","flex","Layout","marginBottom","Until","useMostFrequentValue","valueByDateRange","toSorted","plus","minus","useProjectedPay","baseIncome","lastMerit","payPerPeriod","mostRecentPay","projectedPayPerPeriod","Array","fill","start","end","startDate","multiplier","useBaseIncome","endDate","pay","incomePerPeriod","filter","rangeOutside","rangeInside","overlapEnd","overlapStart","weeks","totalIncome","round","MeritOutcome","income","meritIncreases","commonMerit","meritPct","payChecks","hasActualPaycheck","payCheck","totalAdjust","sx","maxWidth","_paycheck","ArrowForwardIcon","Outcome","useAprilBonus","payedOn","bonusAmmount","bonusPercent","frequentMeritBonusPercent","meritOutcome","useJuneBonus","timeseries","mostRecentBonus","mostRecentPercent","meritFactor","projectedActual","useJulyBonus","payDay","juneBonus","eligbleIncome","ProjectedIncome","setYear","oldestYear","first","nextJanFirst","junePayDay","meritPayDay","meritIncreaseDay","julyPayDay","julyBonus","incomeOutcome","Box","marginRight","set","getWealth","getEarliestEntry","fromMillis","useYearlyWealth","benchmarkDate","earliest","yoyCash","yoyPercent","currentDate","benchmark","benchmarkWealth","ProjectedWealth","SafetyButton","inactiveLabel","activatingLabel","activeLabel","onConfirm","icon","disabled","safetyState","setSafetyState","setTimeout","useExport","storeData","onExport","useCallback","link","document","createElement","download","blob","Blob","href","window","URL","createObjectURL","click","selectFile","contentType","Promise","input","multiple","accept","onchange","files","from","useImport","file","reader","FileReader","readAsDataURL","onload","readerEvent","result","atob","split","App","tab","setTab","onImport","DeleteForever","darkTheme","createTheme","palette","mode","ReactDOM","createRoot","getElementById","render","backgroundColor","message","stackTrace","AdapterLuxon"],"mappings":"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"}