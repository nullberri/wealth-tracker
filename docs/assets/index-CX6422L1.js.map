{"version":3,"file":"index-CX6422L1.js","sources":["../../src/shared/models/account-data.ts","../../src/shared/models/account.ts","../../src/shared/models/loan.ts","../../src/shared/models/mortgage.ts","../../src/shared/models/net-wealth.ts","../../src/shared/models/projected-wealth.ts","../../src/shared/models/store.ts","../../src/shared/store.ts","../../src/shared/utility/format-cash.ts","../../src/shared/utility/mortgage-calc.ts","../../src/shared/utility/graph-helpers.ts","../../src/capabilities/net-wealth/components/wealth-chart/use-graph-data.ts","../../src/capabilities/net-wealth/components/wealth-chart/wealth-chart.tsx","../../src/capabilities/net-wealth/components/new-account/new-account.tsx","../../src/shared/components/ag-grid/ag-grid.tsx","../../src/shared/utility/format-date.ts","../../src/shared/utility/sort-by-date.ts","../../src/capabilities/net-wealth/components/tab-types/components/delete-account.tsx","../../src/capabilities/net-wealth/components/tab-types/components/update-account.tsx","../../src/capabilities/net-wealth/components/tab-types/account/column-config.tsx","../../src/capabilities/net-wealth/components/tab-types/account/account.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/column-config.tsx","../../src/shared/utility/group-by.ts","../../src/capabilities/net-wealth/components/tab-types/mortgage/add-loan.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/add-entry.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/mortgage.tsx","../../src/capabilities/net-wealth/components/account-tabs/account-tabs.tsx","../../src/capabilities/net-wealth/net-wealth.tsx","../../src/capabilities/projected-income/hooks/use-cg-base-income.ts","../../src/shared/utility/min-max-avg.ts","../../src/capabilities/projected-income/hooks/use-cg-april-bonus.ts","../../src/capabilities/projected-income/hooks/use-cg-june-bonus.ts","../../src/capabilities/projected-income/hooks/use-cg-july-bonus.ts","../../src/capabilities/projected-income/components/value.tsx","../../src/shared/components/formatters/cash.tsx","../../src/shared/components/formatters/duration.tsx","../../src/shared/utility/format-percent.ts","../../src/shared/components/formatters/percent.tsx","../../src/shared/components/formatters/until.tsx","../../src/capabilities/projected-income/components/bonus-outcome.tsx","../../src/capabilities/projected-income/components/outcome.tsx","../../src/capabilities/projected-income/components/merit-increase.tsx","../../src/capabilities/projected-income/components/data-entry/column-config.tsx","../../src/capabilities/projected-income/components/data-entry/data-entry.tsx","../../src/capabilities/projected-income/projected-income.tsx","../../src/app/app.tsx","../../src/main.tsx"],"sourcesContent":["import { z } from \"zod\";\r\n\r\nexport const accountDataValidator = z.object({\r\n  date: z.string(),\r\n  value: z.number(),\r\n  id: z.string(),\r\n});\r\n\r\nexport type AccountData = z.infer<typeof accountDataValidator>;\r\n\r\n","import { z } from \"zod\";\r\nimport { accountDataValidator } from \"./account-data\";\r\n\r\nexport const accountValidator = z.object({\r\n  type: z.literal(\"account\"),\r\n  data: z.array(accountDataValidator),\r\n});\r\n\r\nexport type Account = z.infer<typeof accountValidator>;\r\n\r\n","import { z } from \"zod\";\r\n\r\nexport const loanValidator = z.object({\r\n  principal: z.number(),\r\n  ratePct: z.number(),\r\n  paymentsPerYear: z.number(),\r\n  payment: z.number(),\r\n  firstPaymentDate: z.string(),\r\n  ownershipPct: z.number(),\r\n});\r\n\r\nexport type Loan = z.infer<typeof loanValidator>;\r\n\r\n","import { z } from \"zod\";\r\nimport { accountDataValidator } from \"./account-data\";\r\nimport { loanValidator } from \"./loan\";\r\n\r\nexport const mortgageValidator = z.object({\r\n  type: z.literal(\"mortgage\"),\r\n  loan: loanValidator.optional(),\r\n  data: z.array(accountDataValidator),\r\n});\r\n\r\nexport type Mortgage = z.infer<typeof mortgageValidator>;\r\n\r\n","import { z } from \"zod\";\r\nimport { accountValidator } from \"./account\";\r\nimport { mortgageValidator } from \"./mortgage\";\r\n\r\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\r\n\r\nexport type Wealth = z.infer<typeof wealth>;\r\n","import { z } from \"zod\";\r\nimport { accountDataValidator } from \"./account-data\";\r\n\r\nexport const projectedWealth = z.object({\r\n  timeSeries: z.object({\r\n    cgIncome: z.array(accountDataValidator),\r\n    retirementRate: z.array(accountDataValidator),\r\n    savingsRate: z.array(accountDataValidator),\r\n    meritBonusPct: z.array(accountDataValidator),\r\n    companyBonusPct: z.array(accountDataValidator),\r\n    meritBonus: z.array(accountDataValidator),\r\n    companyBonus: z.array(accountDataValidator),\r\n    mrpBonus: z.array(accountDataValidator),\r\n    equityPct: z.array(accountDataValidator),\r\n    meritIncreasePct: z.array(accountDataValidator),\r\n  }),\r\n});\r\n\r\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\r\nexport type TimeSeries = keyof ProjectedWealth[\"timeSeries\"];\r\n","import { z } from \"zod\";\r\nimport { wealth } from \"./net-wealth\";\r\nimport { projectedWealth } from \"./projected-wealth\";\r\n\r\nexport const storeValidator = z.object({\r\n  wealth: wealth,\r\n  projectedIncome: projectedWealth,\r\n});\r\n\r\nexport type Store = z.infer<typeof storeValidator>;\r\n","import { Store as CreateStore } from \"@tanstack/store\";\r\nimport { ZodSchema } from \"zod\";\r\nimport merge from \"deepmerge\";\r\nimport { Store, storeValidator } from \"./models/store\";\r\n\r\nconst createStore = <T extends object>(\r\n  key: string,\r\n  validator: ZodSchema,\r\n  defaultValue: T\r\n) => {\r\n  const localData = localStorage.getItem(key);\r\n  let data = localData ? JSON.parse(localData) : defaultValue;\r\n  const parse = validator.safeParse(data);\r\n\r\n  if (!parse.success) {\r\n    console.log(\"zod error\", parse.error);\r\n    console.log(\"original\", data);\r\n\r\n    const next = merge(data, defaultValue);\r\n    console.log(\"merged\", next);\r\n    localStorage.setItem(`${key}-previous`, JSON.stringify(data));\r\n    localStorage.setItem(key, JSON.stringify(next));\r\n    data = next;\r\n  }\r\n\r\n  const store = new CreateStore<T>(data);\r\n  store.subscribe(() => {\r\n    const current = localStorage.getItem(key);\r\n    current && localStorage.setItem(`${key}-previous`, current);\r\n    localStorage.setItem(key, JSON.stringify(store.state));\r\n  });\r\n\r\n  return store;\r\n};\r\n\r\nexport const store = createStore<Store>(\"store\", storeValidator, {\r\n  projectedIncome: {\r\n    timeSeries: {\r\n      cgIncome: [],\r\n      retirementRate: [],\r\n      savingsRate: [],\r\n      meritBonusPct: [],\r\n      companyBonusPct: [],\r\n      meritBonus: [],\r\n      companyBonus: [],\r\n      mrpBonus: [],\r\n      equityPct: [],\r\n      meritIncreasePct: [],\r\n    },\r\n  },\r\n  wealth: {},\r\n});\r\n","export const formatCashShort = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"currency\",\r\n  currency: \"USD\",\r\n  notation: \"compact\",\r\n  maximumFractionDigits: 1,\r\n}).format;\r\n\r\nexport const formatCash = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"currency\",\r\n  currency: \"USD\",\r\n  maximumFractionDigits: 0,\r\n}).format;\r\n","import { DateTime } from \"luxon\";\r\nimport { Loan } from \"shared/models/loan\";\r\n\r\nexport const calcLoanBalance = (date: DateTime, loan: Loan) => {\r\n  const {\r\n    firstPaymentDate,\r\n    paymentsPerYear,\r\n    principal: pricipal,\r\n    ratePct: rate,\r\n    payment: monthlyPayment,\r\n  } = loan;\r\n  const anualizedRate = rate / paymentsPerYear;\r\n  const periods = date.diff(\r\n    DateTime.fromISO(firstPaymentDate),\r\n    \"months\"\r\n  ).months;\r\n  const totalRate = (1 + anualizedRate) ** periods;\r\n  const balance =\r\n    pricipal * totalRate - (monthlyPayment / anualizedRate) * (totalRate - 1);\r\n\r\n  return balance;\r\n};\r\n\r\nexport const calcEquity = (\r\n  ownershipPct: number,\r\n  houseValue: number | undefined,\r\n  loanBalance: number,\r\n  principal: number\r\n) => {\r\n  return houseValue\r\n    ? houseValue * ownershipPct - loanBalance\r\n    : principal - loanBalance;\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { Mortgage } from \"shared/models/mortgage\";\r\nimport { Account } from \"shared/models/account\";\r\nimport { calcEquity, calcLoanBalance } from \"./mortgage-calc\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\n\r\nexport const findNearstOnOrBefore = (date: DateTime, data: AccountData[]) => {\r\n  return data.find((x, idx, array) => {\r\n    if (idx == 0 && DateTime.fromISO(x.date).startOf(\"day\") > date) {\r\n      return true;\r\n    }\r\n    if (idx < array.length - 1) {\r\n      if (\r\n        DateTime.fromISO(x.date).startOf(\"day\") <= date &&\r\n        DateTime.fromISO(data[idx + 1].date).startOf(\"day\") > date\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n    if (idx === array.length - 1) {\r\n      return true;\r\n    }\r\n  });\r\n};\r\n\r\nexport const findSameYear = (date: DateTime, data: AccountData[]) => {\r\n  return data.find((x) => {\r\n    return DateTime.fromISO(x.date).year === date.year;\r\n  });\r\n};\r\n\r\nconst getMortgateValue = (date: DateTime, mortgage: Mortgage) => {\r\n  if (!mortgage.loan) {\r\n    return 0;\r\n  }\r\n  const entry = findNearstOnOrBefore(date, mortgage.data);\r\n  if (\r\n    entry?.date &&\r\n    mortgage.data[0] === entry &&\r\n    DateTime.fromISO(entry.date) > date\r\n  ) {\r\n    return 0;\r\n  }\r\n  const { ownershipPct, principal } = mortgage.loan;\r\n  const balance = calcLoanBalance(date, mortgage.loan);\r\n  return calcEquity(ownershipPct, entry?.value, balance, principal);\r\n};\r\n\r\nconst getAccountValue = (date: DateTime, account: Account) => {\r\n  const entry = findNearstOnOrBefore(date, account.data);\r\n  if (\r\n    entry?.date &&\r\n    account.data[0] === entry &&\r\n    DateTime.fromISO(entry.date) > date\r\n  ) {\r\n    return 0;\r\n  }\r\n  return entry?.value ?? 0;\r\n};\r\n\r\nexport const getGraphValue = (date: DateTime, account: Account | Mortgage) => {\r\n  switch (account.type) {\r\n    case \"account\":\r\n      return getAccountValue(date, account);\r\n    case \"mortgage\":\r\n      return getMortgateValue(date, account);\r\n  }\r\n};\r\n\r\nexport const getGraphDates = (accounts: (Account | Mortgage)[]) => {\r\n  return [\r\n    ...new Set(\r\n      accounts.flatMap((x) => {\r\n        return x.data.map((x) =>\r\n          DateTime.fromISO(x.date).startOf(\"day\").toISO()\r\n        );\r\n      })\r\n    ),\r\n  ]\r\n    .map((x) => DateTime.fromISO(x!))\r\n    .sort((a, b) => a.toMillis() - b.toMillis()) as DateTime<true>[];\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { getGraphDates, getGraphValue } from \"shared/utility/graph-helpers\";\r\n\r\nexport const useGraphData = () => {\r\n  const wealth = useStore(store, (x) => x.wealth);\r\n  return useMemo(() => {\r\n    const dates = getGraphDates(Object.values(wealth));\r\n    const accounts = Object.entries(wealth);\r\n    const graphData = dates.map((date) => {\r\n      return accounts.reduce(\r\n        (acc, [accountName, account]) => {\r\n          const value = getGraphValue(date, account);\r\n          acc[accountName] = value;\r\n          acc[\"total\"] = (acc[\"total\"] as number) + value;\r\n          acc[\"date\"] = date.toJSDate();\r\n          return acc;\r\n        },\r\n        { total: 0 } as Record<string, number | Date>\r\n      );\r\n    });\r\n    const firstNonZero = graphData.findIndex((x) => (x[\"total\"] as number) > 0);\r\n    return graphData.slice(firstNonZero);\r\n  }, [wealth]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport {\r\n  AgAreaSeriesOptions,\r\n  AgCartesianChartOptions,\r\n  AgLineSeriesOptions,\r\n} from \"ag-charts-community\";\r\nimport { AgChartsReact } from \"ag-charts-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { formatCashShort } from \"shared/utility/format-cash\";\r\nimport { useGraphData } from \"./use-graph-data\";\r\n\r\nexport const WealthChart = () => {\r\n  const wealth = useStore(store, (x) => x.wealth);\r\n  const data = useGraphData();\r\n\r\n  const series = useMemo(() => {\r\n    return [\r\n      ...Object.keys(wealth).map((x) => {\r\n        return {\r\n          stacked: true,\r\n          type: \"area\",\r\n          xKey: \"date\",\r\n          yKey: x,\r\n          yName: x,\r\n          tooltip: {\r\n            renderer: ({ datum, yKey, xKey }) => ({\r\n              content: `${DateTime.fromJSDate(\r\n                datum[xKey]\r\n              ).toISODate()} ${formatCashShort(datum[yKey])}`,\r\n            }),\r\n          },\r\n        } as AgAreaSeriesOptions;\r\n      }),\r\n      {\r\n        type: \"line\",\r\n        xKey: \"date\",\r\n        yKey: \"total\",\r\n        yName: \"Total\",\r\n        tooltip: {\r\n          renderer: ({ datum, yKey, xKey }) => ({\r\n            content: `${DateTime.fromJSDate(\r\n              datum[xKey]\r\n            ).toISODate()} ${formatCashShort(datum[yKey])}`,\r\n          }),\r\n        },\r\n      } as AgLineSeriesOptions,\r\n    ];\r\n  }, [wealth]);\r\n\r\n  const options: AgCartesianChartOptions = useMemo(\r\n    () => ({\r\n      theme: \"ag-default-dark\",\r\n      title: {\r\n        text: `Total Wealth ${formatCashShort(\r\n          (data[data.length - 1]?.total ?? 0) as number\r\n        )}`,\r\n      },\r\n      data,\r\n      axes: [\r\n        {\r\n          type: \"time\",\r\n          position: \"bottom\",\r\n          label: {\r\n            format: \"%Y\",\r\n          },\r\n        },\r\n        {\r\n          type: \"number\",\r\n          position: \"left\",\r\n        },\r\n      ],\r\n      series,\r\n    }),\r\n    [data, series]\r\n  );\r\n  return <AgChartsReact options={options} />;\r\n};\r\n","import {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  MenuItem,\r\n  Stack,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { create } from \"mutative\";\r\nimport { ReactNode, forwardRef, useRef, useState } from \"react\";\r\nimport { AssetType } from \"shared/models/asset-types\";\r\nimport { store } from \"shared/store\";\r\n\r\nexport const NewAccount = forwardRef<\r\n  HTMLButtonElement,\r\n  { children?: ReactNode }\r\n>((props, ref) => {\r\n  const [open, setOpen] = useState(false);\r\n  const nameRef = useRef<HTMLInputElement>(null);\r\n  const [error, setError] = useState(false);\r\n  const [accountType, setAccountType] = useState<AssetType>();\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        ref={ref}\r\n        onClick={() => {\r\n          setOpen(true);\r\n          setError(false);\r\n          setAccountType(undefined);\r\n        }}\r\n      >\r\n        add account\r\n      </Button>\r\n      <Dialog open={open} onClose={() => setOpen(false)}>\r\n        <DialogTitle>Add New Account</DialogTitle>\r\n        <DialogContent>\r\n          <Stack spacing={2} margin={2}>\r\n            <TextField\r\n              select\r\n              color={error ? \"error\" : \"primary\"}\r\n              onChange={(value) => {\r\n                setError(false);\r\n                setAccountType(value.target.value as AssetType);\r\n              }}\r\n              label=\"Type\"\r\n            >\r\n              <MenuItem value=\"mortgage\">Mortgage</MenuItem>\r\n              <MenuItem value=\"account\">Generic Account</MenuItem>\r\n            </TextField>\r\n\r\n            <TextField\r\n              placeholder=\"Name\"\r\n              onChange={() => {\r\n                setError(false);\r\n              }}\r\n              error={error}\r\n              inputRef={nameRef}\r\n            />\r\n          </Stack>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            disabled={error}\r\n            onClick={() => {\r\n              store.setState((prev) => {\r\n                return create(prev, (next) => {\r\n                  if (\r\n                    !nameRef.current?.value ||\r\n                    !accountType ||\r\n                    prev.wealth[nameRef.current.value]\r\n                  ) {\r\n                    setError(true);\r\n                    return;\r\n                  }\r\n\r\n                  next.wealth[nameRef.current.value] = {\r\n                    type: accountType,\r\n                    data: [],\r\n                  };\r\n\r\n                  setOpen(false);\r\n                });\r\n              });\r\n            }}\r\n          >\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      {props?.children}\r\n    </>\r\n  );\r\n});\r\n","import { AgGridReact, AgGridReactProps } from \"ag-grid-react\";\r\n\r\nexport const AgGrid = (props: AgGridReactProps & { id: string }) => {\r\n  const { id, ...rest } = props;\r\n  return (\r\n    <div id={id} className=\"ag-theme-quartz-dark\" style={{ height: \"100%\" }}>\r\n      <AgGridReact {...rest} />\r\n    </div>\r\n  );\r\n};\r\n","export const shortDate = \"yyyy-MM-dd\";\r\n","import { DateTime } from \"luxon\";\r\n\r\nexport const sortByDate =\r\n  <T>(select: (data: T) => DateTime, direction: \"asc\" | \"desc\") =>\r\n  (a: T, b: T) =>\r\n    direction === \"asc\"\r\n      ? select(a).toMillis() - select(b).toMillis()\r\n      : select(b).toMillis() - select(a).toMillis();\r\n","import { Button, Paper } from \"@mui/material\";\r\nimport { create } from \"mutative\";\r\nimport { store } from \"shared/store\";\r\n\r\nexport const DeleteAccount = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n\r\n  const onDeleteAccount = () => {\r\n    store.setState((prev) => {\r\n      return create(prev, (next) => {\r\n        delete next.wealth[accountName];\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ padding: 2, width: \"100%\" }}>\r\n      <Button onClick={onDeleteAccount} color=\"error\">\r\n        Delete Account\r\n      </Button>\r\n    </Paper>\r\n  );\r\n};\r\n","import { Button, Paper, TextField, Stack } from \"@mui/material\";\r\nimport { create } from \"mutative\";\r\nimport { useState } from \"react\";\r\nimport { store } from \"shared/store\";\r\n\r\nexport const RenameAccount = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n\r\n  const [nextAccountName, setNextAccountName] = useState<string>(accountName);\r\n\r\n  const onUpdateName = () => {\r\n    store.setState((prev) => {\r\n      return create(prev, (next) => {\r\n        next.wealth[nextAccountName] = next.wealth[accountName];\r\n        delete next.wealth[accountName];\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ padding: 2 }}>\r\n      <Stack spacing={1}>\r\n        <TextField\r\n          label=\"Account Name\"\r\n          value={nextAccountName}\r\n          onChange={(event) => setNextAccountName(event.target.value)}\r\n          placeholder=\"\"\r\n        />\r\n        <Button disabled={!nextAccountName} onClick={onUpdateName}>\r\n          Update Name\r\n        </Button>\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\nimport { Button } from \"@mui/material\";\r\nimport { ColDef } from \"ag-grid-community\";\r\nimport { CustomCellRendererProps } from \"ag-grid-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\nimport { store } from \"shared/store\";\r\nimport { formatCashShort } from \"shared/utility/format-cash\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\nexport const createAccountColumnConfig = (\r\n  accountName: string\r\n): ColDef<AccountData>[] => [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\r\n  },\r\n  {\r\n    headerName: \"Value\",\r\n    valueGetter: (x) => x.data?.value,\r\n    valueFormatter: (x) => formatCashShort(x.value),\r\n    type: \"numericColumn\",\r\n  },\r\n  {\r\n    headerName: \"Actions\",\r\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\r\n      return (\r\n        <Button\r\n          onClick={() => {\r\n            store.setState((prev) => {\r\n              return create(prev, (next) => {\r\n                const idxToRemove = next.wealth[accountName].data.findIndex(\r\n                  (x) => x.id === props.data?.id\r\n                );\r\n                next.wealth[accountName].data.splice(idxToRemove, 1);\r\n                return next;\r\n              });\r\n            });\r\n          }}\r\n          color=\"error\"\r\n        >\r\n          <DeleteForeverIcon />\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n];\r\n","import { Button, InputAdornment, Paper, Stack, TextField } from \"@mui/material\";\r\nimport Grid from \"@mui/system/Unstable_Grid\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { useMemo, useState } from \"react\";\r\nimport { AgGrid } from \"shared/components/ag-grid\";\r\nimport { Account } from \"shared/models/account\";\r\nimport { store } from \"shared/store\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport { sortByDate } from \"shared/utility/sort-by-date\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { DeleteAccount } from \"../components/delete-account\";\r\nimport { RenameAccount } from \"../components/update-account\";\r\nimport { createAccountColumnConfig } from \"./column-config\";\r\n\r\nexport const AccountTab = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n  const account = useStore(\r\n    store,\r\n    (state) => state.wealth[accountName]\r\n  ) as Account;\r\n  const [date, setDate] = useState(DateTime.local());\r\n  const [amount, setamount] = useState(0);\r\n\r\n  const hasSameDate = useMemo(() => {\r\n    return !!account?.data?.find((x) =>\r\n      date.hasSame(DateTime.fromISO(x.date), \"day\")\r\n    );\r\n  }, [account?.data, date]);\r\n\r\n  const onAddEntry = () => {\r\n    store.setState((prev) => {\r\n      return create(prev, (next) => {\r\n        (next.wealth[accountName] as Account).data.push({\r\n          date: date.toString(),\r\n          value: amount,\r\n          id: uuid(),\r\n        });\r\n        next.wealth[accountName].data.sort(\r\n          sortByDate((x) => DateTime.fromISO(x.date), \"asc\")\r\n        );\r\n      });\r\n    });\r\n  };\r\n\r\n  const accountColumnConfig = useMemo(() => {\r\n    return createAccountColumnConfig(accountName);\r\n  }, [accountName]);\r\n\r\n  return (\r\n    <Grid container height=\"100%\" width={\"100%\"} padding={1} spacing={2}>\r\n      <Grid xs={3}>\r\n        <AgGrid\r\n          reactiveCustomComponents\r\n          rowData={account?.data ?? []}\r\n          columnDefs={accountColumnConfig}\r\n          id={account + \"-history\"}\r\n        />\r\n      </Grid>\r\n      <Grid xs={9}>\r\n        <div>\r\n          <Grid container spacing={2}>\r\n            <Grid xs={2}>\r\n              <Paper elevation={3} sx={{ padding: 2 }}>\r\n                <Stack spacing={1}>\r\n                  <DatePicker\r\n                    format={shortDate}\r\n                    sx={{ color: \"white\" }}\r\n                    label=\"Date\"\r\n                    defaultValue={date}\r\n                    onChange={(value) => value && setDate(value)}\r\n                  />\r\n                  <TextField\r\n                    label=\"amount\"\r\n                    value={amount}\r\n                    type=\"number\"\r\n                    onChange={(event) => setamount(+event.target.value)}\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">$</InputAdornment>\r\n                      ),\r\n                    }}\r\n                    placeholder=\"\"\r\n                  />\r\n                  <Button\r\n                    disabled={!amount || !date || hasSameDate}\r\n                    onClick={onAddEntry}\r\n                  >\r\n                    Add Entry\r\n                  </Button>\r\n                </Stack>\r\n              </Paper>\r\n            </Grid>\r\n            <Grid xs={8}></Grid>\r\n            <Grid xs={2}>\r\n              <Stack spacing={2}>\r\n                <DeleteAccount accountName={accountName} />\r\n                <RenameAccount accountName={accountName} />\r\n              </Stack>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\nimport { Button } from \"@mui/material\";\r\nimport { ColDef } from \"ag-grid-community\";\r\nimport { CustomCellRendererProps } from \"ag-grid-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\nimport { store } from \"shared/store\";\r\nimport { formatCashShort } from \"shared/utility/format-cash\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\nexport const createAccountColumnConfig = (\r\n  accountName: string\r\n): ColDef<AccountData>[] => [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\r\n  },\r\n  {\r\n    headerName: \"Home Value\",\r\n    valueGetter: (x) => x.data?.value,\r\n    valueFormatter: (x) => formatCashShort(x.value),\r\n    type: \"numericColumn\",\r\n  },\r\n  {\r\n    headerName: \"Actions\",\r\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\r\n      return (\r\n        <Button\r\n          onClick={() => {\r\n            store.setState((prev) => {\r\n              return create(prev, (next) => {\r\n                const account = next.wealth[accountName];\r\n                const idxToRemove = account.data.findIndex(\r\n                  (x) => x.id === props.data?.id\r\n                );\r\n                account.data.splice(idxToRemove, 1);\r\n                return next;\r\n              });\r\n            });\r\n          }}\r\n          color=\"error\"\r\n        >\r\n          <DeleteForeverIcon />\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n];\r\n\r\nexport const mortgageColumnConfig: ColDef<{\r\n  date: DateTime;\r\n  balance: number;\r\n}>[] = [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data?.date,\r\n  },\r\n  {\r\n    headerName: \"Loan Balance\",\r\n    valueGetter: (x) => x.data?.balance.toFixed(2),\r\n    valueFormatter: (x) => formatCashShort(x.value),\r\n    type: \"numericColumn\",\r\n  },\r\n];\r\n","export function groupBy<T, T2 extends string | number | symbol>(\r\n  array: T[],\r\n  selector: (x: T) => T2\r\n): Record<T2, T[]> {\r\n  return array.reduce((acc: Record<T2, T[]>, curr: T) => {\r\n    const key = selector(curr);\r\n    acc[key] ??= [];\r\n    acc[key].push(curr);\r\n    return acc;\r\n  }, {} as Record<T2, T[]>);\r\n}\r\n","import { ZodIssue, z } from \"zod\";\r\nimport { Button, Paper, Stack, TextField } from \"@mui/material\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useRef, useState } from \"react\";\r\nimport { create } from \"mutative\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { Loan } from \"shared/models/loan\";\r\nimport { Mortgage } from \"shared/models/mortgage\";\r\nimport { store } from \"shared/store\";\r\nimport { groupBy } from \"shared/utility/group-by\";\r\n\r\nconst convertPct = (value: number) => {\r\n  return value > 1 ? value / 100 : value;\r\n};\r\n\r\nconst validator: z.ZodType<Loan> = z.object({\r\n  principal: z.number().min(0),\r\n  ratePct: z.number().min(0),\r\n  paymentsPerYear: z.number().min(0),\r\n  payment: z.number().min(0),\r\n  firstPaymentDate: z.string().datetime({ offset: true }),\r\n  ownershipPct: z.number().min(0),\r\n});\r\n\r\nexport const AddLoan = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n\r\n  const loan = useStore(store, (x) => {\r\n    const account = x.wealth[accountName];\r\n    if (\"loan\" in account) {\r\n      return account.loan;\r\n    }\r\n  });\r\n\r\n  const ref = useRef<Partial<Loan>>(loan ?? {});\r\n  const [error, setError] = useState<Partial<Record<keyof Loan, ZodIssue>>>({});\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ padding: 2 }}>\r\n      <Stack spacing={1}>\r\n        <DatePicker\r\n          defaultValue={\r\n            ref.current?.firstPaymentDate\r\n              ? DateTime.fromISO(ref.current.firstPaymentDate)\r\n              : null\r\n          }\r\n          label=\"First Payment\"\r\n          slotProps={{\r\n            textField: {\r\n              error: !!error.firstPaymentDate,\r\n            },\r\n          }}\r\n          onChange={(value: DateTime | null) => {\r\n            if (value) {\r\n              ref.current.firstPaymentDate = value.toISO()!;\r\n            }\r\n          }}\r\n        />\r\n        <TextField\r\n          error={!!error.principal}\r\n          defaultValue={loan?.principal}\r\n          onChange={(event) => {\r\n            ref.current.principal = +event.target.value;\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Principal\"\r\n          type=\"number\"\r\n        />\r\n        <TextField\r\n          error={!!error.ratePct}\r\n          defaultValue={loan?.ratePct}\r\n          onChange={(event) => {\r\n            ref.current.ratePct = convertPct(+event.target.value);\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Rate\"\r\n          type=\"number\"\r\n        />\r\n        <TextField\r\n          error={!!error.paymentsPerYear}\r\n          defaultValue={loan?.paymentsPerYear}\r\n          onChange={(event) => {\r\n            ref.current.paymentsPerYear = +event.target.value;\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Payments Per Year\"\r\n          type=\"number\"\r\n        />\r\n        <TextField\r\n          defaultValue={loan?.payment}\r\n          error={!!error.payment}\r\n          onChange={(event) => {\r\n            ref.current.payment = +event.target.value;\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Payment\"\r\n          type=\"number\"\r\n        />\r\n        <TextField\r\n          defaultValue={loan?.ownershipPct}\r\n          error={!!error.ownershipPct}\r\n          onChange={(event) => {\r\n            ref.current.ownershipPct = convertPct(+event.target.value);\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Ownership (%)\"\r\n          type=\"number\"\r\n        />\r\n        <Button\r\n          onClick={() => {\r\n            const parsed = validator.safeParse(ref.current);\r\n            if (parsed.success) {\r\n              setError({});\r\n              store.setState((prev) => {\r\n                return create(prev, (next) => {\r\n                  (next.wealth[accountName] as Mortgage).loan = parsed.data;\r\n                });\r\n              });\r\n            } else {\r\n              const issues = groupBy(parsed.error.issues, (x) =>\r\n                x.path.join(\"\")\r\n              );\r\n              setError(issues);\r\n            }\r\n          }}\r\n        >\r\n          Set Loan\r\n        </Button>\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n","import { Button, Paper, TextField } from \"@mui/material\";\r\nimport { Stack } from \"@mui/system\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useRef } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { create } from \"mutative\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nexport const AddEntry = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n  const ref = useRef<{ date?: DateTime; value?: number }>({\r\n    date: DateTime.local(),\r\n    value: 0,\r\n  });\r\n  const onAddEntry = () => {\r\n    const { date, value } = ref.current;\r\n    if (!date || !value) {\r\n      return;\r\n    }\r\n    store.setState((prev) => {\r\n      return create(prev, (next) => {\r\n        next.wealth[accountName].data.push({\r\n          date: date.toISO()!,\r\n          value,\r\n          id: uuid(),\r\n        });\r\n      });\r\n    });\r\n  };\r\n  return (\r\n    <Paper elevation={3} sx={{ padding: 2 }}>\r\n      <Stack spacing={1}>\r\n        <DatePicker\r\n          defaultValue={DateTime.local()}\r\n          onChange={(date: DateTime | null) => {\r\n            if (date) {\r\n              ref.current.date = date;\r\n            }\r\n          }}\r\n        />\r\n        <TextField\r\n          label=\"Home value\"\r\n          type=\"numeric\"\r\n          onChange={(event) => {\r\n            ref.current.value = +event.target.value;\r\n          }}\r\n        />\r\n        <Button onClick={onAddEntry}>Add Home Value</Button>\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n","import Grid from \"@mui/system/Unstable_Grid\";\r\nimport { store } from \"shared/store\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { useMemo } from \"react\";\r\nimport {\r\n  createAccountColumnConfig,\r\n  mortgageColumnConfig,\r\n} from \"./column-config\";\r\nimport { AddLoan } from \"./add-loan\";\r\nimport { AddEntry } from \"./add-entry\";\r\nimport { AgGrid } from \"shared/components/ag-grid\";\r\nimport { Mortgage } from \"shared/models/mortgage\";\r\nimport { getGraphDates } from \"shared/utility/graph-helpers\";\r\nimport { calcLoanBalance } from \"shared/utility/mortgage-calc\";\r\nimport { DeleteAccount } from \"../components/delete-account\";\r\nimport { RenameAccount } from \"../components/update-account\";\r\nimport { Stack } from \"@mui/system\";\r\n\r\nexport const MortgageTab = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n\r\n  const account = useStore(\r\n    store,\r\n    (state) => state.wealth[accountName]\r\n  ) as Mortgage;\r\n\r\n  const allAccounts = useStore(store, (x) => x.wealth);\r\n\r\n  const accountColumnConfig = useMemo(() => {\r\n    return createAccountColumnConfig(accountName);\r\n  }, [accountName]);\r\n\r\n  const mortgageData = useMemo(() => {\r\n    if (!account?.loan) {\r\n      return [];\r\n    }\r\n    return getGraphDates(Object.values(allAccounts)).map((date) => ({\r\n      date,\r\n      balance: calcLoanBalance(date, account.loan!),\r\n    }));\r\n  }, [account.loan, allAccounts]);\r\n\r\n  return (\r\n    <Grid container height=\"100%\" width={\"100%\"} padding={1} spacing={2}>\r\n      <Grid xs={3}>\r\n        <AgGrid\r\n          reactiveCustomComponents\r\n          rowData={account?.data ?? []}\r\n          columnDefs={accountColumnConfig}\r\n          id={account + \"-history\"}\r\n        />\r\n      </Grid>\r\n      <Grid xs={3}>\r\n        <AgGrid\r\n          rowData={mortgageData}\r\n          columnDefs={mortgageColumnConfig}\r\n          id={account + \"-history\"}\r\n        />\r\n      </Grid>\r\n      <Grid xs={6}>\r\n        <div>\r\n          <Grid container spacing={2}>\r\n            <Grid xs={3}>\r\n              <AddLoan accountName={accountName} />\r\n            </Grid>\r\n            <Grid xs={3}>\r\n              <AddEntry accountName={accountName} />\r\n            </Grid>\r\n            <Grid xs={3}></Grid>\r\n            <Grid xs={3}>\r\n              <Stack spacing={2}>\r\n                <DeleteAccount accountName={accountName} />\r\n                <RenameAccount accountName={accountName} />\r\n              </Stack>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import { Box, Tab, Tabs } from \"@mui/material\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { NewAccount } from \"../new-account\";\r\nimport { AccountTab } from \"../tab-types/account/account\";\r\nimport { MortgageTab } from \"../tab-types/mortgage\";\r\n\r\nexport const AccountTabs = () => {\r\n  const accounts = useStore(store, (x) => x.wealth);\r\n  const firstAccount = Object.keys(accounts)?.[0] ?? \"\";\r\n  const [account, setAccount] = useState<string>(firstAccount);\r\n\r\n  useEffect(() => {\r\n    if (!accounts[account]) {\r\n      setAccount(Object.keys(accounts)?.[0] ?? \"\");\r\n    }\r\n  }, [account, accounts]);\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection={\"column\"} width=\"100%\" height=\"100%\">\r\n      <Box display={\"flex\"} flex={\"0 1 auto\"}>\r\n        <Tabs\r\n          value={account}\r\n          defaultValue={firstAccount}\r\n          onChange={(_, value) => {\r\n            setAccount(value as string);\r\n          }}\r\n        >\r\n          {Object.keys(accounts).map((account) => {\r\n            return <Tab key={account} value={account} label={account} />;\r\n          })}\r\n          <Tab component={NewAccount} />\r\n        </Tabs>\r\n      </Box>\r\n      <Box flex={\"1 1 auto\"}>\r\n        {accounts[account]?.type === \"account\" && (\r\n          <AccountTab accountName={account} />\r\n        )}\r\n        {accounts[account]?.type === \"mortgage\" && (\r\n          <MortgageTab accountName={account} />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import Grid from \"@mui/system/Unstable_Grid\";\r\nimport { WealthChart } from \"./components/wealth-chart\";\r\nimport { AccountTabs } from \"./components/account-tabs\";\r\n\r\nexport const NetWealth = () => {\r\n  return (\r\n    <Grid container height={\"100%\"} width=\"100%\">\r\n      <Grid xs={12} height=\"50%\">\r\n        <WealthChart />\r\n      </Grid>\r\n      <Grid xs={12} height=\"50%\">\r\n        <AccountTabs />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\nimport { store } from \"shared/store\";\r\nimport {\r\n  findNearstOnOrBefore,\r\n  findSameYear,\r\n} from \"shared/utility/graph-helpers\";\r\nimport { sortByDate } from \"shared/utility/sort-by-date\";\r\n\r\nconst valueByDateRange = (account: AccountData[]) => {\r\n  return account\r\n    .toSorted(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"))\r\n    .map((x, index, array) => {\r\n      const next = array[index + 1];\r\n      return [\r\n        DateTime.fromISO(x.date),\r\n        (next?.date\r\n          ? DateTime.fromISO(next?.date).startOf(\"day\")\r\n          : DateTime.fromISO(x.date).startOf(\"day\").plus({ years: 1 })\r\n        ).minus({ days: 1 }),\r\n        x.value,\r\n      ] as const;\r\n    });\r\n};\r\n\r\nexport const useCgBaseIncome = (startDate: DateTime, endDate: DateTime) => {\r\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\r\n  const cgIncome = timeSeries.cgIncome;\r\n\r\n  const lastMerit = useMemo(() => {\r\n    const endOfYear = DateTime.fromObject({ day: 31, month: 12 });\r\n    return (\r\n      1 +\r\n      (findNearstOnOrBefore(endOfYear, timeSeries.meritIncreasePct)?.value ?? 0)\r\n    );\r\n  }, [timeSeries.meritIncreasePct]);\r\n\r\n  return useMemo(() => {\r\n    const payPerPeriod = valueByDateRange(cgIncome);\r\n    const mostRecentPay =\r\n      payPerPeriod.length > 0\r\n        ? payPerPeriod[payPerPeriod.length - 1]\r\n        : ([startDate, endDate, 1] as const);\r\n    const projectedPayPerPeriod = Array(10)\r\n      .fill(mostRecentPay)\r\n      .map(([start, end, value]: [DateTime, DateTime, number], index) => {\r\n        const startDate = start.plus({ years: index + 1 });\r\n        return [\r\n          startDate,\r\n          end.plus({ years: index + 1 }),\r\n          value *\r\n            (lastMerit +\r\n              (findSameYear(startDate, timeSeries.equityPct)?.value ?? 0)) **\r\n              (index + 1),\r\n        ] as const;\r\n      });\r\n\r\n    const combinedPayPerPeriod = [\r\n      ...payPerPeriod,\r\n      ...projectedPayPerPeriod,\r\n    ].filter(([start, end]) => {\r\n      const rangeOutside = startDate <= start && endDate >= end;\r\n      const rangeInside = startDate >= start && end >= endDate;\r\n      const overlapEnd = startDate <= start && endDate < end && endDate > start;\r\n      const overlapStart =\r\n        startDate <= end && startDate >= start && endDate > end;\r\n      return rangeInside || rangeOutside || overlapEnd || overlapStart;\r\n    });\r\n\r\n    const x = combinedPayPerPeriod.map(([start, end, value]) => {\r\n      return [\r\n        DateTime.max(start, startDate),\r\n        DateTime.min(end, endDate),\r\n        value,\r\n      ] as const;\r\n    });\r\n\r\n    const incomePerPeriod = x.map(([start, end, value]) => {\r\n      return (end.diff(start, \"weeks\").weeks / 2) * value;\r\n    });\r\n\r\n    const income = Math.round(\r\n      incomePerPeriod.reduce((acc, curr) => acc + curr, 0)\r\n    );\r\n\r\n    return income;\r\n  }, [cgIncome, startDate, endDate, lastMerit, timeSeries.equityPct]);\r\n};\r\n","export interface Outcome {\r\n  min: number;\r\n  max: number;\r\n  avg: number;\r\n  actual?: number;\r\n}\r\n\r\nexport interface BonusOutcomes {\r\n  percent: Outcome;\r\n  cash: Outcome;\r\n}\r\n\r\nexport const minMaxAvg = (values: number[]): Outcome => {\r\n  if (values.length === 0) {\r\n    return { min: 0, max: 0, avg: 0 };\r\n  }\r\n  return values.reduce(\r\n    (acc, curr, index, arr) => {\r\n      const { min, max, avg } = acc;\r\n      return {\r\n        min: Math.min(curr, min),\r\n        max: Math.max(curr, max),\r\n        avg: index === arr.length - 1 ? (avg + curr) / arr.length : avg + curr,\r\n      };\r\n    },\r\n    { min: Infinity, max: 0, avg: 0 }\r\n  );\r\n};\r\n\r\nexport const outcomeFromSingle = (value: number): Outcome => {\r\n  return { min: value, max: value, avg: value, actual: value };\r\n};\r\n\r\nexport const scaleOutcome = (outcome: Outcome, value: number): Outcome => {\r\n  return {\r\n    min: outcome.min * value,\r\n    max: outcome.max * value,\r\n    avg: outcome.avg * value,\r\n    actual: outcome.actual ? outcome.actual * value : undefined,\r\n  };\r\n};\r\nexport const AddConstantOutcome = (\r\n  outcome: Outcome,\r\n  value: number\r\n): Outcome => {\r\n  return {\r\n    min: outcome.min + value,\r\n    max: outcome.max + value,\r\n    avg: outcome.avg + value,\r\n    actual: outcome.actual ? outcome.actual + value : undefined,\r\n  };\r\n};\r\n\r\nexport const MultiplyOutcome = (\r\n  outcomeA: Outcome,\r\n  outcomeB: Outcome\r\n): Outcome => {\r\n  return {\r\n    min: outcomeA.min * outcomeB.min,\r\n    max: outcomeA.max * outcomeB.max,\r\n    avg: outcomeA.avg * outcomeB.avg,\r\n    actual:\r\n      outcomeA.actual != undefined && outcomeB.actual != undefined\r\n        ? outcomeA.actual * outcomeB.avg\r\n        : undefined,\r\n  };\r\n};\r\n\r\nexport const AddOutcome = (...outcomes: Outcome[]): Outcome => {\r\n  const everyActualDefined = outcomes.every((x) => x.actual != undefined);\r\n  return outcomes.reduce(\r\n    (acc, curr) => {\r\n      return {\r\n        min: acc.min + curr.min,\r\n        avg: acc.avg + curr.avg,\r\n        max: acc.max + curr.max,\r\n        actual: everyActualDefined\r\n          ? (acc.actual ?? 0) + (curr.actual ?? 0)\r\n          : undefined,\r\n      };\r\n    },\r\n    { min: 0, max: 0, avg: 0, actual: undefined }\r\n  );\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { useCgBaseIncome } from \"./use-cg-base-income\";\r\nimport { store } from \"shared/store\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport {\r\n  BonusOutcomes,\r\n  scaleOutcome,\r\n  minMaxAvg,\r\n} from \"shared/utility/min-max-avg\";\r\nimport { findSameYear } from \"shared/utility/graph-helpers\";\r\n\r\nexport const useCgAprilBonus = (year: number): BonusOutcomes => {\r\n  const payedOn = useMemo(\r\n    () => DateTime.fromObject({ day: 15, month: 4, year }),\r\n    [year]\r\n  );\r\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\r\n  const income = useCgBaseIncome(\r\n    DateTime.fromObject({ day: 1, month: 1, year: year - 1 }),\r\n    DateTime.fromObject({ day: 1, month: 1, year })\r\n  );\r\n\r\n  const bonusAmmount = useMemo(() => {\r\n    return findSameYear(payedOn, timeSeries.meritBonus)?.value;\r\n  }, [payedOn, timeSeries.meritBonus]);\r\n\r\n  const bonusPercent = useMemo(() => {\r\n    return findSameYear(payedOn, timeSeries.meritBonusPct)?.value;\r\n  }, [payedOn, timeSeries.meritBonusPct]);\r\n\r\n  return useMemo(() => {\r\n    const meritOutcome = minMaxAvg(\r\n      timeSeries.meritBonusPct\r\n        .filter((x) => DateTime.fromISO(x.date).year <= year)\r\n        .slice(-3)\r\n        .map((x) => x.value)\r\n    );\r\n\r\n    return {\r\n      percent: { ...meritOutcome, actual: bonusPercent },\r\n      cash: {\r\n        ...scaleOutcome(meritOutcome, income),\r\n        actual: bonusAmmount,\r\n      },\r\n    };\r\n  }, [bonusAmmount, bonusPercent, income, timeSeries.meritBonusPct, year]);\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { useCgBaseIncome } from \"./use-cg-base-income\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { store } from \"shared/store\";\r\nimport { findSameYear } from \"shared/utility/graph-helpers\";\r\nimport {\r\n  BonusOutcomes,\r\n  scaleOutcome,\r\n  minMaxAvg,\r\n} from \"shared/utility/min-max-avg\";\r\n\r\nexport const useCgJuneBonus = (year: number): BonusOutcomes => {\r\n  const payedOn = useMemo(\r\n    () => DateTime.fromObject({ day: 15, month: 6, year }),\r\n    [year]\r\n  );\r\n  const timeseries = useStore(store, (x) => x.projectedIncome.timeSeries);\r\n  const income = useCgBaseIncome(\r\n    DateTime.fromObject({ day: 1, month: 4, year: year - 1 }),\r\n    DateTime.fromObject({ day: 31, month: 3, year })\r\n  );\r\n\r\n  return useMemo(() => {\r\n    const mostRecentBonus = findSameYear(payedOn, timeseries.companyBonus);\r\n    const mostRecentPercent = findSameYear(payedOn, timeseries.companyBonusPct);\r\n\r\n    const meritFactor = timeseries.meritBonusPct\r\n      .filter((x) => DateTime.fromISO(x.date).year <= year)\r\n      .slice(-3)\r\n      .reduce((acc, curr) => acc + curr.value, 0);\r\n\r\n    const outcomes = minMaxAvg(timeseries.companyBonusPct.map((x) => x.value));\r\n\r\n    const cash = scaleOutcome(outcomes, meritFactor * income);\r\n\r\n    return {\r\n      percent: { ...outcomes, actual: mostRecentPercent?.value },\r\n      cash: { ...cash, actual: mostRecentBonus?.value },\r\n    };\r\n  }, [\r\n    income,\r\n    payedOn,\r\n    timeseries.companyBonus,\r\n    timeseries.companyBonusPct,\r\n    timeseries.meritBonusPct,\r\n    year,\r\n  ]);\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { useCgBaseIncome } from \"./use-cg-base-income\";\r\nimport { useCgAprilBonus } from \"./use-cg-april-bonus\";\r\nimport { useCgJuneBonus } from \"./use-cg-june-bonus\";\r\nimport {\r\n  AddOutcome,\r\n  Outcome,\r\n  outcomeFromSingle,\r\n  scaleOutcome,\r\n} from \"shared/utility/min-max-avg\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { store } from \"shared/store\";\r\nimport { findSameYear } from \"shared/utility/graph-helpers\";\r\n\r\nconst bonusPercent = 0.15;\r\nexport const useCgJulyBonus = (year: number): Outcome => {\r\n  const payDay = useMemo(\r\n    () => DateTime.fromObject({ day: 15, month: 7, year }),\r\n    [year]\r\n  );\r\n\r\n  const actual = useStore(\r\n    store,\r\n    (x) => findSameYear(payDay, x.projectedIncome.timeSeries.mrpBonus)?.value\r\n  );\r\n\r\n  const income = useCgBaseIncome(\r\n    DateTime.fromObject({ day: 1, month: 7, year: year - 1 }),\r\n    DateTime.fromObject({ day: 1, month: 7, year })\r\n  );\r\n\r\n  const meritBonus = useCgAprilBonus(year);\r\n  const juneBonus = useCgJuneBonus(year);\r\n\r\n  return useMemo(() => {\r\n    const eligbleIncome = outcomeFromSingle(income);\r\n    const outcome = scaleOutcome(\r\n      AddOutcome(eligbleIncome, meritBonus.cash, juneBonus.cash),\r\n      bonusPercent\r\n    );\r\n    return { ...outcome, actual: actual ?? outcome.actual };\r\n  }, [actual, income, juneBonus.cash, meritBonus.cash]);\r\n};\r\n","import { Box } from \"@mui/material\";\r\nimport { ReactNode } from \"react\";\r\n\r\ninterface CellProps {\r\n  children?: ReactNode;\r\n  secondaryValue?: ReactNode;\r\n  title: string;\r\n}\r\n\r\nexport const Value = (props: CellProps) => {\r\n  const { children, secondaryValue, title } = props;\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        minWidth: 106,\r\n\r\n        height: 64,\r\n        padding: \"0px 8px\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"flex-start\",\r\n        gap: 0.5,\r\n        flexShrink: 0,\r\n      }}\r\n    >\r\n      <Box display={\"flex\"} alignItems={\"center\"} gap={0.5}>\r\n        <Box fontSize={18} fontWeight={700} lineHeight={\"20px\"}>\r\n          {children ? children : \"??\"}\r\n        </Box>\r\n        {!!secondaryValue && (\r\n          <Box\r\n            alignSelf={\"flex-end\"}\r\n            fontSize={12}\r\n            fontWeight={500}\r\n            lineHeight={\"16px\"}\r\n            textTransform={\"uppercase\"}\r\n            color={\"#888\"}\r\n          >\r\n            {secondaryValue}\r\n          </Box>\r\n        )}\r\n      </Box>\r\n      <Box\r\n        fontSize={12}\r\n        fontWeight={500}\r\n        lineHeight={\"16px\"}\r\n        textTransform={\"uppercase\"}\r\n      >\r\n        {title}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { formatCashShort } from \"shared/utility/format-cash\";\r\n\r\ninterface CashProps {\r\n  value?: number;\r\n}\r\nexport const Cash = ({ value }: CashProps) => {\r\n  return value ? formatCashShort(value) : null;\r\n};\r\n","import { Box } from \"@mui/material\";\r\nimport { DateTime } from \"luxon\";\r\nimport { ReactNode, useMemo } from \"react\";\r\n\r\ninterface DurationProps {\r\n  dateTime: DateTime;\r\n  children?: ReactNode;\r\n}\r\nexport const Duration = ({ dateTime, children }: DurationProps) => {\r\n  const countDownStr = useMemo(\r\n    () => dateTime.diffNow([\"months\", \"days\", \"hours\"]).toFormat(\"d'd'\"),\r\n    [dateTime]\r\n  );\r\n\r\n  const countDownColor = useMemo(() => {\r\n    const days = dateTime.diffNow(\"days\").days;\r\n    if (days < 30) {\r\n      return \"green\";\r\n    } else if (days < 60) {\r\n      return \"yellow\";\r\n    }\r\n    return \"red\";\r\n  }, [dateTime]);\r\n\r\n  return dateTime > DateTime.local() ? (\r\n    <Box color={countDownColor}>{countDownStr}</Box>\r\n  ) : (\r\n    children\r\n  );\r\n};\r\n","export const formatPercent = new Intl.NumberFormat(\"en-us\", {\r\n  style: \"percent\",\r\n  maximumFractionDigits: 1,\r\n}).format;\r\n","import { formatPercent } from \"shared/utility/format-percent\";\r\n\r\ninterface PercentProps {\r\n  value: number;\r\n}\r\nexport const Percent = ({ value }: PercentProps) => {\r\n  return formatPercent(value);\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { ReactNode } from \"react\";\r\n\r\ninterface UntilProps {\r\n  dateTime: DateTime;\r\n  children: ReactNode;\r\n}\r\n\r\nexport const Until = (props: UntilProps) => {\r\n  const { dateTime, children } = props;\r\n  return DateTime.local() < dateTime && children;\r\n};\r\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\r\nimport { BonusOutcomes } from \"shared/utility/min-max-avg\";\r\nimport { Value } from \"./value\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { Duration } from \"shared/components/formatters/duration\";\r\nimport { Percent } from \"shared/components/formatters/percent\";\r\nimport { Until } from \"shared/components/formatters/until\";\r\n\r\nexport const BonusOutcome = (props: {\r\n  title: string;\r\n  outcome: BonusOutcomes;\r\n  payDate: DateTime;\r\n}) => {\r\n  const { outcome, title, payDate } = props;\r\n\r\n  return (\r\n    <Box sx={{ border: \"1px solid rgba(255,255,255,0.1)\", borderRadius: 2 }}>\r\n      <Typography\r\n        sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1 }}\r\n        variant=\"h5\"\r\n      >\r\n        {title}\r\n      </Typography>\r\n      <Divider />\r\n      <Stack padding={1} direction={\"row\"} spacing={0.5}>\r\n        <Value\r\n          secondaryValue={<Percent value={outcome.percent.min} />}\r\n          title={\"min\"}\r\n        >\r\n          <Cash value={outcome.cash.min} />\r\n        </Value>\r\n        <Value\r\n          secondaryValue={<Percent value={outcome.percent.avg} />}\r\n          title={\"avg\"}\r\n        >\r\n          <Cash value={outcome.cash.avg} />\r\n        </Value>\r\n        <Value\r\n          secondaryValue={<Percent value={outcome.percent.max} />}\r\n          title={\"max\"}\r\n        >\r\n          <Cash value={outcome.cash.max} />\r\n        </Value>\r\n        <Value\r\n          title={\"Actual\"}\r\n          secondaryValue={\r\n            <Until dateTime={payDate}>\r\n              <Cash value={outcome.cash.actual} />\r\n            </Until>\r\n          }\r\n        >\r\n          <Duration dateTime={payDate}>\r\n            <Cash value={outcome.cash.actual} />\r\n          </Duration>\r\n        </Value>\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\r\nimport { Outcome as TOutcome } from \"shared/utility/min-max-avg\";\r\nimport { Value } from \"./value\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { Duration } from \"shared/components/formatters/duration\";\r\nimport { Until } from \"shared/components/formatters/until\";\r\nimport { ReactNode } from \"react\";\r\n\r\nexport const Outcome = (props: {\r\n  title: ReactNode;\r\n  outcome: TOutcome;\r\n  payDate?: DateTime;\r\n}) => {\r\n  const { outcome, title, payDate } = props;\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        border: \"1px solid rgba(255,255,255,0.1)\",\r\n        borderRadius: 2,\r\n      }}\r\n    >\r\n      <Typography\r\n        sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1 }}\r\n        variant=\"h5\"\r\n      >\r\n        {title}\r\n      </Typography>\r\n      <Divider />\r\n\r\n      <Stack padding={1} direction={\"row\"} spacing={0.5}>\r\n        <Value title={\"min\"}>\r\n          <Cash value={outcome.min} />\r\n        </Value>\r\n        <Value title={\"avg\"}>\r\n          <Cash value={outcome.avg} />\r\n        </Value>\r\n        <Value title={\"max\"}>\r\n          <Cash value={outcome.max} />\r\n        </Value>\r\n        {payDate && (\r\n          <Value\r\n            title={\"Actual\"}\r\n            secondaryValue={\r\n              <Until dateTime={payDate}>\r\n                <Cash value={outcome.actual} />\r\n              </Until>\r\n            }\r\n          >\r\n            <Duration dateTime={payDate}>\r\n              <Cash value={outcome.actual} />\r\n            </Duration>\r\n          </Value>\r\n        )}\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\r\nimport { Value } from \"./value\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { store } from \"shared/store\";\r\nimport {\r\n  findNearstOnOrBefore,\r\n  findSameYear,\r\n} from \"shared/utility/graph-helpers\";\r\nimport { Percent } from \"shared/components/formatters/percent\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { Duration } from \"shared/components/formatters/duration\";\r\nimport { Until } from \"shared/components/formatters/until\";\r\n\r\nexport const MeritOutcome = (props: { title: string; payDate: DateTime }) => {\r\n  const { title, payDate } = props;\r\n\r\n  const income = useStore(store, (x) =>\r\n    findNearstOnOrBefore(payDate, x.projectedIncome.timeSeries.cgIncome)\r\n  );\r\n  const meritPct = useStore(\r\n    store,\r\n    (x) =>\r\n      payDate &&\r\n      findNearstOnOrBefore(\r\n        payDate,\r\n        x.projectedIncome.timeSeries.meritIncreasePct\r\n      )\r\n  );\r\n\r\n  const equityPct = useStore(\r\n    store,\r\n    (x) =>\r\n      payDate && findSameYear(payDate, x.projectedIncome.timeSeries.equityPct)\r\n  );\r\n\r\n  const totalAdjust = (meritPct?.value ?? 0) + (equityPct?.value ?? 0);\r\n  const multiplier = DateTime.local() < payDate ? 1 + totalAdjust : 1;\r\n  return (\r\n    <Box\r\n      sx={{\r\n        border: \"1px solid rgba(255,255,255,0.1)\",\r\n        borderRadius: 2,\r\n      }}\r\n    >\r\n      <Typography\r\n        sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1 }}\r\n        variant=\"h5\"\r\n      >\r\n        {title}\r\n      </Typography>\r\n      <Divider />\r\n\r\n      <Stack padding={1} direction={\"row\"} spacing={0.5}>\r\n        <Value\r\n          title={\"Monthly\"}\r\n          secondaryValue={<Percent value={totalAdjust} />}\r\n        >\r\n          <Cash value={(income?.value ?? 0) * multiplier} />\r\n        </Value>\r\n        <Value\r\n          title={\"Base Pay\"}\r\n          secondaryValue={<Percent value={totalAdjust} />}\r\n        >\r\n          <Cash value={(income?.value ?? 0) * multiplier * 26} />\r\n        </Value>\r\n        <Value\r\n          title={\"Actual\"}\r\n          secondaryValue={\r\n            <Until dateTime={payDate}>\r\n              <Percent value={totalAdjust} />\r\n            </Until>\r\n          }\r\n        >\r\n          <Duration dateTime={payDate}>\r\n            <Percent value={totalAdjust} />\r\n          </Duration>\r\n        </Value>\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\nimport { Button, Tooltip } from \"@mui/material\";\r\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\r\nimport { CustomCellRendererProps } from \"ag-grid-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\nimport { TimeSeries } from \"shared/models/projected-wealth\";\r\nimport { store } from \"shared/store\";\r\nimport { formatCash } from \"shared/utility/format-cash\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport UpdateIcon from \"@mui/icons-material/Update\";\r\nimport { Stack } from \"@mui/system\";\r\n\r\nexport const createAccountColumnConfig = (\r\n  accountName: TimeSeries,\r\n  variant: \"number\" | \"cash\" | \"percent\"\r\n): ColDef<AccountData>[] => [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\r\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\r\n      return (\r\n        <Stack direction={\"row\"} alignItems={\"center\"}>\r\n          {x.valueFormatted}&nbsp;\r\n          {x.value && x.value > DateTime.local() && (\r\n            <Tooltip title=\"Future Event\">\r\n              <UpdateIcon htmlColor=\"yellow\" />\r\n            </Tooltip>\r\n          )}\r\n        </Stack>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    headerName: \"Value\",\r\n    valueGetter: (x) => x.data?.value,\r\n    valueFormatter: (x) =>\r\n      variant === \"number\"\r\n        ? x.value\r\n        : variant === \"cash\"\r\n        ? formatCash(x.value)\r\n        : (x.value * 100).toFixed(2) + \"%\",\r\n    type: \"numericColumn\",\r\n    editable: true,\r\n    cellEditor: \"agNumberCellEditor\",\r\n    valueSetter: (x) => {\r\n      store.setState((prev) => {\r\n        const next = create(prev, (next) => {\r\n          const account = next.projectedIncome.timeSeries[accountName];\r\n          const idx = account.findIndex(({ id }) => id === x.data.id);\r\n          account[idx].value = +x.newValue;\r\n        });\r\n        return next;\r\n      });\r\n      return true;\r\n    },\r\n  },\r\n  {\r\n    headerName: \"Actions\",\r\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\r\n      return (\r\n        <Button\r\n          onClick={() => {\r\n            store.setState((prev) => {\r\n              return create(prev, (next) => {\r\n                const idxToRemove = next.projectedIncome.timeSeries[\r\n                  accountName\r\n                ].findIndex((x) => x.id === props.data?.id);\r\n                next.projectedIncome.timeSeries[accountName].splice(\r\n                  idxToRemove,\r\n                  1\r\n                );\r\n              });\r\n            });\r\n          }}\r\n          color=\"error\"\r\n        >\r\n          <DeleteForeverIcon />\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n];\r\n","import {\r\n  Box,\r\n  Button,\r\n  InputAdornment,\r\n  Paper,\r\n  Stack,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { useMemo, useState } from \"react\";\r\nimport { AgGrid } from \"shared/components/ag-grid\";\r\nimport { TimeSeries } from \"shared/models/projected-wealth\";\r\nimport { store } from \"shared/store\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport { sortByDate } from \"shared/utility/sort-by-date\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { createAccountColumnConfig } from \"./column-config\";\r\n\r\nexport const DataEntry = (props: {\r\n  accountName: TimeSeries;\r\n  defaultDate: DateTime;\r\n  variant?: \"number\" | \"cash\" | \"percent\";\r\n}) => {\r\n  const { accountName, defaultDate, variant = \"number\" } = props;\r\n  const account = useStore(\r\n    store,\r\n    (state) => state.projectedIncome.timeSeries[accountName]\r\n  );\r\n\r\n  const [date, setDate] = useState(defaultDate);\r\n  const [amount, setAmount] = useState<number | null>(null);\r\n\r\n  const hasSameDate = useMemo(() => {\r\n    return !!account?.find((x) =>\r\n      date.hasSame(DateTime.fromISO(x.date), \"day\")\r\n    );\r\n  }, [account, date]);\r\n\r\n  const onAddEntry = () => {\r\n    amount != null &&\r\n      store.setState((prev) => {\r\n        return create(prev, (next) => {\r\n          next.projectedIncome.timeSeries[accountName] =\r\n            next.projectedIncome.timeSeries[accountName]\r\n              .concat({\r\n                date: date.toString(),\r\n                value: variant === \"percent\" ? amount / 100 : amount,\r\n                id: uuid(),\r\n              })\r\n              .sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\r\n        });\r\n      });\r\n  };\r\n\r\n  const accountColumnConfig = useMemo(() => {\r\n    return createAccountColumnConfig(accountName, variant);\r\n  }, [accountName, variant]);\r\n\r\n  return (\r\n    <Box display={\"flex\"} flexDirection={\"column\"} height=\"100%\">\r\n      <Stack spacing={2} flex=\"0 1 auto\">\r\n        <DatePicker\r\n          format={shortDate}\r\n          sx={{ color: \"white\" }}\r\n          label=\"Date\"\r\n          value={date}\r\n          onChange={(value) => {\r\n            console.log(value);\r\n            value && setDate(value);\r\n          }}\r\n        />\r\n        <TextField\r\n          label=\"amount\"\r\n          value={amount ?? \"\"}\r\n          type=\"number\"\r\n          onChange={(event) =>\r\n            event.target.value === \"\"\r\n              ? setAmount(null)\r\n              : setAmount(+event.target.value)\r\n          }\r\n          InputProps={{\r\n            startAdornment: variant !== \"number\" && (\r\n              <InputAdornment position=\"start\">\r\n                {variant === \"cash\" ? \"$\" : \"%\"}\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n        <Button\r\n          disabled={amount === null || !date || hasSameDate}\r\n          onClick={onAddEntry}\r\n        >\r\n          Add Entry\r\n        </Button>\r\n      </Stack>\r\n      <Box sx={{ paddingTop: 2, flex: \"1 1 auto\" }}>\r\n        <AgGrid\r\n          reactiveCustomComponents\r\n          rowData={account ?? []}\r\n          columnDefs={accountColumnConfig}\r\n          id={account + \"-history\"}\r\n          autoSizeStrategy={{\r\n            type: \"fitGridWidth\",\r\n          }}\r\n          stopEditingWhenCellsLoseFocus\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport interface LayoutProps {\r\n  title: string;\r\n  accountName: TimeSeries;\r\n  defaultDate: DateTime;\r\n  variant: \"percent\" | \"number\" | \"cash\";\r\n}\r\n\r\nexport const Layout = (props: LayoutProps) => {\r\n  const { title, accountName, defaultDate, variant } = props;\r\n  return (\r\n    <Paper sx={{ padding: 2, height: \"100%\", width: 450, flexShrink: 0 }}>\r\n      <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\r\n        <Box flex=\"0 1 auto\" marginBottom={2}>\r\n          <Typography sx={{ marginBottom: 2 }} variant=\"h5\">\r\n            {title}\r\n          </Typography>\r\n        </Box>\r\n        <Box flex=\"1 1 auto\">\r\n          <DataEntry\r\n            variant={variant}\r\n            accountName={accountName}\r\n            defaultDate={defaultDate}\r\n          />\r\n        </Box>\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};\r\n","import { Box, Stack } from \"@mui/system\";\r\nimport { useCgAprilBonus } from \"./hooks/use-cg-april-bonus\";\r\nimport { useCgBaseIncome } from \"./hooks/use-cg-base-income\";\r\nimport { useCgJulyBonus } from \"./hooks/use-cg-july-bonus\";\r\nimport { useCgJuneBonus } from \"./hooks/use-cg-june-bonus\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo, useState } from \"react\";\r\nimport { BonusOutcome } from \"./components/bonus-outcome\";\r\nimport { Outcome } from \"./components/outcome\";\r\nimport { MeritOutcome } from \"./components/merit-increase\";\r\nimport { Layout } from \"./components/data-entry/data-entry\";\r\nimport { AddOutcome, outcomeFromSingle } from \"shared/utility/min-max-avg\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\n\r\nexport const ProjectedIncome = () => {\r\n  const [year, setYear] = useState(DateTime.local().year);\r\n\r\n  const income = useCgBaseIncome(\r\n    DateTime.fromObject({ day: 1, month: 1, year: year }),\r\n    DateTime.fromObject({ day: 1, month: 1, year: year + 1 })\r\n  );\r\n\r\n  const junePayDay = useMemo(\r\n    () => DateTime.fromObject({ day: 15, month: 6, year: year }),\r\n    [year]\r\n  );\r\n\r\n  const meritPayDay = useMemo(\r\n    () => DateTime.fromObject({ day: 15, month: 4, year: year }),\r\n    [year]\r\n  );\r\n\r\n  const meritIncreaseDay = useMemo(\r\n    () => DateTime.fromObject({ day: 1, month: 4, year: year }),\r\n    [year]\r\n  );\r\n\r\n  const mrpPayDay = useMemo(\r\n    () => DateTime.fromObject({ day: 15, month: 7, year: year }),\r\n    [year]\r\n  );\r\n\r\n  const meritBonus = useCgAprilBonus(year);\r\n  const juneBonus = useCgJuneBonus(year);\r\n  const julyBonus = useCgJulyBonus(year);\r\n\r\n  const incomeOutcome = useMemo(() => {\r\n    return AddOutcome(\r\n      outcomeFromSingle(income),\r\n      meritBonus.cash,\r\n      juneBonus.cash,\r\n      julyBonus\r\n    );\r\n  }, [income, julyBonus, juneBonus, meritBonus]);\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection=\"column\" height=\"100%\" gap={2}>\r\n      <Box flex=\"0 1 auto\">\r\n        <Stack gap={2} direction={\"row\"} overflow={\"auto\"}>\r\n          <Outcome\r\n            title={\r\n              <Box display=\"flex\" alignItems={\"center\"} gap={2} width={\"100%\"}>\r\n                <span>Projected Income</span>\r\n                <DatePicker\r\n                  sx={{ width: 90, marginLeft: \"auto\", marginRight: 2 }}\r\n                  label={\"year\"}\r\n                  views={[\"year\"]}\r\n                  defaultValue={DateTime.local()}\r\n                  slotProps={{\r\n                    textField: {\r\n                      variant: \"standard\",\r\n                      label: \"\",\r\n                    },\r\n                  }}\r\n                  onYearChange={(year) => {\r\n                    setYear(year.year);\r\n                  }}\r\n                />\r\n              </Box>\r\n            }\r\n            outcome={incomeOutcome}\r\n            payDate={junePayDay}\r\n          />\r\n          <MeritOutcome title=\"Merit Increase\" payDate={meritIncreaseDay} />\r\n          <BonusOutcome\r\n            title=\"Merit Bonus\"\r\n            outcome={meritBonus}\r\n            payDate={meritPayDay}\r\n          />\r\n          <BonusOutcome\r\n            title=\"Company Bonus\"\r\n            outcome={juneBonus}\r\n            payDate={junePayDay}\r\n          />\r\n          <Outcome title=\"MRP Bonus\" outcome={julyBonus} payDate={mrpPayDay} />\r\n        </Stack>\r\n      </Box>\r\n      <Box flex=\"1 1 auto\">\r\n        <Box overflow={\"auto\"} width={\"100%\"} height={\"100%\"}>\r\n          <Box\r\n            height={\"100%\"}\r\n            display={\"flex\"}\r\n            gap={2}\r\n            flexWrap={\"nowrap\"}\r\n            flexShrink={0}\r\n          >\r\n            <Layout\r\n              accountName=\"cgIncome\"\r\n              variant=\"cash\"\r\n              defaultDate={DateTime.fromObject({ day: 1, month: 4 })}\r\n              title=\"CG Income Per Check ($)\"\r\n            />\r\n            <Layout\r\n              title=\"Merit Increase (%)\"\r\n              accountName=\"meritIncreasePct\"\r\n              variant=\"percent\"\r\n              defaultDate={meritIncreaseDay}\r\n            />\r\n            <Layout\r\n              title=\"Equity Increase (%)\"\r\n              accountName=\"equityPct\"\r\n              variant=\"percent\"\r\n              defaultDate={meritIncreaseDay}\r\n            />\r\n            <Layout\r\n              title=\"Merit Bonus (%)\"\r\n              accountName=\"meritBonusPct\"\r\n              variant=\"percent\"\r\n              defaultDate={meritPayDay}\r\n            />\r\n            <Layout\r\n              title=\"Merit Bonus ($)\"\r\n              accountName=\"meritBonus\"\r\n              variant=\"cash\"\r\n              defaultDate={meritPayDay}\r\n            />\r\n            <Layout\r\n              title=\"Company Bonus Factor (%)\"\r\n              accountName=\"companyBonusPct\"\r\n              defaultDate={junePayDay}\r\n              variant=\"percent\"\r\n            />\r\n            <Layout\r\n              title=\"Company Bonus ($)\"\r\n              accountName=\"companyBonus\"\r\n              defaultDate={junePayDay}\r\n              variant=\"cash\"\r\n            />\r\n            <Layout\r\n              title=\"MRP Bonus ($)\"\r\n              accountName=\"mrpBonus\"\r\n              defaultDate={mrpPayDay}\r\n              variant=\"cash\"\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { Box, Tab, Tabs } from \"@mui/material\";\nimport { NetWealth } from \"capabilities/net-wealth\";\nimport { ProjectedIncome } from \"capabilities/projected-income\";\nimport { useState } from \"react\";\n\nexport const App = () => {\n  const [tab, setTab] = useState<string>(\"projected-income\");\n  return (\n    <>\n      <Tabs value={tab} onChange={(_, value) => setTab(value)}>\n        <Tab value=\"wealth\" label=\"Total Wealth\" />\n        <Tab value=\"projected-income\" label=\"Projected Income\" />\n        <Tab disabled value=\"projected-wealth\" label=\"Projected Wealth\" />\n      </Tabs>\n      <Box padding={2} height={\"95%\"} width={\"100%\"}>\n        {tab === \"wealth\" && <NetWealth />}\n        {tab === \"projected-income\" && <ProjectedIncome />}\n      </Box>\n    </>\n  );\n};\n","import { CssBaseline, ThemeProvider, createTheme } from \"@mui/material\";\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers\";\r\nimport { AdapterLuxon } from \"@mui/x-date-pickers/AdapterLuxon\";\r\nimport \"ag-grid-community/styles/ag-grid.css\";\r\nimport \"ag-grid-community/styles/ag-theme-quartz.css\";\r\nimport { App } from \"app/app.tsx\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport { ErrorBoundary } from \"react-error-boundary\";\r\nimport \"./index.css\";\r\n\r\nconst darkTheme = createTheme({\r\n  palette: {\r\n    mode: \"dark\",\r\n  },\r\n});\r\n\r\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\r\n  <React.StrictMode>\r\n    <ErrorBoundary\r\n      fallbackRender={(props) => {\r\n        return (\r\n          <>\r\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.message}</div>\r\n            <div style={{ backgroundColor: \"#FFF\" }}>\r\n              {props.error.stackTrace}\r\n            </div>\r\n          </>\r\n        );\r\n      }}\r\n    >\r\n      <LocalizationProvider dateAdapter={AdapterLuxon}>\r\n        <ThemeProvider theme={darkTheme}>\r\n          <CssBaseline />\r\n          <App />\r\n        </ThemeProvider>\r\n      </LocalizationProvider>\r\n    </ErrorBoundary>\r\n  </React.StrictMode>\r\n);\r\n\r\n"],"names":["accountDataValidator","z","object","date","string","value","number","id","accountValidator","type","literal","data","array","loanValidator","principal","ratePct","paymentsPerYear","payment","firstPaymentDate","ownershipPct","mortgageValidator","loan","optional","wealth","record","union","projectedWealth","timeSeries","cgIncome","retirementRate","savingsRate","meritBonusPct","companyBonusPct","meritBonus","companyBonus","mrpBonus","equityPct","meritIncreasePct","storeValidator","projectedIncome","createStore","key","validator","defaultValue","localData","localStorage","getItem","JSON","parse","safeParse","success","log","error","next","merge","setItem","stringify","store","CreateStore","subscribe","current","state","formatCashShort","Intl","NumberFormat","style","currency","notation","maximumFractionDigits","format","formatCash","calcLoanBalance","pricipal","rate","monthlyPayment","anualizedRate","periods","diff","DateTime","fromISO","months","totalRate","balance","calcEquity","houseValue","loanBalance","findNearstOnOrBefore","find","x","idx","startOf","length","findSameYear","year","getMortgateValue","mortgage","entry","getAccountValue","account","getGraphValue","getGraphDates","accounts","Set","flatMap","map","toISO","sort","a","b","toMillis","useGraphData","useStore","useMemo","dates","Object","values","entries","graphData","reduce","acc","accountName","toJSDate","total","firstNonZero","findIndex","slice","WealthChart","series","keys","stacked","xKey","yKey","yName","tooltip","renderer","datum","content","fromJSDate","toISODate","options","theme","title","text","axes","position","label","NewAccount","forwardRef","props","ref","open","setOpen","useState","nameRef","useRef","setError","accountType","setAccountType","undefined","target","setState","create","prev","children","AgGrid","rest","height","AgGridReact","shortDate","sortByDate","select","direction","DeleteAccount","padding","width","onDeleteAccount","RenameAccount","nextAccountName","setNextAccountName","event","onUpdateName","createAccountColumnConfig","headerName","valueFormatter","toFormat","valueGetter","cellRenderer","idxToRemove","splice","DeleteForeverIcon","AccountTab","setDate","local","amount","setamount","hasSameDate","hasSame","onAddEntry","push","toString","uuid","accountColumnConfig","color","startAdornment","mortgageColumnConfig","toFixed","groupBy","selector","curr","convertPct","min","datetime","offset","AddLoan","textField","parsed","issues","path","join","AddEntry","Stack","MortgageTab","allAccounts","mortgageData","AccountTabs","firstAccount","setAccount","useEffect","_","NetWealth","valueByDateRange","toSorted","index","plus","years","minus","days","useCgBaseIncome","startDate","endDate","lastMerit","endOfYear","fromObject","day","month","payPerPeriod","mostRecentPay","projectedPayPerPeriod","Array","fill","start","end","incomePerPeriod","filter","rangeOutside","rangeInside","overlapEnd","overlapStart","max","weeks","income","Math","round","minMaxAvg","avg","arr","Infinity","outcomeFromSingle","actual","scaleOutcome","outcome","AddOutcome","outcomes","everyActualDefined","every","useCgAprilBonus","payedOn","bonusAmmount","bonusPercent","meritOutcome","percent","cash","useCgJuneBonus","timeseries","mostRecentBonus","mostRecentPercent","meritFactor","useCgJulyBonus","payDay","juneBonus","eligbleIncome","Value","secondaryValue","display","minWidth","flexDirection","justifyContent","alignItems","gap","flexShrink","Cash","Duration","dateTime","countDownStr","diffNow","countDownColor","formatPercent","Percent","Until","BonusOutcome","payDate","border","borderRadius","paddingBottom","paddingLeft","paddingTop","Outcome","MeritOutcome","meritPct","totalAdjust","multiplier","variant","valueFormatted","UpdateIcon","editable","cellEditor","valueSetter","newValue","DataEntry","defaultDate","setAmount","concat","console","flex","Layout","marginBottom","ProjectedIncome","setYear","junePayDay","meritPayDay","meritIncreaseDay","mrpPayDay","julyBonus","incomeOutcome","Box","marginLeft","marginRight","App","tab","setTab","darkTheme","createTheme","palette","mode","ReactDOM","createRoot","document","getElementById","render","backgroundColor","message","stackTrace","AdapterLuxon"],"mappings":"yoFAEaA,MAAAA,qBAAuBC,EAAEC,OAAO,CAC3CC,KAAMF,EAAEG,OAAO,EACfC,MAAOJ,EAAEK,OAAO,EAChBC,GAAIN,EAAEG,OAAO,CACf,CAAC,ECHYI,iBAAmBP,EAAEC,OAAO,CACvCO,KAAMR,EAAES,QAAQ,SAAS,EACzBC,KAAMV,EAAEW,MAAMZ,oBAAoB,CACpC,CAAC,ECJYa,cAAgBZ,EAAEC,OAAO,CACpCY,UAAWb,EAAEK,OAAO,EACpBS,QAASd,EAAEK,OAAO,EAClBU,gBAAiBf,EAAEK,OAAO,EAC1BW,QAAShB,EAAEK,OAAO,EAClBY,iBAAkBjB,EAAEG,OAAO,EAC3Be,aAAclB,EAAEK,OAAO,CACzB,CAAC,ECLYc,kBAAoBnB,EAAEC,OAAO,CACxCO,KAAMR,EAAES,QAAQ,UAAU,EAC1BW,KAAMR,cAAcS,SAAS,EAC7BX,KAAMV,EAAEW,MAAMZ,oBAAoB,CACpC,CAAC,ECJYuB,OAAStB,EAAEuB,OAAOvB,EAAEwB,MAAM,CAACjB,iBAAkBY,iBAAiB,CAAC,CAAC,ECDhEM,gBAAkBzB,EAAEC,OAAO,CACtCyB,WAAY1B,EAAEC,OAAO,CACnB0B,SAAU3B,EAAEW,MAAMZ,oBAAoB,EACtC6B,eAAgB5B,EAAEW,MAAMZ,oBAAoB,EAC5C8B,YAAa7B,EAAEW,MAAMZ,oBAAoB,EACzC+B,cAAe9B,EAAEW,MAAMZ,oBAAoB,EAC3CgC,gBAAiB/B,EAAEW,MAAMZ,oBAAoB,EAC7CiC,WAAYhC,EAAEW,MAAMZ,oBAAoB,EACxCkC,aAAcjC,EAAEW,MAAMZ,oBAAoB,EAC1CmC,SAAUlC,EAAEW,MAAMZ,oBAAoB,EACtCoC,UAAWnC,EAAEW,MAAMZ,oBAAoB,EACvCqC,iBAAkBpC,EAAEW,MAAMZ,oBAAoB,CAAA,CAC/C,CACH,CAAC,ECZYsC,eAAiBrC,EAAEC,OAAO,CACrCqB,OACAgB,gBAAiBb,eACnB,CAAC,ECFKc,YAAc,QAClBC,IACAC,WACAC,eACG,CACGC,MAAAA,UAAYC,aAAaC,QAAQL,GAAG,EAC1C,IAAI9B,KAAOiC,UAAYG,KAAKC,MAAMJ,SAAS,EAAID,aACzCK,MAAAA,MAAQN,WAAUO,UAAUtC,IAAI,EAElC,GAAA,CAACqC,MAAME,QAAS,CACVC,QAAAA,IAAI,YAAaH,MAAMI,KAAK,EAC5BD,QAAAA,IAAI,WAAYxC,IAAI,EAEtB0C,MAAAA,KAAOC,MAAM3C,KAAMgC,YAAY,EAC7BQ,QAAAA,IAAI,SAAUE,IAAI,EAC1BR,aAAaU,QAAS,GAAEd,GAAI,YAAYM,KAAKS,UAAU7C,IAAI,CAAC,EAC5DkC,aAAaU,QAAQd,IAAKM,KAAKS,UAAUH,IAAI,CAAC,EACvCA,KAAAA,IACT,CAEMI,MAAAA,OAAQ,IAAIC,MAAe/C,IAAI,EACrC8C,cAAME,UAAU,IAAM,CACdC,MAAAA,QAAUf,aAAaC,QAAQL,GAAG,EACxCmB,SAAWf,aAAaU,QAAS,GAAEd,GAAI,YAAYmB,OAAO,EAC1Df,aAAaU,QAAQd,IAAKM,KAAKS,UAAUC,OAAMI,KAAK,CAAC,CAAA,CACtD,EAEMJ,MACT,EA5BoB,eA8BPA,MAAQjB,YAAmB,QAASF,eAAgB,CAC/DC,gBAAiB,CACfZ,WAAY,CACVC,SAAU,CAAE,EACZC,eAAgB,CAAE,EAClBC,YAAa,CAAE,EACfC,cAAe,CAAE,EACjBC,gBAAiB,CAAE,EACnBC,WAAY,CAAE,EACdC,aAAc,CAAE,EAChBC,SAAU,CAAE,EACZC,UAAW,CAAE,EACbC,iBAAkB,CAAA,CACpB,CACF,EACAd,OAAQ,CAAC,CACX,CAAC,ECnDYuC,gBAAkB,IAAIC,KAAKC,aAAa,QAAS,CAC5DC,MAAO,WACPC,SAAU,MACVC,SAAU,UACVC,sBAAuB,CACzB,CAAC,EAAEC,OAEUC,WAAa,IAAIP,KAAKC,aAAa,QAAS,CACvDC,MAAO,WACPC,SAAU,MACVE,sBAAuB,CACzB,CAAC,EAAEC,OCRUE,gBAAkBA,QAACpE,KAAgBkB,OAAe,CACvD,KAAA,CACJH,iBACAF,gBACAF,UAAW0D,SACXzD,QAAS0D,KACTxD,QAASyD,cACPrD,EAAAA,KACEsD,cAAgBF,KAAOzD,gBACvB4D,QAAUzE,KAAK0E,KACnBC,SAASC,QAAQ7D,gBAAgB,EACjC,QACF,EAAE8D,OACIC,WAAa,EAAIN,gBAAkBC,QAIlCM,OAFLV,SAAWS,UAAaP,eAAiBC,eAAkBM,UAAY,EAG3E,EAlB+BV,mBAoBlBY,WAAaA,QACxBhE,aACAiE,WACAC,YACAvE,YAEOsE,WACHA,WAAajE,aAAekE,YAC5BvE,UAAYuE,YARQF,cCjBbG,qBAAuBA,QAACnF,KAAgBQ,OAC5CA,KAAK4E,KAAK,CAACC,EAAGC,IAAK7E,QAAU,CAY9B6E,GAXAA,KAAO,GAAKX,SAASC,QAAQS,EAAErF,IAAI,EAAEuF,QAAQ,KAAK,EAAIvF,MAGtDsF,IAAM7E,MAAM+E,OAAS,GAErBb,SAASC,QAAQS,EAAErF,IAAI,EAAEuF,QAAQ,KAAK,GAAKvF,MAC3C2E,SAASC,QAAQpE,KAAK8E,IAAM,CAAC,EAAEtF,IAAI,EAAEuF,QAAQ,KAAK,EAAIvF,MAKtDsF,MAAQ7E,MAAM+E,OAAS,EAClB,MAAA,EACT,CACD,EAhBiCL,wBAmBvBM,aAAeA,QAACzF,KAAgBQ,OACpCA,KAAK4E,KAAY,GACfT,SAASC,QAAQS,EAAErF,IAAI,EAAE0F,OAAS1F,KAAK0F,IAC/C,EAHyBD,gBAMtBE,iBAAmBA,QAAC3F,KAAgB4F,WAAuB,CAC3D,GAAA,CAACA,SAAS1E,KACL,MAAA,GAET,MAAM2E,MAAQV,qBAAqBnF,KAAM4F,SAASpF,IAAI,EACtD,GACEqF,mBAAO7F,MACP4F,SAASpF,KAAK,CAAC,IAAMqF,OACrBlB,SAASC,QAAQiB,MAAM7F,IAAI,EAAIA,KAExB,MAAA,GAEH,KAAA,CAAEgB,aAAcL,SAAAA,EAAciF,SAAS1E,KACvC6D,QAAUX,gBAAgBpE,KAAM4F,SAAS1E,IAAI,EACnD,OAAO8D,WAAWhE,aAAc6E,yBAAO3F,MAAO6E,QAASpE,SAAS,CAClE,EAfyBgF,oBAiBnBG,gBAAkBA,QAAC9F,KAAgB+F,UAAqB,CAC5D,MAAMF,MAAQV,qBAAqBnF,KAAM+F,QAAQvF,IAAI,EACrD,OACEqF,mBAAO7F,MACP+F,QAAQvF,KAAK,CAAC,IAAMqF,OACpBlB,SAASC,QAAQiB,MAAM7F,IAAI,EAAIA,KAExB,GAEF6F,yBAAO3F,QAAS,CACzB,EAVwB4F,mBAYXE,cAAgBA,QAAChG,KAAgB+F,UAAgC,CAC5E,OAAQA,QAAQzF,KAAI,CAClB,IAAK,UACIwF,OAAAA,gBAAgB9F,KAAM+F,OAAO,EACtC,IAAK,WACIJ,OAAAA,iBAAiB3F,KAAM+F,OAAO,CACzC,CACF,EAP6BC,iBAShBC,cAAgBA,OAACC,UACrB,CACL,GAAG,IAAIC,IACLD,SAASE,QAAe,GACff,EAAE7E,KAAK6F,IAAKhB,IACjBV,SAASC,QAAQS,GAAErF,IAAI,EAAEuF,QAAQ,KAAK,EAAEe,MAC1C,CAAA,CACD,CACH,CAAC,EAEAD,IAAW1B,GAAAA,SAASC,QAAQS,CAAE,CAAC,EAC/BkB,KAAK,CAACC,EAAGC,IAAMD,EAAEE,WAAaD,EAAEC,UAAU,EAXlBT,iBChEhBU,aAAeA,WAAM,CAChC,MAAMvF,QAASwF,SAAStD,MAAQ+B,GAAMA,EAAEjE,MAAM,EAC9C,OAAOyF,qBAAQ,IAAM,CACnB,MAAMC,MAAQb,cAAcc,OAAOC,OAAO5F,OAAM,CAAC,EAC3C8E,SAAWa,OAAOE,QAAQ7F,OAAM,EAChC8F,UAAYJ,MAAMT,IAAc,MAC7BH,SAASiB,OACd,CAACC,IAAK,CAACC,YAAatB,OAAO,IAAM,CACzB7F,MAAAA,MAAQ8F,cAAchG,KAAM+F,OAAO,EACzCqB,WAAIC,WAAW,EAAInH,MACnBkH,IAAI,MAAYA,IAAI,MAAsBlH,MACtC,IAAA,KAAUF,KAAKsH,SAAS,EACrBF,GAAAA,EAET,CAAEG,MAAO,CAAA,CACX,CACD,EACKC,aAAeN,UAAUO,aAAkBpC,EAAE,MAAsB,CAAC,EACnE6B,OAAAA,UAAUQ,MAAMF,YAAY,CAAA,EAClC,CAACpG,OAAM,CAAC,CACb,EApB4BuF,gBCQfgB,YAAcA,WAAM,CAC/B,MAAMvG,QAASwF,SAAStD,MAAQ+B,GAAMA,EAAEjE,MAAM,EACxCZ,KAAOmG,eAEPiB,OAASf,aAAAA,QAAQ,IACd,CACL,GAAGE,OAAOc,KAAKzG,OAAM,EAAEiF,IAAW,IACzB,CACLyB,QAAS,GACTxH,KAAM,OACNyH,KAAM,OACNC,KAAM3C,EACN4C,MAAO5C,EACP6C,QAAS,CACPC,SAAUA,CAAC,CAAEC,MAAOJ,KAAMD,IAAAA,KAAY,CACpCM,QAAU,GAAE1D,SAAS2D,WACnBF,MAAML,IAAI,CACZ,EAAEQ,UAAY,CAAA,IAAG5E,gBAAgByE,MAAMJ,IAAI,CAAC,CAAE,EAAA,EAElD,CAAA,EAEH,EACD,CACE1H,KAAM,OACNyH,KAAM,OACNC,KAAM,QACNC,MAAO,QACPC,QAAS,CACPC,SAAUA,CAAC,CAAEC,MAAOJ,KAAMD,IAAAA,KAAY,CACpCM,QAAU,GAAE1D,SAAS2D,WACnBF,MAAML,IAAI,CACZ,EAAEQ,UAAY,CAAA,IAAG5E,gBAAgByE,MAAMJ,IAAI,CAAC,CAAE,EAAA,EAElD,CAAA,CAEH,EACA,CAAC5G,OAAM,CAAC,EAELoH,QAAmC3B,aAAAA,QACvC,IAAO,QAAA,OACL4B,MAAO,kBACPC,MAAO,CACLC,KAAO,gBAAehF,kBACnBnD,QAAKA,KAAKgF,OAAS,CAAC,IAApBhF,eAAuB+G,QAAS,CACnC,CAAE,EACJ,EACA/G,KACAoI,KAAM,CACJ,CACEtI,KAAM,OACNuI,SAAU,SACVC,MAAO,CACL5E,OAAQ,IACV,CAAA,EAEF,CACE5D,KAAM,SACNuI,SAAU,MAAA,CACX,EAEHjB,MAEF,GAAA,CAACpH,KAAMoH,MAAM,CACf,EACO,OAAA,IAAC,eAAc,OAAoB,CAAA,CAC5C,EAjE2BD,eCEdoB,WAAaC,aAAAA,WAGxB,CAACC,MAAOC,MAAQ,CAChB,KAAM,CAACC,KAAMC,OAAO,EAAIC,sBAAS,EAAK,EAChCC,QAAUC,oBAAyB,IAAI,EACvC,CAACtG,MAAOuG,QAAQ,EAAIH,sBAAS,EAAK,EAClC,CAACI,YAAaC,cAAc,EAAIL,aAAoB,SAAA,EAE1D,OAEI,KAAA,SAAA,CAAA,SAAA,CAAC,IAAA,OAAA,CACC,IACA,QAAS,IAAM,CACbD,QAAQ,EAAI,EACZI,SAAS,EAAK,EACdE,eAAeC,MAAS,CAAA,EAE3B,SAED,cAAA,OACC,OAAO,CAAA,KAAY,QAAS,IAAMP,QAAQ,EAAK,EAC9C,SAAA,CAAA,IAAC,aAAY,SAAe,iBAAA,CAAA,MAC3B,cACC,CAAA,SAAA,KAAC,OAAM,QAAS,EAAG,OAAQ,EACzB,SAAA,CAAC,KAAA,UAAA,CACC,OAAM,GACN,MAAOnG,MAAQ,QAAU,UACzB,SAAqB,OAAA,CACnBuG,SAAS,EAAK,EACCtJ,eAAAA,MAAM0J,OAAO1J,KAAmB,CAAA,EAEjD,MAAM,OAEN,SAAA,CAAC,IAAA,SAAA,CAAS,MAAM,WAAW,SAAQ,WAAA,EAClC,IAAA,SAAA,CAAS,MAAM,UAAU,SAAe,kBAAA,CAAA,EAC3C,EAEC,IAAA,UAAA,CACC,YAAY,OACZ,SAAU,IAAM,CACdsJ,SAAS,EAAK,CAAA,EAEhB,MACA,SAAUF,QACV,CAAA,CAAA,CACJ,CACF,CAAA,MACC,cACC,CAAA,SAAA,IAAC,QACC,SAAUrG,MACV,QAAS,IAAM,CACbK,MAAMuG,SAAmB,MAChBC,OAAOC,KAAgB,MAAA,QAE1B,GAAA,GAACT,WAAQ7F,UAAR6F,SAAiBpJ,QAClB,CAACuJ,aACDM,KAAK3I,OAAOkI,QAAQ7F,QAAQvD,KAAK,EACjC,CACAsJ,SAAS,EAAI,EACb,MACF,CAEAtG,KAAK9B,OAAOkI,QAAQ7F,QAAQvD,KAAK,EAAI,CACnCI,KAAMmJ,YACNjJ,KAAM,CAAA,CAAA,EAGR4I,QAAQ,EAAK,CAAA,CACd,CACF,CAAA,EAEJ,cAED,CAAA,EACF,CAAA,EACF,EACCH,yBAAOe,QACV,CAAA,CAAA,CAEJ,CAAC,EC7FYC,OAASA,OAAChB,OAA6C,CAC5D,KAAA,CAAE7I,GAAI,GAAG8J,IAASjB,EAAAA,MACxB,OACG,IAAA,MAAA,CAAI,GAAQ,UAAU,uBAAuB,MAAO,CAAEkB,OAAQ,MAAA,EAC7D,SAAA,IAACC,KAAgBF,YAAAA,CAAAA,GAAAA,KAAQ,CAC3B,CAAA,CAEJ,EAPsBD,UCFTI,UAAY,aCEZC,WACX,QAAIC,OAA+BC,YACnC,CAAChE,EAAMC,IACL+D,YAAc,MACVD,OAAO/D,CAAC,EAAEE,SAAAA,EAAa6D,OAAO9D,CAAC,EAAEC,SAAS,EAC1C6D,OAAO9D,CAAC,EAAEC,WAAa6D,OAAO/D,CAAC,EAAEE,SAAS,EAJhD,cCCW+D,cAAgBA,OAACxB,OAAmC,CACzD,KAAA,CAAE5B,WAAgB4B,EAAAA,MAUxB,OACG,IAAA,MAAA,CAAM,UAAW,EAAG,GAAI,CAAEyB,QAAS,EAAGC,MAAO,MAAO,EACnD,aAAC,OAAO,CAAA,QAVYC,WAAM,CAC5BtH,MAAMuG,SAAmB,MAChBC,OAAOC,KAAgB,MAAA,CACrB7G,OAAAA,KAAK9B,OAAOiG,WAAW,CAAA,CAC/B,CACF,CAAA,EALqBuD,mBAUc,MAAM,QAAQ,yBAEhD,CAAA,CACF,CAAA,CAEJ,EAlB6BH,iBCChBI,cAAgBA,OAAC5B,OAAmC,CACzD,KAAA,CAAE5B,WAAgB4B,EAAAA,MAElB,CAAC6B,gBAAiBC,kBAAkB,EAAI1B,sBAAiBhC,WAAW,EAW1E,OACG,IAAA,MAAA,CAAM,UAAW,EAAG,GAAI,CAAEqD,QAAS,CAAA,EAClC,SAAA,KAAC,MAAM,CAAA,QAAS,EACd,SAAA,CAAA,IAAC,UACC,CAAA,MAAM,eACN,MAAOI,gBACP,SAAqBC,OAAAA,mBAAmBC,MAAMpB,OAAO1J,KAAK,EAC1D,YAAY,GACZ,MACD,OAAO,CAAA,SAAU,CAAC4K,gBAAiB,QAlBrBG,WAAM,CACzB3H,MAAMuG,SAAmB,MAChBC,OAAOC,KAAgB,MAAA,CAC5B7G,KAAK9B,OAAO0J,eAAe,EAAI5H,KAAK9B,OAAOiG,WAAW,EAC/CnE,OAAAA,KAAK9B,OAAOiG,WAAW,CAAA,CAC/B,CACF,CAAA,EANkB4D,gBAkB4C,SAE3D,cAAA,CAAA,CACF,CAAA,CACF,CAAA,CAEJ,EA7B6BJ,iBCMhBK,4BAA4BA,OACvC7D,aAC0B,CAC1B,CACE8D,WAAY,OACZ5E,KAAM,OACN6E,eAAiB/F,GAAMA,QAAAA,YAAEnF,QAAFmF,eAASgG,SAAShB,YACzCiB,eAAoBjG,EAAE7E,MAAQmE,SAASC,QAAQS,EAAE7E,KAAKR,IAAI,CAC5D,EACA,CACEmL,WAAY,QACZG,YAAoBjG,WAAAA,YAAE7E,OAAF6E,eAAQnF,OAC5BkL,eAAiB/F,GAAM1B,gBAAgB0B,EAAEnF,KAAK,EAC9CI,KAAM,eACR,EACA,CACE6K,WAAY,UACZI,aAAetC,OAEX,IAAC,OACC,CAAA,QAAS,IAAM,CACb3F,MAAMuG,SAAmB,MAChBC,OAAOC,KAAgB,MAAA,CAC5B,MAAMyB,YAActI,KAAK9B,OAAOiG,WAAW,EAAE7G,KAAKiH,UAC/CpC,GAAAA,QAAMA,SAAEjF,OAAO6I,SAAMzI,OAANyI,eAAY7I,IAC9B,EACA8C,YAAK9B,OAAOiG,WAAW,EAAE7G,KAAKiL,OAAOD,YAAa,CAAC,EAC5CtI,IAAAA,CACR,CACF,CAAA,EAEH,MAAM,QAEN,SAAA,IAACwI,YAAoB,CACvB,CAAA,CAGN,CAAC,EArCsCR,+BCM5BS,WAAaA,OAAC1C,OAAmC,CACtD,KAAA,CAAE5B,WAAgB4B,EAAAA,MAClBlD,QAAUa,SACdtD,aACWI,MAAMtC,OAAOiG,WAAW,CACrC,EACM,CAACrH,KAAM4L,OAAO,EAAIvC,aAAS1E,SAAAA,SAASkH,OAAO,EAC3C,CAACC,OAAQC,SAAS,EAAI1C,sBAAS,CAAC,EAEhC2C,YAAcnF,aAAAA,QAAQ,IAAM,QAChC,MAAO,CAAC,GAACd,gCAASvF,OAATuF,SAAeX,KACtBpF,GAAAA,KAAKiM,QAAQtH,SAASC,QAAQS,EAAErF,IAAI,EAAG,KAAK,GAE7C,EAAA,CAAC+F,6BAASvF,KAAMR,IAAI,CAAC,EAElBkM,WAAaA,WAAM,CACvB5I,MAAMuG,SAAmB,MAChBC,OAAOC,KAAgB,MAAA,CAC3B7G,KAAK9B,OAAOiG,WAAW,EAAc7G,KAAK2L,KAAK,CAC9CnM,KAAMA,KAAKoM,SAAS,EACpBlM,MAAO4L,OACP1L,GAAIiM,GAAK,CAAA,CACV,EACDnJ,KAAK9B,OAAOiG,WAAW,EAAE7G,KAAK+F,KAC5B+D,WAAkB3F,GAAAA,SAASC,QAAQS,EAAErF,IAAI,EAAG,KAAK,CACnD,CAAA,CACD,CACF,CAAA,EAZgBkM,cAebI,oBAAsBzF,aAAAA,QAAQ,IAC3BqE,4BAA0B7D,WAAW,EAC3C,CAACA,WAAW,CAAC,EAGd,OAAA,KAAC,KAAK,CAAA,UAAS,GAAC,OAAO,OAAO,MAAO,OAAQ,QAAS,EAAG,QAAS,EAChE,SAAA,CAAA,IAAC,MAAK,GAAI,EACR,SAAC,IAAA,OAAA,CACC,yBAAwB,GACxB,SAAStB,6BAASvF,OAAQ,CAC1B,EAAA,WAAY8L,oBACZ,GAAIvG,QAAU,UACd,CAAA,EACJ,EACA,IAAC,KAAK,CAAA,GAAI,EACR,SAAA,IAAC,MACC,CAAA,SAAA,KAAC,KAAK,CAAA,UAAS,GAAC,QAAS,EACvB,SAAA,CAAA,IAAC,MAAK,GAAI,EACR,aAAC,MAAM,CAAA,UAAW,EAAG,GAAI,CAAE2E,QAAS,CAAA,EAClC,SAAA,KAAC,MAAM,CAAA,QAAS,EACd,SAAA,CAAC,IAAA,WAAA,CACC,OAAQL,UACR,GAAI,CAAEkC,MAAO,OAAQ,EACrB,MAAM,OACN,aAAcvM,KACd,SAAqBE,OAAAA,OAAS0L,QAAQ1L,KAAK,CAC3C,CAAA,MACD,UACC,CAAA,MAAM,SACN,MAAO4L,OACP,KAAK,SACL,SAAWd,OAAUe,UAAU,CAACf,MAAMpB,OAAO1J,KAAK,EAClD,WAAY,CACVsM,eACE,IAAC,eAAe,CAAA,SAAS,QAAQ,SAAC,IAAA,CAAA,EAGtC,YAAY,GACZ,EACF,IAAC,OACC,CAAA,SAAU,CAACV,QAAU,CAAC9L,MAAQgM,YAC9B,QAASE,WACV,SAED,WAAA,CAAA,CAAA,CACF,CAAA,CACF,CAAA,EACF,EACA,IAAC,KAAK,CAAA,GAAI,CAAG,CAAA,MACZ,KAAK,CAAA,GAAI,EACR,SAAC,KAAA,MAAA,CAAM,QAAS,EACd,SAAA,CAAA,IAAC,eAAc,YAA4B,EAC3C,IAAC,eAAc,YAA4B,CAAA,CAAA,CAC7C,CACF,CAAA,CAAA,CACF,CAAA,CACF,CAAA,EACF,CACF,CAAA,CAAA,CAEJ,EA1F0BP,cCNbT,4BAA4BA,OACvC7D,aAC0B,CAC1B,CACE8D,WAAY,OACZ5E,KAAM,OACN6E,eAAiB/F,GAAMA,QAAAA,YAAEnF,QAAFmF,eAASgG,SAAShB,YACzCiB,eAAoBjG,EAAE7E,MAAQmE,SAASC,QAAQS,EAAE7E,KAAKR,IAAI,CAC5D,EACA,CACEmL,WAAY,aACZG,YAAoBjG,WAAAA,YAAE7E,OAAF6E,eAAQnF,OAC5BkL,eAAiB/F,GAAM1B,gBAAgB0B,EAAEnF,KAAK,EAC9CI,KAAM,eACR,EACA,CACE6K,WAAY,UACZI,aAAetC,OAEX,IAAC,OACC,CAAA,QAAS,IAAM,CACb3F,MAAMuG,SAAmB,MAChBC,OAAOC,KAAgB,MAAA,CACtBhE,MAAAA,QAAU7C,KAAK9B,OAAOiG,WAAW,EACjCmE,YAAczF,QAAQvF,KAAKiH,qBACxBpC,SAAEjF,OAAO6I,SAAMzI,OAANyI,eAAY7I,IAC9B,EACQI,eAAAA,KAAKiL,OAAOD,YAAa,CAAC,EAC3BtI,IAAAA,CACR,CACF,CAAA,EAEH,MAAM,QAEN,SAAA,IAACwI,YAAoB,CACvB,CAAA,CAGN,CAAC,EAtCsCR,+BAyC5BuB,qBAGN,CACL,CACEtB,WAAY,OACZ5E,KAAM,OACN6E,eAAiB/F,GAAMA,QAAAA,YAAEnF,QAAFmF,eAASgG,SAAShB,YACzCiB,YAAoBjG,WAAAA,YAAE7E,OAAF6E,eAAQrF,KAC9B,EACA,CACEmL,WAAY,eACZG,YAAoBjG,WAAAA,YAAE7E,OAAF6E,eAAQN,QAAQ2H,QAAQ,IAC5CtB,eAAiB/F,GAAM1B,gBAAgB0B,EAAEnF,KAAK,EAC9CI,KAAM,eACR,CAAC,ECnEaqM,SAAAA,QACdlM,MACAmM,SACiB,CACjB,OAAOnM,MAAM0G,OAAO,CAACC,IAAsByF,OAAY,CAC/CvK,MAAAA,IAAMsK,SAASC,IAAI,EACrBvK,2BAAS,IACTA,IAAAA,GAAG,EAAE6J,KAAKU,IAAI,EACXzF,GACT,EAAG,CAAsB,CAAA,CAC3B,CAVgBuF,0BCYhB,MAAMG,WAAaA,OAAC5M,OACXA,MAAQ,EAAIA,MAAQ,IAAMA,MADhB4M,cAIbvK,UAA6BzC,EAAEC,OAAO,CAC1CY,UAAWb,EAAEK,SAAS4M,IAAI,CAAC,EAC3BnM,QAASd,EAAEK,SAAS4M,IAAI,CAAC,EACzBlM,gBAAiBf,EAAEK,SAAS4M,IAAI,CAAC,EACjCjM,QAAShB,EAAEK,SAAS4M,IAAI,CAAC,EACzBhM,iBAAkBjB,EAAEG,OAAO,EAAE+M,SAAS,CAAEC,OAAQ,EAAA,CAAM,EACtDjM,aAAclB,EAAEK,SAAS4M,IAAI,CAAC,CAChC,CAAC,EAEYG,QAAUA,OAACjE,OAAmC,QACnD,KAAA,CAAE5B,WAAgB4B,EAAAA,MAElB/H,KAAO0F,SAAStD,MAAc,GAAA,CAC5ByC,MAAAA,QAAUV,EAAEjE,OAAOiG,WAAW,EACpC,GAAI,SAAUtB,QACZ,OAAOA,QAAQ7E,IACjB,CACD,EAEKgI,IAAMK,aAAAA,OAAsBrI,MAAQ,CAAE,CAAA,EACtC,CAAC+B,MAAOuG,QAAQ,EAAIH,aAAAA,SAAgD,CAAE,CAAA,EAE5E,OACG,IAAA,MAAA,CAAM,UAAW,EAAG,GAAI,CAAEqB,QAAS,CAAA,EAClC,SAAA,KAAC,MAAM,CAAA,QAAS,EACd,SAAA,CAAA,IAAC,WACC,CAAA,cACExB,OAAIzF,UAAJyF,SAAanI,iBACT4D,SAASC,QAAQsE,IAAIzF,QAAQ1C,gBAAgB,EAC7C,KAEN,MAAM,gBACN,UAAW,CACToM,UAAW,CACTlK,MAAO,CAAC,CAACA,MAAMlC,gBACjB,CAAA,EAEF,SAAWb,OAA2B,CAChCA,QACEuD,IAAAA,QAAQ1C,iBAAmBb,MAAMoG,MAAM,EAC7C,EAEF,EACF,IAAC,UACC,CAAA,MAAO,CAAC,CAACrD,MAAMtC,UACf,aAAcO,uBAAMP,UACpB,SAAqB,OAAA,CACnBuI,IAAIzF,QAAQ9C,UAAY,CAACqK,MAAMpB,OAAO1J,KAAAA,EAExC,QAAQ,WACR,MAAM,YACN,KAAK,SACL,EACF,IAAC,UACC,CAAA,MAAO,CAAC,CAAC+C,MAAMrC,QACf,aAAcM,uBAAMN,QACpB,SAAqB,OAAA,CACnBsI,IAAIzF,QAAQ7C,QAAUkM,WAAW,CAAC9B,MAAMpB,OAAO1J,KAAK,CAAA,EAEtD,QAAQ,WACR,MAAM,OACN,KAAK,SACL,EACF,IAAC,UACC,CAAA,MAAO,CAAC,CAAC+C,MAAMpC,gBACf,aAAcK,uBAAML,gBACpB,SAAqB,OAAA,CACnBqI,IAAIzF,QAAQ5C,gBAAkB,CAACmK,MAAMpB,OAAO1J,KAAAA,EAE9C,QAAQ,WACR,MAAM,oBACN,KAAK,SACL,EACF,IAAC,UACC,CAAA,aAAcgB,uBAAMJ,QACpB,MAAO,CAAC,CAACmC,MAAMnC,QACf,SAAqB,OAAA,CACnBoI,IAAIzF,QAAQ3C,QAAU,CAACkK,MAAMpB,OAAO1J,KAAAA,EAEtC,QAAQ,WACR,MAAM,UACN,KAAK,SACL,EACF,IAAC,UACC,CAAA,aAAcgB,uBAAMF,aACpB,MAAO,CAAC,CAACiC,MAAMjC,aACf,SAAqB,OAAA,CACnBkI,IAAIzF,QAAQzC,aAAe8L,WAAW,CAAC9B,MAAMpB,OAAO1J,KAAK,CAAA,EAE3D,QAAQ,WACR,MAAM,gBACN,KAAK,SACL,EACF,IAAC,OACC,CAAA,QAAS,IAAM,CACb,MAAMkN,OAAS7K,UAAUO,UAAUoG,IAAIzF,OAAO,EAC9C,GAAI2J,OAAOrK,QACTyG,SAAS,CAAE,CAAA,EACXlG,MAAMuG,SAAmB,MAChBC,OAAOC,KAAgB,MAAA,CAC3B7G,KAAK9B,OAAOiG,WAAW,EAAenG,KAAOkM,OAAO5M,IAAAA,CACtD,CACF,MACI,CACC6M,MAAAA,OAASV,QAAQS,OAAOnK,MAAMoK,UAClChI,EAAEiI,KAAKC,KAAK,EAAE,CAChB,EACA/D,SAAS6D,MAAM,CACjB,CAAA,EAEH,SAED,WAAA,CAAA,CACF,CAAA,CACF,CAAA,CAEJ,EA3GuBH,WChBVM,SAAWA,OAACvE,OAAmC,CACpD,KAAA,CAAE5B,WAAgB4B,EAAAA,MAClBC,IAAMK,aAAAA,OAA4C,CACtDvJ,KAAM2E,SAASkH,MAAM,EACrB3L,MAAO,CAAA,CACR,EACKgM,WAAaA,WAAM,CACjB,KAAA,CAAElM,KAAME,KAAAA,EAAUgJ,IAAIzF,QACxB,CAACzD,MAAQ,CAACE,OAGdoD,MAAMuG,SAAmB,MAChBC,OAAOC,KAAgB,MAAA,CAC5B7G,KAAK9B,OAAOiG,WAAW,EAAE7G,KAAK2L,KAAK,CACjCnM,KAAMA,KAAKsG,MAAM,EACjBpG,MACAE,GAAIiM,GAAK,CAAA,CACV,CAAA,CACF,CACF,CAAA,EAbgBH,cAenB,OACG,IAAA,MAAA,CAAM,UAAW,EAAG,GAAI,CAAExB,QAAS,CAAA,EAClC,SAAA,KAAC+C,QAAM,CAAA,QAAS,EACd,SAAA,CAAA,IAAC,YACC,aAAc9I,SAASkH,QACvB,SAAW7L,MAA0B,CAC/BA,OACFkJ,IAAIzF,QAAQzD,KAAOA,KACrB,EAEF,MACD,UACC,CAAA,MAAM,aACN,KAAK,UACL,SAAqB,OAAA,CACnBkJ,IAAIzF,QAAQvD,MAAQ,CAAC8K,MAAMpB,OAAO1J,KAAAA,EAEpC,EACD,IAAA,OAAA,CAAO,QAASgM,WAAY,SAAc,iBAAA,CAAA,CAC7C,CAAA,CACF,CAAA,CAEJ,EA3CwBsB,YCSXE,YAAcA,OAACzE,OAAmC,CACvD,KAAA,CAAE5B,WAAgB4B,EAAAA,MAElBlD,QAAUa,SACdtD,aACWI,MAAMtC,OAAOiG,WAAW,CACrC,EAEMsG,YAAc/G,SAAStD,MAAQ+B,GAAMA,EAAEjE,MAAM,EAE7CkL,oBAAsBzF,aAAAA,QAAQ,IAC3BqE,4BAA0B7D,WAAW,EAC3C,CAACA,WAAW,CAAC,EAEVuG,aAAe/G,aAAAA,QAAQ,IACtBd,uBAAS7E,KAGP+E,cAAcc,OAAOC,OAAO2G,WAAW,CAAC,EAAEtH,IAAe,OAAA,CAC9DrG,KACA+E,QAASX,gBAAgBpE,KAAM+F,QAAQ7E,IAAK,CAC5C,EAAA,EALO,GAMR,CAAC6E,QAAQ7E,KAAMyM,WAAW,CAAC,EAG5B,OAAA,KAAC,KAAK,CAAA,UAAS,GAAC,OAAO,OAAO,MAAO,OAAQ,QAAS,EAAG,QAAS,EAChE,SAAA,CAAA,IAAC,MAAK,GAAI,EACR,SAAC,IAAA,OAAA,CACC,yBAAwB,GACxB,SAAS5H,6BAASvF,OAAQ,CAC1B,EAAA,WAAY8L,oBACZ,GAAIvG,QAAU,UACd,CAAA,EACJ,EACC,IAAA,KAAA,CAAK,GAAI,EACR,SAAC,IAAA,OAAA,CACC,QAAS6H,aACT,WAAYnB,qBACZ,GAAI1G,QAAU,UACd,CAAA,EACJ,EACA,IAAC,KAAK,CAAA,GAAI,EACR,SAAA,IAAC,MACC,CAAA,SAAA,KAAC,KAAK,CAAA,UAAS,GAAC,QAAS,EACvB,SAAA,CAAA,IAAC,MAAK,GAAI,EACR,SAAC,IAAA,QAAA,CAAQ,WAA4B,CAAA,EACvC,MACC,KAAK,CAAA,GAAI,EACR,SAAC,IAAA,SAAA,CAAS,WAA4B,CAAA,EACxC,EACA,IAAC,KAAK,CAAA,GAAI,CAAG,CAAA,MACZ,KAAK,CAAA,GAAI,EACR,SAAC,KAAA0H,QAAA,CAAM,QAAS,EACd,SAAA,CAAA,IAAC,eAAc,YAA4B,EAC3C,IAAC,eAAc,YAA4B,CAAA,CAAA,CAC7C,CACF,CAAA,CAAA,CACF,CAAA,CACF,CAAA,EACF,CACF,CAAA,CAAA,CAEJ,EA9D2BC,eCVdG,YAAcA,WAAM,cAC/B,MAAM3H,SAAWU,SAAStD,MAAQ+B,GAAMA,EAAEjE,MAAM,EAC1C0M,eAAe/G,UAAOc,KAAK3B,QAAQ,IAApBa,eAAwB,KAAM,GAC7C,CAAChB,QAASgI,UAAU,EAAI1E,sBAAiByE,YAAY,EAE3DE,oBAAAA,UAAU,IAAM,SACT9H,SAASH,OAAO,GACnBgI,aAAWhH,IAAAA,OAAOc,KAAK3B,QAAQ,IAApBa,YAAAA,IAAwB,KAAM,EAAE,CAC7C,EACC,CAAChB,QAASG,QAAQ,CAAC,EAGpB,KAAC,KAAI,QAAQ,OAAO,cAAe,SAAU,MAAM,OAAO,OAAO,OAC/D,SAAA,CAAA,IAAC,IAAI,CAAA,QAAS,OAAQ,KAAM,WAC1B,SAAC,KAAA,KAAA,CACC,MAAOH,QACP,aAAc+H,aACd,SAAU,CAACG,EAAG/N,QAAU,CACtB6N,WAAW7N,KAAgB,CAG5B6G,EAAAA,SAAAA,CAAAA,OAAOc,KAAK3B,QAAQ,EAAEG,IAAKN,cAClB,IAAkB,CAAA,MAAOA,SAAS,MAAOA,UAAhCA,QAA2C,CAC7D,EACD,IAAC,IAAI,CAAA,UAAWgD,UAAc,CAAA,CAAA,CAAA,CAChC,CACF,CAAA,EACA,KAAC,IAAI,CAAA,KAAM,WACR7C,SAAAA,GAAAA,YAASH,OAAO,IAAhBG,eAAmB5F,QAAS,WAC1B,IAAA,WAAA,CAAW,YAAayF,YAE1BG,YAASH,OAAO,IAAhBG,eAAmB5F,QAAS,YAC1B,IAAA,YAAA,CAAY,YAAayF,WAE9B,CACF,CAAA,CAAA,CAEJ,EArC2B8H,eCJdK,UAAYA,gBAEpB,KAAK,CAAA,UAAS,GAAC,OAAQ,OAAQ,MAAM,OACpC,SAAA,CAAA,IAAC,MAAK,GAAI,GAAI,OAAO,MACnB,SAAA,IAAC,cAAc,CACjB,CAAA,EACA,IAAC,MAAK,GAAI,GAAI,OAAO,MACnB,SAAA,IAAC,cAAc,CACjB,CAAA,CACF,CAAA,CAAA,EATqBA,aCOnBC,iBAAmBA,OAACpI,SACjBA,QACJqI,SAAS9D,WAAkB3F,GAAAA,SAASC,QAAQS,EAAErF,IAAI,EAAG,KAAK,CAAC,EAC3DqG,IAAI,CAAChB,EAAGgJ,MAAO5N,QAAU,CAClByC,MAAAA,KAAOzC,MAAM4N,MAAQ,CAAC,EACrB,MAAA,CACL1J,SAASC,QAAQS,EAAErF,IAAI,GACtBkD,iBAAMlD,KACH2E,SAASC,QAAQ1B,uBAAMlD,IAAI,EAAEuF,QAAQ,KAAK,EAC1CZ,SAASC,QAAQS,EAAErF,IAAI,EAAEuF,QAAQ,KAAK,EAAE+I,KAAK,CAAEC,MAAO,CAAG,CAAA,GAC3DC,MAAM,CAAEC,KAAM,CAAA,CAAG,EACnBpJ,EAAEnF,KAAK,CAAA,CAEV,EAboBiO,oBAgBZO,gBAAkBA,QAACC,UAAqBC,UAAsB,CACzE,MAAMpN,WAAaoF,SAAStD,MAAc+B,GAAAA,EAAEjD,gBAAgBZ,UAAU,EAChEC,SAAWD,WAAWC,SAEtBoN,UAAYhI,aAAAA,QAAQ,IAAM,QACxBiI,MAAAA,UAAYnK,SAASoK,WAAW,CAAEC,IAAK,GAAIC,MAAO,EAAA,CAAI,EAC5D,MACE,MACC9J,wBAAqB2J,UAAWtN,WAAWU,gBAAgB,IAA3DiD,eAA8DjF,QAAS,EAAA,EAEzE,CAACsB,WAAWU,gBAAgB,CAAC,EAEhC,OAAO2E,qBAAQ,IAAM,CACbqI,MAAAA,aAAef,iBAAiB1M,QAAQ,EACxC0N,cACJD,aAAa1J,OAAS,EAClB0J,aAAaA,aAAa1J,OAAS,CAAC,EACnC,CAACmJ,UAAWC,QAAS,CAAC,EACvBQ,sBAAwBC,MAAM,EAAE,EACnCC,KAAKH,aAAa,EAClB9I,IAAI,CAAC,CAACkJ,MAAOC,IAAKtP,KAAK,EAAiCmO,QAAU,QAC3DM,MAAAA,WAAYY,MAAMjB,KAAK,CAAEC,MAAOF,MAAQ,CAAA,CAAG,EAC1C,MAAA,CACLM,WACAa,IAAIlB,KAAK,CAAEC,MAAOF,MAAQ,CAAG,CAAA,EAC7BnO,OACG2O,aACEpJ,gBAAakJ,WAAWnN,WAAWS,SAAS,IAA5CwD,eAA+CvF,QAAS,MACxDmO,MAAQ,EAAE,CAAA,CAElB,EAsBGoB,gBApBuB,CAC3B,GAAGP,aACH,GAAGE,qBAAqB,EACxBM,OAAO,CAAC,CAACH,MAAOC,GAAG,IAAM,CACnBG,MAAAA,aAAehB,WAAaY,OAASX,SAAWY,IAChDI,YAAcjB,WAAaY,OAASC,KAAOZ,QAC3CiB,WAAalB,WAAaY,OAASX,QAAUY,KAAOZ,QAAUW,MAC9DO,aACJnB,WAAaa,KAAOb,WAAaY,OAASX,QAAUY,IAC/CI,OAAAA,aAAeD,cAAgBE,YAAcC,YAAAA,CACrD,EAE8BzJ,IAAI,CAAC,CAACkJ,MAAOC,IAAKtP,KAAK,IAC7C,CACLyE,SAASoL,IAAIR,MAAOZ,SAAS,EAC7BhK,SAASoI,IAAIyC,IAAKZ,OAAO,EACzB1O,KAAK,CAER,EAEyBmG,IAAI,CAAC,CAACkJ,MAAOC,IAAKtP,KAAK,IACvCsP,IAAI9K,KAAK6K,MAAO,OAAO,EAAES,MAAQ,EAAK9P,KAC/C,EAMM+P,OAJQC,KAAKC,MAClBV,gBAAgBtI,OAAO,CAACC,IAAKyF,OAASzF,IAAMyF,KAAM,CAAC,CACrD,CAEOoD,EACN,CAACxO,SAAUkN,UAAWC,QAASC,UAAWrN,WAAWS,SAAS,CAAC,CACpE,EA9D+ByM,mBCflB0B,UAAYA,OAACpJ,QACpBA,OAAOxB,SAAW,EACb,CAAEuH,IAAK,EAAGgD,IAAK,EAAGM,IAAK,CAAA,EAEzBrJ,OAAOG,OACZ,CAACC,IAAKyF,KAAMwB,MAAOiC,MAAQ,CACnB,KAAA,CAAEvD,IAAKgD,IAAKM,GAAQjJ,EAAAA,IACnB,MAAA,CACL2F,IAAKmD,KAAKnD,IAAIF,KAAME,GAAG,EACvBgD,IAAKG,KAAKH,IAAIlD,KAAMkD,GAAG,EACvBM,IAAKhC,QAAUiC,IAAI9K,OAAS,GAAK6K,IAAMxD,MAAQyD,IAAI9K,OAAS6K,IAAMxD,IAAAA,CACpE,EAEF,CAAEE,IAAKwD,IAAUR,IAAK,EAAGM,IAAK,CAAA,CAChC,EAduBD,aAiBZI,kBAAoBA,OAACtQ,QACzB,CAAE6M,IAAK7M,MAAO6P,IAAK7P,MAAOmQ,IAAKnQ,MAAOuQ,OAAQvQ,KAAAA,GADtBsQ,qBAIpBE,aAAeA,QAACC,QAAkBzQ,SACtC,CACL6M,IAAK4D,QAAQ5D,IAAM7M,MACnB6P,IAAKY,QAAQZ,IAAM7P,MACnBmQ,IAAKM,QAAQN,IAAMnQ,MACnBuQ,OAAQE,QAAQF,OAASE,QAAQF,OAASvQ,MAAQyJ,MAAAA,GAL1B+G,gBAmCfE,WAAaA,WAAIC,WAAiC,CAC7D,MAAMC,mBAAqBD,SAASE,MAAa1L,GAAAA,EAAEoL,QAAU9G,IAAS,EACtE,OAAOkH,SAAS1J,OACd,CAACC,IAAKyF,QACG,CACLE,IAAK3F,IAAI2F,IAAMF,KAAKE,IACpBsD,IAAKjJ,IAAIiJ,IAAMxD,KAAKwD,IACpBN,IAAK3I,IAAI2I,IAAMlD,KAAKkD,IACpBU,OAAQK,oBACH1J,IAAIqJ,QAAU,IAAM5D,KAAK4D,QAAU,GACpC9G,MAAAA,GAGR,CAAEoD,IAAK,EAAGgD,IAAK,EAAGM,IAAK,EAAGI,OAAQ9G,MAAAA,CACpC,CACF,EAf0BiH,cCxDbI,gBAAkBA,OAACtL,MAAgC,CAC9D,MAAMuL,QAAUpK,aAAAA,QACd,IAAMlC,SAASoK,WAAW,CAAEC,IAAK,GAAIC,MAAO,EAAGvJ,IAAAA,CAAM,EACrD,CAACA,IAAI,CACP,EACMlE,WAAaoF,SAAStD,MAAc+B,GAAAA,EAAEjD,gBAAgBZ,UAAU,EAChEyO,OAASvB,gBACb/J,SAASoK,WAAW,CAAEC,IAAK,EAAGC,MAAO,EAAGvJ,KAAMA,KAAO,CAAA,CAAG,EACxDf,SAASoK,WAAW,CAAEC,IAAK,EAAGC,MAAO,EAAGvJ,IAAM,CAAA,CAChD,EAEMwL,aAAerK,aAAAA,QAAQ,IAAM,QACjC,OAAOpB,gBAAawL,QAASzP,WAAWM,UAAU,IAA3C2D,eAA8CvF,KACpD,EAAA,CAAC+Q,QAASzP,WAAWM,UAAU,CAAC,EAE7BqP,cAAetK,aAAAA,QAAQ,IAAM,QACjC,OAAOpB,gBAAawL,QAASzP,WAAWI,aAAa,IAA9C6D,eAAiDvF,KACvD,EAAA,CAAC+Q,QAASzP,WAAWI,aAAa,CAAC,EAEtC,OAAOiF,qBAAQ,IAAM,CACbuK,MAAAA,aAAehB,UACnB5O,WAAWI,cACR8N,OAAc/K,GAAAA,SAASC,QAAQS,EAAErF,IAAI,EAAE0F,MAAQA,IAAI,EACnDgC,MAAM,EAAE,EACRrB,IAAKhB,GAAMA,EAAEnF,KAAK,CACvB,EAEO,MAAA,CACLmR,QAAS,CAAE,GAAGD,aAAcX,OAAQU,aAAa,EACjDG,KAAM,CACJ,GAAGZ,aAAaU,aAAcnB,MAAM,EACpCQ,OAAQS,YACV,CAAA,CACF,EACC,CAACA,aAAcC,cAAclB,OAAQzO,WAAWI,cAAe8D,IAAI,CAAC,CACzE,EAnC+BsL,mBCAlBO,eAAiBA,OAAC7L,MAAgC,CAC7D,MAAMuL,QAAUpK,aAAAA,QACd,IAAMlC,SAASoK,WAAW,CAAEC,IAAK,GAAIC,MAAO,EAAGvJ,IAAAA,CAAM,EACrD,CAACA,IAAI,CACP,EACM8L,WAAa5K,SAAStD,MAAc+B,GAAAA,EAAEjD,gBAAgBZ,UAAU,EAChEyO,OAASvB,gBACb/J,SAASoK,WAAW,CAAEC,IAAK,EAAGC,MAAO,EAAGvJ,KAAMA,KAAO,CAAA,CAAG,EACxDf,SAASoK,WAAW,CAAEC,IAAK,GAAIC,MAAO,EAAGvJ,IAAM,CAAA,CACjD,EAEA,OAAOmB,qBAAQ,IAAM,CACnB,MAAM4K,gBAAkBhM,aAAawL,QAASO,WAAWzP,YAAY,EAC/D2P,kBAAoBjM,aAAawL,QAASO,WAAW3P,eAAe,EAEpE8P,YAAcH,WAAW5P,cAC5B8N,UAAc/K,SAASC,QAAQS,EAAErF,IAAI,EAAE0F,MAAQA,IAAI,EACnDgC,MAAM,EAAE,EACRP,OAAO,CAACC,IAAKyF,OAASzF,IAAMyF,KAAK3M,MAAO,CAAC,EAEtC2Q,SAAWT,UAAUoB,WAAW3P,gBAAgBwE,IAAWhB,GAAAA,EAAEnF,KAAK,CAAC,EAEnEoR,KAAOZ,aAAaG,SAAUc,YAAc1B,MAAM,EAEjD,MAAA,CACLoB,QAAS,CAAE,GAAGR,SAAUJ,OAAQiB,iDAAmBxR,KAAM,EACzDoR,KAAM,CAAE,GAAGA,KAAMb,OAAQgB,6CAAiBvR,KAAM,CAAA,CAEpD,EAAG,CACD+P,OACAgB,QACAO,WAAWzP,aACXyP,WAAW3P,gBACX2P,WAAW5P,cACX8D,IAAI,CACL,CACH,EApC8B6L,kBCGxBJ,aAAe,IACRS,eAAiBA,OAAClM,MAA0B,CACvD,MAAMmM,OAAShL,aAAAA,QACb,IAAMlC,SAASoK,WAAW,CAAEC,IAAK,GAAIC,MAAO,EAAGvJ,IAAAA,CAAM,EACrD,CAACA,IAAI,CACP,EAEM+K,OAAS7J,SACbtD,MACOmC,GAAAA,QAAAA,uBAAaoM,OAAQxM,EAAEjD,gBAAgBZ,WAAWQ,QAAQ,IAA1DyD,eAA6DvF,MACtE,EAEM+P,OAASvB,gBACb/J,SAASoK,WAAW,CAAEC,IAAK,EAAGC,MAAO,EAAGvJ,KAAMA,KAAO,CAAA,CAAG,EACxDf,SAASoK,WAAW,CAAEC,IAAK,EAAGC,MAAO,EAAGvJ,IAAM,CAAA,CAChD,EAEM5D,WAAakP,gBAAgBtL,IAAI,EACjCoM,UAAYP,eAAe7L,IAAI,EAErC,OAAOmB,qBAAQ,IAAM,CACbkL,MAAAA,cAAgBvB,kBAAkBP,MAAM,EACxCU,QAAUD,aACdE,WAAWmB,cAAejQ,WAAWwP,KAAMQ,UAAUR,IAAI,EACzDH,YACF,EACO,MAAA,CAAE,GAAGR,QAASF,OAAQA,QAAUE,QAAQF,MAAAA,CAAO,EACrD,CAACA,OAAQR,OAAQ6B,UAAUR,KAAMxP,WAAWwP,IAAI,CAAC,CACtD,EA3B8BM,kBCPjBI,MAAQA,OAAC/I,OAAqB,CACnC,KAAA,CAAEe,SAAUiI,eAAgBvJ,KAAUO,EAAAA,MAE1C,OAAA,KAAC,KACC,GAAI,CACFiJ,QAAS,OACTC,SAAU,IAEVhI,OAAQ,GACRO,QAAS,UACT0H,cAAe,SACfC,eAAgB,SAChBC,WAAY,aACZC,IAAK,GACLC,WAAY,CAGd,EAAA,SAAA,CAAA,KAAC,KAAI,QAAS,OAAQ,WAAY,SAAU,IAAK,GAC/C,SAAA,CAAC,IAAA,IAAA,CAAI,SAAU,GAAI,WAAY,IAAK,WAAY,OAC7CxI,SAAWA,UAAW,IACzB,CAAA,EACC,CAAC,CAACiI,gBACA,IAAA,IAAA,CACC,UAAW,WACX,SAAU,GACV,WAAY,IACZ,WAAY,OACZ,cAAe,YACf,MAAO,OAENA,SACH,eAAA,CAAA,EAEJ,EACA,IAAC,IACC,CAAA,SAAU,GACV,WAAY,IACZ,WAAY,OACZ,cAAe,YAEdvJ,SACH,KAAA,CAAA,CACF,CAAA,CAAA,CAEJ,EA5CqBsJ,SCJRS,KAAOA,QAAC,CAAEvS,KAAiB,IAC/BA,MAAQyD,gBAAgBzD,KAAK,EAAI,KADtBuS,QCGPC,SAAWA,QAAC,CAAEC,SAAU3I,QAAwB,IAAM,CACjE,MAAM4I,aAAe/L,aAAAA,QACnB,IAAM8L,SAASE,QAAQ,CAAC,SAAU,OAAQ,OAAO,CAAC,EAAExH,SAAS,MAAM,EACnE,CAACsH,QAAQ,CACX,EAEMG,eAAiBjM,aAAAA,QAAQ,IAAM,CACnC,MAAM4H,KAAOkE,SAASE,QAAQ,MAAM,EAAEpE,KACtC,OAAIA,KAAO,GACF,QACEA,KAAO,GACT,SAEF,KAAA,EACN,CAACkE,QAAQ,CAAC,EAENA,OAAAA,SAAWhO,SAASkH,MAAM,MAC9B,IAAI,CAAA,MAAOiH,eAAiBF,SAAAA,YAAa,CAAA,EAE1C5I,QAEJ,EArBwB0I,YCRXK,cAAgB,IAAInP,KAAKC,aAAa,QAAS,CAC1DC,MAAO,UACPG,sBAAuB,CACzB,CAAC,EAAEC,OCEU8O,QAAUA,QAAC,CAAE9S,KAAoB,IACrC6S,cAAc7S,KAAK,EADL8S,WCGVC,MAAQA,OAAChK,OAAsB,CACpC,KAAA,CAAE0J,SAAU3I,QAAaf,EAAAA,MACxBtE,OAAAA,SAASkH,QAAU8G,UAAY3I,QACxC,EAHqBiJ,SCCRC,aAAeA,OAACjK,OAIvB,CACE,KAAA,CAAE0H,QAASjI,MAAOyK,OAAYlK,EAAAA,MAGlC,OAAA,KAAC,KAAI,GAAI,CAAEmK,OAAQ,kCAAmCC,aAAc,CAClE,EAAA,SAAA,CAAA,IAAC,YACC,GAAI,CAAEC,cAAe,EAAGC,YAAa,EAAGC,WAAY,CAAE,EACtD,QAAQ,KAEP9K,SACH,KAAA,CAAA,MACC,QAAU,EAAA,OACV,MAAM,CAAA,QAAS,EAAG,UAAW,MAAO,QAAS,GAC5C,SAAA,CAAA,IAAC,OACC,eAAgB,IAAC,QAAQ,CAAA,MAAOiI,QAAQU,QAAQtE,GAAO,CAAA,EACvD,MAAO,MAEP,SAAC,IAAA,KAAA,CAAK,MAAO4D,QAAQW,KAAKvE,GAAO,CAAA,EACnC,MACC,MACC,CAAA,mBAAiB,QAAQ,CAAA,MAAO4D,QAAQU,QAAQhB,GAAO,CAAA,EACvD,MAAO,MAEP,SAAC,IAAA,KAAA,CAAK,MAAOM,QAAQW,KAAKjB,GAAO,CAAA,EACnC,MACC,MACC,CAAA,mBAAiB,QAAQ,CAAA,MAAOM,QAAQU,QAAQtB,GAAO,CAAA,EACvD,MAAO,MAEP,SAAC,IAAA,KAAA,CAAK,MAAOY,QAAQW,KAAKvB,GAAO,CAAA,EACnC,EACC,IAAA,MAAA,CACC,MAAO,SACP,eACE,IAAC,MAAM,CAAA,SAAUoD,QACf,SAAA,IAAC,KAAK,CAAA,MAAOxC,QAAQW,KAAKb,MAAU,CAAA,CACtC,CAAA,EAGF,SAAA,IAAC,SAAS,CAAA,SAAU0C,QAClB,SAAA,IAAC,KAAK,CAAA,MAAOxC,QAAQW,KAAKb,MAAU,CAAA,CACtC,CAAA,EACF,CAAA,EACF,CACF,CAAA,CAAA,CAEJ,EAlD4ByC,gBCAfO,QAAUA,OAACxK,OAIlB,CACE,KAAA,CAAE0H,QAASjI,MAAOyK,OAAYlK,EAAAA,MAGlC,OAAA,KAAC,KACC,GAAI,CACFmK,OAAQ,kCACRC,aAAc,CAGhB,EAAA,SAAA,CAAA,IAAC,YACC,GAAI,CAAEC,cAAe,EAAGC,YAAa,EAAGC,WAAY,CAAE,EACtD,QAAQ,KAEP9K,SACH,KAAA,CAAA,MACC,QAAU,EAAA,OAEV,MAAM,CAAA,QAAS,EAAG,UAAW,MAAO,QAAS,GAC5C,SAAA,CAAC,IAAA,MAAA,CAAM,MAAO,MACZ,SAAA,IAAC,MAAK,MAAOiI,QAAQ5D,IAAO,CAC9B,CAAA,EACA,IAAC,OAAM,MAAO,MACZ,aAAC,KAAK,CAAA,MAAO4D,QAAQN,GAAAA,CAAO,CAC9B,CAAA,EACA,IAAC,OAAM,MAAO,MACZ,aAAC,KAAK,CAAA,MAAOM,QAAQZ,GAAAA,CAAO,CAC9B,CAAA,EACCoD,SACE,IAAA,MAAA,CACC,MAAO,SACP,eACE,IAAC,MAAM,CAAA,SAAUA,QACf,SAAA,IAAC,KAAK,CAAA,MAAOxC,QAAQF,MAAAA,CAAU,CACjC,CAAA,EAGF,SAAC,IAAA,SAAA,CAAS,SAAU0C,QAClB,SAAC,IAAA,KAAA,CAAK,MAAOxC,QAAQF,MAAU,CAAA,CACjC,CAAA,EACF,CAAA,EAEJ,CACF,CAAA,CAAA,CAEJ,EAjDuBgD,WCKVC,aAAeA,OAACzK,OAAgD,CACrE,KAAA,CAAEP,MAAOyK,OAAYlK,EAAAA,MAErBgH,OAASrJ,SAAStD,MACtB6B,GAAAA,qBAAqBgO,QAAS9N,EAAEjD,gBAAgBZ,WAAWC,QAAQ,CACrE,EACMkS,SAAW/M,SACftD,MAEE6P,GAAAA,SACAhO,qBACEgO,QACA9N,EAAEjD,gBAAgBZ,WAAWU,gBAC/B,CACJ,EAEMD,UAAY2E,SAChBtD,MAEE6P,GAAAA,SAAW1N,aAAa0N,QAAS9N,EAAEjD,gBAAgBZ,WAAWS,SAAS,CAC3E,EAEM2R,cAAeD,+BAAUzT,QAAS,KAAM+B,iCAAW/B,QAAS,GAC5D2T,WAAalP,SAASkH,MAAAA,EAAUsH,QAAU,EAAIS,YAAc,EAEhE,OAAA,KAAC,KACC,GAAI,CACFR,OAAQ,kCACRC,aAAc,CAGhB,EAAA,SAAA,CAAA,IAAC,YACC,GAAI,CAAEC,cAAe,EAAGC,YAAa,EAAGC,WAAY,CAAE,EACtD,QAAQ,KAEP9K,SACH,KAAA,CAAA,MACC,QAAU,EAAA,OAEV,MAAM,CAAA,QAAS,EAAG,UAAW,MAAO,QAAS,GAC5C,SAAA,CAAA,IAAC,OACC,MAAO,UACP,eAAgB,IAAC,SAAQ,MAAOkL,WAAe,CAAA,EAE/C,SAAA,IAAC,MAAK,QAAQ3D,2BAAQ/P,QAAS,GAAK2T,UAAc,CAAA,EACpD,MACC,MACC,CAAA,MAAO,WACP,eAAgB,IAAC,SAAQ,MAAOD,YAAe,EAE/C,SAAA,IAAC,MAAK,QAAQ3D,2BAAQ/P,QAAS,GAAK2T,WAAa,EAAM,CAAA,EACzD,EACA,IAAC,MACC,CAAA,MAAO,SACP,mBACG,MAAM,CAAA,SAAUV,QACf,SAAA,IAAC,QAAQ,CAAA,MAAOS,WAAe,CAAA,CACjC,CAAA,EAGF,SAAC,IAAA,SAAA,CAAS,SAAUT,QAClB,aAAC,QAAQ,CAAA,MAAOS,WAAe,CAAA,CACjC,CAAA,EACF,CAAA,EACF,CACF,CAAA,CAAA,CAEJ,EAnE4BF,gBCAfxI,0BAA4BA,QACvC7D,YACAyM,UAC0B,CAC1B,CACE3I,WAAY,OACZ5E,KAAM,OACN6E,eAAiB/F,GAAMA,QAAAA,YAAEnF,QAAFmF,eAASgG,SAAShB,YACzCiB,eAAoBjG,EAAE7E,MAAQmE,SAASC,QAAQS,EAAE7E,KAAKR,IAAI,EAC1DuL,aAAelG,GAEV,KAAAoI,QAAA,CAAM,UAAW,MAAO,WAAY,SAClCpI,SAAAA,CAAE0O,EAAAA,eAAe,IACjB1O,EAAEnF,OAASmF,EAAEnF,MAAQyE,SAASkH,MAAM,GAClC,IAAA,QAAA,CAAQ,MAAM,eACb,SAAA,IAACmI,YAAW,CAAA,UAAU,QAAW,CAAA,EACnC,CAEJ,CAAA,CAAA,CAGN,EACA,CACE7I,WAAY,QACZG,YAAoBjG,WAAAA,YAAE7E,OAAF6E,eAAQnF,OAC5BkL,eACE0I,GAAAA,UAAY,SACRzO,EAAEnF,MACF4T,UAAY,OACZ3P,WAAWkB,EAAEnF,KAAK,GACjBmF,EAAEnF,MAAQ,KAAKwM,QAAQ,CAAC,EAAI,IACnCpM,KAAM,gBACN2T,SAAU,GACVC,WAAY,qBACZC,YAAoB,IAClB7Q,MAAMuG,SAAmB,MACVC,OAAOC,KAAO7G,OAAS,CAClC,MAAM6C,QAAU7C,MAAKd,gBAAgBZ,WAAW6F,WAAW,EACrD/B,IAAMS,QAAQ0B,UAAU,CAAC,CAAErH,EAASA,IAAAA,KAAOiF,EAAE7E,KAAKJ,EAAE,EAC1D2F,QAAQT,GAAG,EAAEpF,MAAQ,CAACmF,EAAE+O,QAAAA,CACzB,CAEF,EACM,GAEX,EACA,CACEjJ,WAAY,UACZI,aAAetC,OAEX,IAAC,OACC,CAAA,QAAS,IAAM,CACb3F,MAAMuG,SAAmB,MAChBC,OAAOC,KAAgB,MAAA,CAC5B,MAAMyB,YAActI,KAAKd,gBAAgBZ,WACvC6F,WAAW,EACXI,UAAWpC,GAAAA,QAAMA,SAAEjF,OAAO6I,SAAMzI,OAANyI,eAAY7I,IAAE,EAC1C8C,KAAKd,gBAAgBZ,WAAW6F,WAAW,EAAEoE,OAC3CD,YACA,CACF,CAAA,CACD,CACF,CAAA,EAEH,MAAM,QAEN,SAAA,IAACE,YAAoB,CACvB,CAAA,CAGN,CAAC,EAtEsCR,6BCQ5BmJ,UAAYA,OAACpL,OAIpB,CACE,KAAA,CAAE5B,YAAaiN,YAAaR,QAAU,QAAa7K,EAAAA,MACnDlD,QAAUa,SACdtD,MACCI,OAAUA,MAAMtB,gBAAgBZ,WAAW6F,WAAW,CACzD,EAEM,CAACrH,KAAM4L,OAAO,EAAIvC,sBAASiL,WAAW,EACtC,CAACxI,OAAQyI,SAAS,EAAIlL,sBAAwB,IAAI,EAElD2C,YAAcnF,aAAAA,QAAQ,IACnB,CAAC,EAACd,uBAASX,KAChBpF,GAAAA,KAAKiM,QAAQtH,SAASC,QAAQS,EAAErF,IAAI,EAAG,KAAK,IAE7C,CAAC+F,QAAS/F,IAAI,CAAC,EAEZkM,WAAaA,WAAM,CACb,QAAA,MACR5I,MAAMuG,SAAmB,MAChBC,OAAOC,KAAgB,MAAA,CACvB3H,KAAAA,gBAAgBZ,WAAW6F,WAAW,EACzCnE,KAAKd,gBAAgBZ,WAAW6F,WAAW,EACxCmN,OAAO,CACNxU,KAAMA,KAAKoM,SAAS,EACpBlM,MAAO4T,UAAY,UAAYhI,OAAS,IAAMA,OAC9C1L,GAAIiM,GAAK,CACV,CAAA,EACA9F,KAAK+D,WAAYjF,GAAMV,SAASC,QAAQS,EAAErF,IAAI,EAAG,KAAK,CAAC,CAAA,CAC7D,CACF,CAAA,EAbckM,cAgBbI,oBAAsBzF,aAAAA,QAAQ,IAC3BqE,0BAA0B7D,YAAayM,OAAO,EACpD,CAACzM,YAAayM,OAAO,CAAC,EAEzB,YACG,IAAI,CAAA,QAAS,OAAQ,cAAe,SAAU,OAAO,OACpD,SAAA,CAAA,KAAC,MAAM,CAAA,QAAS,EAAG,KAAK,WACtB,SAAA,CAAC,IAAA,WAAA,CACC,OAAQzJ,UACR,GAAI,CAAEkC,MAAO,OAAA,EACb,MAAM,OACN,MAAOvM,KACP,SAAqB,OAAA,CACnByU,QAAQzR,IAAI9C,KAAK,EACjBA,OAAS0L,QAAQ1L,KAAK,CAAA,EAExB,EACF,IAAC,UACC,CAAA,MAAM,SACN,MAAO4L,QAAU,GACjB,KAAK,SACL,SACEd,OAAAA,MAAMpB,OAAO1J,QAAU,GACnBqU,UAAU,IAAI,EACdA,UAAU,CAACvJ,MAAMpB,OAAO1J,KAAK,EAEnC,WAAY,CACVsM,eAAgBsH,UAAY,UACzB,IAAA,eAAA,CAAe,SAAS,QACtBA,SAAAA,UAAY,OAAS,IAAM,GAC9B,CAAA,CAAA,EAGJ,EACF,IAAC,OACC,CAAA,SAAUhI,SAAW,MAAQ,CAAC9L,MAAQgM,YACtC,QAASE,WACV,SAED,WAAA,CAAA,CAAA,EACF,EACA,IAAC,KAAI,GAAI,CAAEsH,WAAY,EAAGkB,KAAM,UAAA,EAC9B,SAAA,IAAC,OACC,CAAA,yBAAwB,GACxB,QAAS3O,SAAW,CAAE,EACtB,WAAYuG,oBACZ,GAAIvG,QAAU,WACd,iBAAkB,CAChBzF,KAAM,cAAA,EAER,8BAA6B,EAC7B,CAAA,EACJ,CACF,CAAA,CAAA,CAEJ,EA3FyB+T,aAoGZM,OAASA,OAAC1L,OAAuB,CACtC,KAAA,CAAEP,MAAOrB,YAAaiN,YAAaR,OAAY7K,EAAAA,MAEnD,OAAA,IAAC,OAAM,GAAI,CAAEyB,QAAS,EAAGP,OAAQ,OAAQQ,MAAO,IAAK6H,WAAY,CAAE,EACjE,cAAC,IAAI,CAAA,QAAQ,OAAO,cAAc,SAAS,OAAO,OAChD,SAAA,CAAA,IAAC,KAAI,KAAK,WAAW,aAAc,EACjC,SAAA,IAAC,YAAW,GAAI,CAAEoC,aAAc,CAAK,EAAA,QAAQ,KAC1ClM,SAAAA,KAAAA,CACH,CACF,CAAA,EACA,IAAC,KAAI,KAAK,WACR,aAAC,UACC,CAAA,QACA,YACA,WAAA,CACA,CACJ,CAAA,CAAA,CACF,CAAA,CACF,CAAA,CAEJ,EApBsBiM,UC5GTE,gBAAkBA,WAAM,CAC7B,KAAA,CAACnP,KAAMoP,OAAO,EAAIzL,aAAAA,SAAS1E,SAASkH,MAAAA,EAAQnG,IAAI,EAEhDuK,OAASvB,gBACb/J,SAASoK,WAAW,CAAEC,IAAK,EAAGC,MAAO,EAAGvJ,IAAAA,CAAY,EACpDf,SAASoK,WAAW,CAAEC,IAAK,EAAGC,MAAO,EAAGvJ,KAAMA,KAAO,CAAG,CAAA,CAC1D,EAEMqP,WAAalO,aAAAA,QACjB,IAAMlC,SAASoK,WAAW,CAAEC,IAAK,GAAIC,MAAO,EAAGvJ,IAAAA,CAAY,EAC3D,CAACA,IAAI,CACP,EAEMsP,YAAcnO,aAAAA,QAClB,IAAMlC,SAASoK,WAAW,CAAEC,IAAK,GAAIC,MAAO,EAAGvJ,IAAAA,CAAY,EAC3D,CAACA,IAAI,CACP,EAEMuP,iBAAmBpO,aAAAA,QACvB,IAAMlC,SAASoK,WAAW,CAAEC,IAAK,EAAGC,MAAO,EAAGvJ,IAAAA,CAAY,EAC1D,CAACA,IAAI,CACP,EAEMwP,UAAYrO,aAAAA,QAChB,IAAMlC,SAASoK,WAAW,CAAEC,IAAK,GAAIC,MAAO,EAAGvJ,IAAAA,CAAY,EAC3D,CAACA,IAAI,CACP,EAEM5D,WAAakP,gBAAgBtL,IAAI,EACjCoM,UAAYP,eAAe7L,IAAI,EAC/ByP,UAAYvD,eAAelM,IAAI,EAE/B0P,cAAgBvO,aAAAA,QAAQ,IACrB+J,WACLJ,kBAAkBP,MAAM,EACxBnO,WAAWwP,KACXQ,UAAUR,KACV6D,SACF,EACC,CAAClF,OAAQkF,UAAWrD,UAAWhQ,UAAU,CAAC,EAG3C,OAAA,KAACuT,OAAI,QAAQ,OAAO,cAAc,SAAS,OAAO,OAAO,IAAK,EAC5D,SAAA,CAAC,IAAAA,MAAA,CAAI,KAAK,WACR,SAAC,KAAA5H,QAAA,CAAM,IAAK,EAAG,UAAW,MAAO,SAAU,OACzC,SAAA,CAAC,IAAA,QAAA,CACC,MACE,KAAC4H,MAAI,CAAA,QAAQ,OAAO,WAAY,SAAU,IAAK,EAAG,MAAO,OACvD,SAAA,CAAA,IAAC,QAAK,SAAgB,kBAAA,CAAA,EACtB,IAAC,YACC,GAAI,CAAE1K,MAAO,GAAI2K,WAAY,OAAQC,YAAa,CAAA,EAClD,MAAO,OACP,MAAO,CAAC,MAAM,EACd,aAAc5Q,SAASkH,MAAM,EAC7B,UAAW,CACTsB,UAAW,CACT2G,QAAS,WACThL,MAAO,EACT,CAAA,EAEF,aAAepD,OAAS,CACtBoP,QAAQpP,MAAKA,IAAI,CAAA,EAEnB,CAAA,CAAA,CACJ,EAEF,QAAS0P,cACT,QAASL,UACT,CAAA,EACD,IAAA,aAAA,CAAa,MAAM,iBAAiB,QAASE,iBAAoB,MACjE,aACC,CAAA,MAAM,cACN,QAASnT,WACT,QAASkT,YACT,MACD,aACC,CAAA,MAAM,gBACN,QAASlD,UACT,QAASiD,WACT,MACD,QAAQ,CAAA,MAAM,YAAY,QAASI,UAAW,QAASD,UAAa,CAAA,CAAA,CACvE,CACF,CAAA,EACA,IAACG,OAAI,KAAK,WACR,aAACA,MAAI,CAAA,SAAU,OAAQ,MAAO,OAAQ,OAAQ,OAC5C,SAAC,KAAAA,MAAA,CACC,OAAQ,OACR,QAAS,OACT,IAAK,EACL,SAAU,SACV,WAAY,EAEZ,SAAA,CAAA,IAAC,QACC,YAAY,WACZ,QAAQ,OACR,YAAa1Q,SAASoK,WAAW,CAAEC,IAAK,EAAGC,MAAO,CAAA,CAAG,EACrD,MAAM,0BACN,EACF,IAAC,QACC,MAAM,qBACN,YAAY,mBACZ,QAAQ,UACR,YAAagG,gBACb,CAAA,EACF,IAAC,QACC,MAAM,sBACN,YAAY,YACZ,QAAQ,UACR,YAAaA,gBACb,CAAA,EACF,IAAC,QACC,MAAM,kBACN,YAAY,gBACZ,QAAQ,UACR,YAAaD,WACb,CAAA,EACF,IAAC,QACC,MAAM,kBACN,YAAY,aACZ,QAAQ,OACR,YAAaA,WACb,CAAA,EACF,IAAC,QACC,MAAM,2BACN,YAAY,kBACZ,YAAaD,WACb,QAAQ,SACR,CAAA,EACF,IAAC,QACC,MAAM,oBACN,YAAY,eACZ,YAAaA,WACb,QAAQ,MACR,CAAA,EACF,IAAC,QACC,MAAM,gBACN,YAAY,WACZ,YAAaG,UACb,QAAQ,MACR,CAAA,CAAA,CACJ,CAAA,CACF,CAAA,EACF,CACF,CAAA,CAAA,CAEJ,EAjJ+BL,mBCTlBW,IAAMA,WAAM,CACvB,KAAM,CAACC,IAAKC,MAAM,EAAIrM,sBAAiB,kBAAkB,EACzD,OAEI,KAAA,SAAA,CAAA,SAAA,CAAC,KAAA,KAAA,CAAK,MAAOoM,IAAK,SAAU,CAACxH,EAAG/N,QAAUwV,OAAOxV,KAAK,EACpD,SAAA,CAAA,IAAC,IAAI,CAAA,MAAM,SAAS,MAAM,eAAc,EACvC,IAAA,IAAA,CAAI,MAAM,mBAAmB,MAAM,mBAAkB,MACrD,IAAI,CAAA,SAAQ,GAAC,MAAM,mBAAmB,MAAM,mBAAkB,CAAA,EACjE,OACC,IAAI,CAAA,QAAS,EAAG,OAAQ,MAAO,MAAO,OACpCuV,SAAAA,CAAQ,MAAA,cAAa,UAAY,CAAA,CAAA,EACjCA,MAAQ,oBAAsB,IAAC,gBAAkB,CAAA,CAAA,CAAA,EACpD,CACF,CAAA,CAAA,CAEJ,EAfmBD,OCMbG,UAAYC,YAAY,CAC5BC,QAAS,CACPC,KAAM,MACR,CACF,CAAC,EAEDC,OAASC,WAAWC,SAASC,eAAe,MAAM,CAAE,EAAEC,OACnD,IAAA,MAAM,WAAN,CACC,SAAC,IAAA,cAAA,CACC,eAA2B,OAGrB,KAAA,SAAA,CAAA,SAAA,CAAA,IAAC,OAAI,MAAO,CAAEC,gBAAiB,MAAO,EAAInN,SAAMhG,MAAAA,MAAMoT,OAAQ,CAAA,EAC9D,IAAC,OAAI,MAAO,CAAED,gBAAiB,MAAO,EACnCnN,SAAMhG,MAAAA,MAAMqT,UACf,CAAA,CACF,CAAA,CAAA,EAIJ,aAAC,qBAAqB,CAAA,YAAaC,aACjC,SAAC,KAAA,cAAA,CAAc,MAAOZ,UACpB,SAAA,CAAA,IAAC,YAAc,EAAA,MACd,IAAM,EAAA,CAAA,CACT,CAAA,CACF,CAAA,EACF,CAAA,CACF,CACF"}